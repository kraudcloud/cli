openapi: 3.0.0
info:
  title: kraud.cloud macro
  description: computer go beep boop
  version: 1.0.0

servers:
  - url: https://localhost:3447/v1/
    description: dev

security:
  - bearerAuth: []

components:

  schemas:

    Base:
      description: fields set in every object returned by the api
      type: object
      properties:
        apiVersion:
          type: string
          example: "v1"
          description: "always the literal: v1"
        kind:
          type: string
          example: "APIVersions"
          description: "the name of the schema"
      required:
        - apiVersion
        - kind

    CodeVersionInfo:
      type: object
      properties:
        "buildDate":
          "type": "string"
        "compiler":
          "type": "string"
        "gitCommit":
          "type": "string"
        "gitTreeState":
          "type": "string"
        "gitVersion":
          "type": "string"
        "goVersion":
          "type": "string"
        "major":
          "type": "string"
        "minor":
          "type": "string"
        "platform":
          "type": "string"
      "required":
        - "major"
        - "minor"
        - "gitVersion"
        - "gitCommit"
        - "gitTreeState"
        - "buildDate"
        - "goVersion"
        - "compiler"
        - "platform"

    Index:
      type: object
      properties:
        paths:
          type: array
          items:
            type: string
      required:
        - paths
    k8s.SelfSubjectAccessReview:
      properties:
        apiVersion:
          type: string
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        spec:
          $ref: '#/components/schemas/k8s.SelfSubjectAccessReviewSpec'
        status:
          $ref: '#/components/schemas/k8s.SubjectAccessReviewStatus'
      type: object
      x-kubernetes-group-version-kind:
      - group: 'authorization.k8s.io/v1'
        kind: CertificateSigningRequest
        version: v1


    k8s.SelfSubjectAccessReviewSpec:
      type: object
      properties:
        nonResourceAttributes:
          type: object
        resourceAttributes:
          type: object


    k8s.SubjectAccessReviewStatus:
      type: object
      properties:
        allowed:
          type: boolean
        defined:
          type: boolean
        evaluationError:
          type: boolean
        reason:
          type: string
      required:
        - allowed


    k8s.CertificateSigningRequestList:
      properties:
        apiVersion:
          type: string
        items:
          items:
            $ref: '#/components/schemas/k8s.CertificateSigningRequest'
          type: array
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      required:
      - apiVersion
      - kind
      - metadata
      - items
      type: object
      x-kubernetes-group-version-kind:
      - group: ''
        kind: CertificateSigningRequestList
        version: v1


    k8s.CertificateSigningRequest:
      properties:
        apiVersion:
          type: string
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/k8s.CertificateSigningRequestSpec'
        status:
          $ref: '#/components/schemas/k8s.CertificateSigningRequestStatus'
        automountCertificateSigningRequestToken:
          type: boolean
      type: object
      required:
      - apiVersion
      - kind
      - metadata
      - spec
      - status
      x-kubernetes-group-version-kind:
      - group: ''
        kind: CertificateSigningRequest
        version: v1

    k8s.CertificateSigningRequestSpec:
      type: object
      properties:
        request:
          type: string
          format: byte
        signerName:
          type: string
        expirationSeconds:
          type: integer
        usages:
          type: array
          items:
            type: string
        uid:
          type: string
        username:
          type: string
      required:
        - request
        - signerName

    k8s.CertificateSigningRequestStatus:
      type: object
      properties:
        certificate:
          type: string
          format: byte
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/k8s.CertificateSigningRequestCondition'

    k8s.CertificateSigningRequestCondition:
      type: object
      properties:
        type:
          type: string
          description: "Approved, Denied, Failed"
        status:
          type: string
          description: "True, False, Unknown"
      required:
        - type
        - status



    k8s.ConfigMapList:
      properties:
        apiVersion:
          type: string
        items:
          items:
            $ref: '#/components/schemas/k8s.ConfigMap'
          type: array
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      required:
        - apiVersion
        - kind
        - metadata
        - items
      type: object
      x-kubernetes-group-version-kind:
      - group: ''
        kind: ConfigMapList
        version: v1


    k8s.ConfigMap:
      properties:
        apiVersion:
          type: string
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        data:
          type: object
          additionalProperties:
            type: string
        binaryData:
          type: object
          additionalProperties:
            type: string
      required:
        - apiVersion
        - kind
        - metadata
      type: object
      x-kubernetes-group-version-kind:
      - group: ''
        kind: ConfigMap
        version: v1

    k8s.DeploymentList:
      properties:
        apiVersion:
          type: string
        items:
          items:
            $ref: '#/components/schemas/k8s.Deployment'
          type: array
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      required:
        - apiVersion
        - kind
        - metadata
        - items
      type: object
      x-kubernetes-group-version-kind:
      - group: 'apps/v1'
        kind: DeploymentList
        version: v1

    k8s.Deployment:
      properties:
        apiVersion:
          type: string
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/k8s.DeploymentSpec'
        status:
          $ref: '#/components/schemas/k8s.DeploymentStatus'
      required:
        - apiVersion
        - kind
        - metadata
        - spec
        - status
      type: object
      x-kubernetes-group-version-kind:
      - group: 'apps/v1'
        kind: Deployment
        version: v1


    k8s.RollingUpdateDeployment:
      type: object
      required:
        - maxSurge
        - maxUnavailable
      properties:
        maxSurge:
          type: integer
        maxUnavailable:
          type: integer

    k8s.DeploymentStrategy:
      type: object
      required:
        - type
      properties:
        rollingUpdate:
          $ref: '#/components/schemas/k8s.RollingUpdateDeployment'
        type:
          description: "Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.\n\n"
          type: string

    k8s.DeploymentSpec:
      type: object
      required:
        - replicas
        - selector
        - strategy
        - minReadySeconds
      properties:
        replicas:
          type: integer
        minReadySeconds:
          type: integer
          format: int32
        paused:
          type: boolean
        progressDeadlineSeconds:
          type: integer
          format: int32
        revisionHistoryLimit:
          type: integer
          format: int32
        strategy:
          $ref: '#/components/schemas/k8s.DeploymentStrategy'
        selector:
          type: object
          additionalProperties:
            type: string
          description: "ignored for compatbility. the deployment controller selects the pods it creates"
        template:
          $ref: '#/components/schemas/k8s.Pod'



    k8s.DeploymentCondition:
      type: object
      required:
        - type
        - status
      properties:
        lastTransitionTime:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        lastUpdateTime:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        message:
          type: string
        reason:
          type: string
        status:
          type: string
        type:
          type: string


    k8s.DeploymentStatus:
      type: object
      required:
        - availableReplicas
        - collisionCount
        - conditions
        - observedGeneration
        - readyReplicas
        - replicas
        - unavailableReplicas
        - updatedReplicas
      properties:
        availableReplicas:
          type: integer
        collisionCount:
          type: integer
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/k8s.DeploymentCondition'

        observedGeneration:
          type: integer
          format: int64
        readyReplicas:
          type: integer
          format: int32
        replicas:
          type: integer
          format: int32
        unavailableReplicas:
          type: integer
          format: int32
        updatedReplicas:
          type: integer
          format: int32

    k8s.EndpointsList:
      properties:
        apiVersion:
          type: string
        items:
          items:
            $ref: '#/components/schemas/k8s.Endpoints'
          type: array
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      required:
      - items
      type: object
      x-kubernetes-group-version-kind:
      - group: ''
        kind: EndpointsList
        version: v1


    k8s.Endpoints:
      properties:
        apiVersion:
          type: string
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        subsets:
          type: array
          items:
            $ref: '#/components/schemas/k8s.EndpointSubset'
      required:
      - spec
      type: object
      x-kubernetes-group-version-kind:
      - group: ''
        kind: Endpoints
        version: v1

    k8s.EndpointSubset:
      type: object
      properties:
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/k8s.EndpointAddress'
        notReadyAddresses:
          type: array
          items:
            $ref: '#/components/schemas/k8s.EndpointAddress'
        ports:
          type: array
          items:
            $ref: '#/components/schemas/k8s.EndpointPort'

    k8s.EndpointPort:
      type: object
      properties:
        appProtocol:
          type: string
        name:
          type: string
        port:
          type: integer
          format: int32
        protocol:
          type: string
          description: "TCP|UDP"
      required:
        - port

    k8s.EndpointAddress:
      type: object
      properties:
        hostname:
          type: string
        ip:
          type: string
        nodeName:
          type: string
        targetRef:
          $ref: "#/components/schemas/io.k8s.api.core.v1.ObjectReference"
      required:
        - ip

    k8s.EventList:
      properties:
        apiVersion:
          type: string
        items:
          items:
            $ref: '#/components/schemas/k8s.Event'
          type: array
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      required:
      - items
      type: object
      x-kubernetes-group-version-kind:
      - group: ''
        kind: EventList
        version: v1

    k8s.Event:
      type: object
      properties:
        apiVersion:
          items:
            $ref: '#/components/schemas/k8s.Event'
          type: array
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        action:
          type: string
        eventTime:
          type: string
          format: date-time
        note:
          type: string
        reason:
          type: string
        regarding:
          $ref: "#/components/schemas/io.k8s.api.core.v1.ObjectReference"
        related:
          $ref: "#/components/schemas/io.k8s.api.core.v1.ObjectReference"
        reportingController:
          type: string
        reportingInstance:
          type: string
        type:
          type: string

    io.k8s.api.core.v1.ObjectReference:
      type: object
      properties:
        apiVersion:
          type: string
        fieldPath:
          type: "string"
        kind:
          type: "string"
        name:
          type: "string"
        namespace:
          type: "string"
        resourceVersion:
          type: "string"
        uid:
          type: "string"


    k8s.ImageList:
      description: ImageList is a list of Images.
      properties:
        apiVersion:
          type: string
        items:
          items:
            $ref: '#/components/schemas/k8s.Image'
          type: array
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      required:
        - apiVersion
        - kind
        - metadata
        - items
      type: object
      x-kubernetes-group-version-kind:
      - group: ''
        kind: ImageList
        version: v1


    k8s.Image:
      description: Image is a docker image
      properties:
        apiVersion:
          type: string
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/k8s.ImageSpec'
        status:
          $ref: '#/components/schemas/k8s.ImageStatus'
      type: object
      required:
        - apiVersion
        - kind
        - metadata
      x-kubernetes-group-version-kind:
      - group: ''
        kind: Image
        version: v1

    k8s.ImageSpec:
      properties:
        ref:
          type: string
      required:
      - ref
      type: object


    k8s.ImageStatus:
      properties:
        size:
          type: integer
      required:
      - size
      type: object
    k8s.IngressClassList:
      properties:
        apiVersion:
          type: string
        items:
          items:
            $ref: '#/components/schemas/k8s.IngressClass'
          type: array
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      required:
        - apiVersion
        - kind
        - metadata
        - items
      type: object
      x-kubernetes-group-version-kind:
      - group: 'networking.k8s.io/v1'
        kind: IngressClassList
        version: v1

    k8s.IngressClass:
      properties:
        apiVersion:
          type: string
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/k8s.IngressClassSpec'
      type: object
      required:
        - apiVersion
        - kind
        - metadata
        - spec
      x-kubernetes-group-version-kind:
      - group: 'networking.k8s.io/v1'
        kind: Ingress
        version: v1

    k8s.IngressClassSpec:
      type: object
      properties:
        controller:
          type: string

    k8s.IngressList:
      properties:
        apiVersion:
          type: string
        items:
          items:
            $ref: '#/components/schemas/k8s.Ingress'
          type: array
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      required:
        - apiVersion
        - kind
        - metadata
        - items
      type: object
      x-kubernetes-group-version-kind:
      - group: 'networking.k8s.io/v1'
        kind: IngressList
        version: v1

    k8s.Ingress:
      properties:
        apiVersion:
          type: string
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/k8s.IngressSpec'
        status:
          $ref: '#/components/schemas/k8s.IngressStatus'

      type: object
      required:
        - apiVersion
        - kind
        - metadata
        - spec
        - status
      x-kubernetes-group-version-kind:
      - group: 'networking.k8s.io/v1'
        kind: Ingress
        version: v1


    k8s.LoadBalancerStatusIngressPort:
      type: object
      properties:
        error:
          type: string
        port:
          type: integer
          format: int32
        protocol:
          type: string

    k8s.LoadBalancerStatusIngress:
      type: object
      properties:
        hostname:
          type: string
        ip:
          type: string
        ports:
          type: array
          items:
            $ref: '#/components/schemas/k8s.LoadBalancerStatusIngressPort'

    k8s.IngressStatus:
      type: object
      properties:
        loadBalancer:
          $ref: '#/components/schemas/k8s.LoadBalancerStatus'

    k8s.LoadBalancerStatus:
      type: object
      properties:
        ingress:
          type: array
          items:
            $ref: '#/components/schemas/k8s.LoadBalancerStatusIngress'


    k8s.IngressTLS:
      type: object
      properties:
        hosts:
          type: array
          items:
            type: string

    k8s.IngressSpec:
      type: object
      properties:
        ingressClassName:
          type: string
        tls:
          type: array
          items:
            $ref: '#/components/schemas/k8s.IngressTLS'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/k8s.IngressRule'
        defaultBackend:
          $ref: '#/components/schemas/k8s.IngressRuleHttpPathBackend'


    k8s.IngressRule:
      type: object
      properties:
        host:
          type: string
        http:
          $ref: '#/components/schemas/k8s.IngressRuleHttp'

    k8s.IngressRuleHttp:
      type: object
      properties:
        paths:
          type: array
          items:
            $ref: '#/components/schemas/k8s.IngressRuleHttpPath'

    k8s.IngressRuleHttpPath:
      type: object
      properties:
        pathType:
          type: string
        path:
          type: string
        backend:
          $ref: '#/components/schemas/k8s.IngressRuleHttpPathBackend'

    k8s.IngressRuleHttpPathBackend:
      type: object
      properties:
        service:
          $ref: '#/components/schemas/k8s.IngressRuleHttpPathBackendService'

    k8s.IngressRuleHttpPathBackendService:
      type: object
      properties:
        name:
          type: string
        port:
          $ref: '#/components/schemas/k8s.IngressRuleHttpPathBackendServicePort'

    k8s.IngressRuleHttpPathBackendServicePort:
      type: object
      properties:
        number:
          type: integer



    k8s.NamespaceList:
      description: NamespaceList is a list of Namespaces.
      properties:
        apiVersion:
          type: string
        items:
          items:
            $ref: '#/components/schemas/k8s.Namespace'
          type: array
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      required:
        - items
        - kind
        - metadata
        - apiVersion
      type: object
      x-kubernetes-group-version-kind:
      - group: ''
        kind: NamespaceList
        version: v1


    k8s.Namespace:
      description: Namespace
      properties:
        apiVersion:
          type: string
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/k8s.NamespaceSpec'
        status:
          $ref: '#/components/schemas/k8s.NamespaceStatus'
      type: object
      required:
        - kind
        - metadata
        - apiVersion
        - spec
        - status
      x-kubernetes-group-version-kind:
      - group: ''
        kind: Namespace
        version: v1

    k8s.NamespaceSpec:
      properties:
        finalizers:
          type: array
          items:
            type: string
      type: object

    k8s.NamespaceStatus:
      properties:
        phase:
          type: string
      required:
      - phase
      type: object


    k8s.NodeList:
      description: NodeList is a list of Nodes.
      properties:
        apiVersion:
          type: string
        items:
          items:
            $ref: '#/components/schemas/k8s.Node'
          type: array
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      required:
        - items
        - apiVersion
        - metadata
        - kind
      type: object
      x-kubernetes-group-version-kind:
      - group: ''
        kind: NodeList
        version: v1


    k8s.Node:
      description: Node is emulated to make helm work. Kraud does not have nodes.
      properties:
        apiVersion:
          type: string
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/k8s.NodeSpec'
        status:
          $ref: '#/components/schemas/k8s.NodeStatus'
      type: object
      x-kubernetes-group-version-kind:
      - group: ''
        kind: Node
        version: v1

    k8s.NodeSpec:
      properties:
        podCIDR:
          type: string
        podCIDRs:
          type: array
          items:
            type: string
      required:
      - podCIDR
      type: object


    k8s.NodeSystemInfo:
          type: object
          properties:
            architecture:
              type: string
            bootID:
              type: string
            containerRuntimeVersion:
              type: string
            kernelVersion:
              type: string
            kubeProxyVersion:
              type: string
            kubeletVersion:
              type: string
            machineID:
              type: string
            operatingSystem:
              type: string
            osImage:
              type: string
            systemUUID:
              type: string
          required:
            - architecture
            - bootID
            - containerRuntimeVersion
            - kernelVersion
            - kubeProxyVersion
            - kubeletVersion
            - machineID
            - operatingSystem
            - osImage
            - systemUUID

    k8s.NodeStatusImage:
      type: object

    k8s.NodeStatus:
      properties:
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/k8s.NodeCondition'
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/k8s.NodeAddress'
        allocatable:
          $ref: '#/components/schemas/k8s.NodeResourceList'
        capacity:
          $ref: '#/components/schemas/k8s.NodeResourceList'
        nodeInfo:
            $ref: '#/components/schemas/k8s.NodeSystemInfo'
        images:
          type: array
          items:
            $ref: '#/components/schemas/k8s.NodeStatusImage'
        daemonEndpoints:
          type: object
          required:
            - kubeletEndpoint
          properties:
            kubeletEndpoint:
              type: object
              required:
                - Port
              properties:
                Port:
                  type: integer
      required:
      - conditions
      - addresses
      - allocatable
      - capacity
      - daemonEndpoints
      - images
      type: object

    k8s.NodeCondition:
      type: object
      properties:
        lastHeartbeatTime:
          type: string
          format: date-time
        lastTransitionTime:
          type: string
          format: date-time
        message:
          type: string
        status:
          type: string
        type:
          type: string
        reason:
          type: string
      required:
        - type
        - status
        - message
        - reason
        - lastHeartbeatTime
        - lastTransitionTime



    k8s.NodeAddress:
      type: object
      properties:
        address:
          type: string
        type:
          type: string
      required:
        - address
        - type

    k8s.NodeResourceList:
      type: object
      properties:
        cpu:
          type: string
        gp-storage:
          type: string
        red-storage:
          type: string
        ephemeral-storage:
          type: string
        pods:
          type: string
        memory:
          type: string
        hugepages-1Gi:
          type: string
        hugepages-2Mi:
          type: string
      required:
        - cpu
        - ephemeral-storage
        - pods
        - memory
        - hugepages-1Gi
        - hugepages-2Mi
        - gp-storage
        - red-storage


    k8s.PodList:
      description: PodList is a list of Pods.
      properties:
        apiVersion:
          type: string
        items:
          items:
            $ref: '#/components/schemas/k8s.Pod'
          type: array
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      required:
        - items
        - kind
        - metadata
        - apiVersion
      type: object
      x-kubernetes-group-version-kind:
      - group: ''
        kind: PodList
        version: v1


    k8s.Pod:
      description: Pod is a collection of containers that can run on a host. This resource
        is created by clients and scheduled onto hosts.
      properties:
        apiVersion:
          type: string
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/k8s.PodSpec'
        status:
          $ref: '#/components/schemas/k8s.PodStatus'
      type: object
      required:
        - apiVersion
        - kind
        - metadata
        - spec
      x-kubernetes-group-version-kind:
      - group: ''
        kind: Pod
        version: v1

    k8s.PodSpec:
      description: PodSpec is a description of a pod.
      properties:
        containers:
          items:
            $ref: '#/components/schemas/k8s.Container'
          type: array
        volumes:
          items:
            $ref: '#/components/schemas/k8s.Volume'
          type: array
      required:
      - containers
      type: object

    k8s.PodStatus:
      description: PodStatus represents information about the status of a pod. Status
        may trail the actual state of a system, especially if the node that hosts the
        pod cannot contact the control plane.
      properties:
        conditions:
          description: 'Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions'
          items:
            $ref: '#/components/schemas/k8s.PodCondition'
          type: array
        containerStatuses:
          description: 'The list has one entry per container in the manifest. More info:
            https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status'
          items:
            $ref: '#/components/schemas/k8s.ContainerStatus'
          type: array
        ephemeralContainerStatuses:
          description: Status for any ephemeral containers that have run in this pod.
            This field is beta-level and available on clusters that haven't disabled
            the EphemeralContainers feature gate.
          items:
            $ref: '#/components/schemas/k8s.ContainerStatus'
          type: array
        hostIP:
          description: IP address of the host to which the pod is assigned. Empty if
            not yet scheduled.
          type: string
        initContainerStatuses:
          description: 'The list has one entry per init container in the manifest. The
            most recent successful init container will have ready = true, the most recently
            started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status'
          items:
            $ref: '#/components/schemas/k8s.ContainerStatus'
          type: array
        message:
          description: A human readable message indicating details about why the pod
            is in this condition.
          type: string
        nominatedNodeName:
          description: nominatedNodeName is set only when this pod preempts other pods
            on the node, but it cannot be scheduled right away as preemption victims
            receive their graceful termination periods. This field does not guarantee
            that the pod will be scheduled on this node. Scheduler may decide to place
            the pod elsewhere if other nodes become available sooner. Scheduler may
            also decide to give the resources on this node to a higher priority pod
            that is created after preemption. As a result, this field may be different
            than PodSpec.nodeName when the pod is scheduled.
          type: string
        phase:
          description: 'The phase of a Pod is a simple, high-level summary of where
            the Pod is in its lifecycle. The conditions array, the reason and message
            fields, and the individual container status arrays contain more detail about
            the pod''s status. There are five possible phase values:
  
  
            Pending: The pod has been accepted by the Kubernetes system, but one or
            more of the container images has not been created. This includes time before
            being scheduled as well as time spent downloading images over the network,
            which could take a while. Running: The pod has been bound to a node, and
            all of the containers have been created. At least one container is still
            running, or is in the process of starting or restarting. Succeeded: All
            containers in the pod have terminated in success, and will not be restarted.
            Failed: All containers in the pod have terminated, and at least one container
            has terminated in failure. The container either exited with non-zero status
            or was terminated by the system. Unknown: For some reason the state of the
            pod could not be obtained, typically due to an error in communicating with
            the host of the pod.
  
  
            More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
  
  
            '
          type: string
        podIP:
          description: IP address allocated to the pod. Routable at least within the
            cluster. Empty if not yet allocated.
          type: string
        podIPs:
          description: podIPs holds the IP addresses allocated to the pod. If this field
            is specified, the 0th entry must match the podIP field. Pods may be allocated
            at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs
            have been allocated yet.
          items:
            $ref: '#/components/schemas/k8s.PodIP'
          type: array
        qosClass:
          description: 'The Quality of Service (QOS) classification assigned to the
            pod based on resource requirements See PodQOSClass type for available QOS
            classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md
  
  
            '
          type: string
        reason:
          description: A brief CamelCase message indicating details about why the pod
            is in this state. e.g. 'Evicted'
          type: string
        startTime:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
          description: RFC 3339 date and time at which the object was acknowledged by
            the Kubelet. This is before the Kubelet pulled the container image(s) for
            the pod.
      type: object

    k8s.PodIP:
      description: "IP address information for entries in the (plural) PodIPs field.\
        \ Each entry includes:\n   IP: An IP address allocated to the pod. Routable\
        \ at least within the cluster."
      properties:
        ip:
          description: ip is an IP address (IPv4 or IPv6) assigned to the pod
          type: string
      type: object


    k8s.Container:
      description: A single application container that you want to run within a pod.
      properties:
        args:
          description: 'Arguments to the entrypoint. The container image''s CMD is used
            if this is not provided. Variable references $(VAR_NAME) are expanded using
            the container''s environment. If a variable cannot be resolved, the reference
            in the input string will be unchanged. Double $$ are reduced to a single
            $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)"
            will produce the string literal "$(VAR_NAME)". Escaped references will never
            be expanded, regardless of whether the variable exists or not. Cannot be
            updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell'
          items:
            type: string
          type: array
        command:
          description: 'Entrypoint array. Not executed within a shell. The container
            image''s ENTRYPOINT is used if this is not provided. Variable references
            $(VAR_NAME) are expanded using the container''s environment. If a variable
            cannot be resolved, the reference in the input string will be unchanged.
            Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME)
            syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
            Escaped references will never be expanded, regardless of whether the variable
            exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell'
          items:
            type: string
          type: array
        env:
          description: List of environment variables to set in the container. Cannot
            be updated.
          items:
            $ref: '#/components/schemas/k8s.EnvVar'
          type: array
        #envFrom:
        #  description: List of sources to populate environment variables in the container.
        #    The keys defined within a source must be a C_IDENTIFIER. All invalid keys
        #    will be reported as an event when the container is starting. When a key
        #    exists in multiple sources, the value associated with the last source will
        #    take precedence. Values defined by an Env with a duplicate key will take
        #    precedence. Cannot be updated.
        #  items:
        #    $ref: '#/components/schemas/k8s.EnvFromSource'
        #  type: array
        image:
          description: 'Container image name. More info: https://kubernetes.io/docs/concepts/containers/images
            This field is optional to allow higher level config management to default
            or override container images in workload controllers like Deployments and
            StatefulSets.'
          type: string
        imagePullPolicy:
          description: 'Image pull policy. One of Always, Never, IfNotPresent. Defaults
            to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot
            be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
  
  
            '
          type: string
        # lifecycle:
        #   $ref: '#/components/schemas/k8s.Lifecycle'
        #   description: Actions that the management system should take in response to
        #     container lifecycle events. Cannot be updated.
        # livenessProbe:
        #   $ref: '#/components/schemas/k8s.Probe'
        #   description: 'Periodic probe of container liveness. Container will be restarted
        #     if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
        name:
          description: Name of the container specified as a DNS_LABEL. Each container
            in a pod must have a unique name (DNS_LABEL). Cannot be updated.
          type: string
        ports:
          description: List of ports to expose from the container. Exposing a port here
            gives the system additional information about the network connections a
            container uses, but is primarily informational. Not specifying a port here
            DOES NOT prevent that port from being exposed. Any port which is listening
            on the default "0.0.0.0" address inside a container will be accessible from
            the network. Cannot be updated.
          items:
            $ref: '#/components/schemas/k8s.ContainerPort'
          type: array
          x-kubernetes-list-map-keys:
          - containerPort
          - protocol
          x-kubernetes-list-type: map
        #readinessProbe:
        #  $ref: '#/components/schemas/k8s.Probe'
        #  description: 'Periodic probe of container service readiness. Container will
        #    be removed from service endpoints if the probe fails. Cannot be updated.
        #    More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
        resources:
          $ref: '#/components/schemas/k8s.ResourceRequirements'
        #  description: 'Compute Resources required by this container. Cannot be updated.
        #    More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
        #securityContext:
        #  $ref: '#/components/schemas/k8s.SecurityContext'
        #  description: 'SecurityContext defines the security options the container should
        #    be run with. If set, the fields of SecurityContext override the equivalent
        #    fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/'
        #startupProbe:
        #  $ref: '#/components/schemas/k8s.Probe'
        #  description: 'StartupProbe indicates that the Pod has successfully initialized.
        #    If specified, no other probes are executed until this completes successfully.
        #    If this probe fails, the Pod will be restarted, just as if the livenessProbe
        #    failed. This can be used to provide different probe parameters at the beginning
        #    of a Pod''s lifecycle, when it might take a long time to load data or warm
        #    a cache, than during steady-state operation. This cannot be updated. More
        #    info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes'
        stdin:
          description: Whether this container should allocate a buffer for stdin in
            the container runtime. If this is not set, reads from stdin in the container
            will always result in EOF. Default is false.
          type: boolean
        stdinOnce:
          description: Whether the container runtime should close the stdin channel
            after it has been opened by a single attach. When stdin is true the stdin
            stream will remain open across multiple attach sessions. If stdinOnce is
            set to true, stdin is opened on container start, is empty until the first
            client attaches to stdin, and then remains open and accepts data until the
            client disconnects, at which time stdin is closed and remains closed until
            the container is restarted. If this flag is false, a container processes
            that reads from stdin will never receive an EOF. Default is false
          type: boolean
        terminationMessagePath:
          description: 'Optional: Path at which the file to which the container''s termination
            message will be written is mounted into the container''s filesystem. Message
            written is intended to be brief final status, such as an assertion failure
            message. Will be truncated by the node if greater than 4096 bytes. The total
            message length across all containers will be limited to 12kb. Defaults to
            /dev/termination-log. Cannot be updated.'
          type: string
        terminationMessagePolicy:
          description: 'Indicate how the termination message should be populated. File
            will use the contents of terminationMessagePath to populate the container
            status message on both success and failure. FallbackToLogsOnError will use
            the last chunk of container log output if the termination message file is
            empty and the container exited with an error. The log output is limited
            to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot
            be updated.
  
  
            '
          type: string
        tty:
          description: Whether this container should allocate a TTY for itself, also
            requires 'stdin' to be true. Default is false.
          type: boolean
        volumeDevices:
          description: volumeDevices is the list of block devices to be used by the
            container.
          items:
            $ref: '#/components/schemas/k8s.VolumeDevice'
          type: array
        volumeMounts:
          description: Pod volumes to mount into the container's filesystem. Cannot
            be updated.
          items:
            $ref: '#/components/schemas/k8s.VolumeMount'
          type: array
        workingDir:
          description: Container's working directory. If not specified, the container
            runtime's default will be used, which might be configured in the container
            image. Cannot be updated.
          type: string
      required:
      - name
      type: object
    k8s.ContainerImage:
      description: Describe a container image
      properties:
        names:
          description: Names by which this image is known. e.g. ["k8s.gcr.io/hyperkube:v1.0.7",
            "dockerhub.io/google_containers/hyperkube:v1.0.7"]
          items:
            type: string
          type: array
        sizeBytes:
          description: The size of the image in bytes.
          format: int64
          type: integer
      type: object
    k8s.ContainerPort:
      description: ContainerPort represents a network port in a single container.
      properties:
        containerPort:
          description: Number of port to expose on the pod's IP address. This must be
            a valid port number, 0 < x < 65536.
          format: int32
          type: integer
        hostIP:
          description: What host IP to bind the external port to.
          type: string
        hostPort:
          description: Number of port to expose on the host. If specified, this must
            be a valid port number, 0 < x < 65536. If HostNetwork is specified, this
            must match ContainerPort. Most containers do not need this.
          format: int32
          type: integer
        name:
          description: If specified, this must be an IANA_SVC_NAME and unique within
            the pod. Each named port in a pod must have a unique name. Name for the
            port that can be referred to by services.
          type: string
        protocol:
          description: 'Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
  
  
            '
          type: string
      required:
      - containerPort
      type: object



    k8s.ContainerState:
      description: ContainerState holds a possible state of container. Only one of its
        members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
      properties:
        running:
          $ref: '#/components/schemas/k8s.ContainerStateRunning'
          description: Details about a running container
        terminated:
          $ref: '#/components/schemas/k8s.ContainerStateTerminated'
          description: Details about a terminated container
        waiting:
          $ref: '#/components/schemas/k8s.ContainerStateWaiting'
          description: Details about a waiting container
      type: object
    k8s.ContainerStateRunning:
      description: ContainerStateRunning is a running state of a container.
      properties:
        startedAt:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
          description: Time at which the container was last (re-)started
      type: object

    k8s.ContainerStateTerminated:
      description: ContainerStateTerminated is a terminated state of a container.
      properties:
        containerID:
          description: Container's ID in the format '<type>://<container_id>'
          type: string
        exitCode:
          description: Exit status from the last termination of the container
          format: int32
          type: integer
        finishedAt:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
          description: Time at which the container last terminated
        message:
          description: Message regarding the last termination of the container
          type: string
        reason:
          description: (brief) reason from the last termination of the container
          type: string
        signal:
          description: Signal from the last termination of the container
          format: int32
          type: integer
        startedAt:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
          description: Time at which previous execution of the container started
      required:
      - exitCode
      type: object
    k8s.ContainerStateWaiting:
      description: ContainerStateWaiting is a waiting state of a container.
      properties:
        message:
          description: Message regarding why the container is not yet running.
          type: string
        reason:
          description: (brief) reason the container is not yet running.
          type: string
      type: object
    k8s.ContainerStatus:
      description: ContainerStatus contains details for the current status of this container.
      properties:
        containerID:
          description: Container's ID in the format '<type>://<container_id>'.
          type: string
        image:
          description: 'The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images.'
          type: string
        imageID:
          description: ImageID of the container's image.
          type: string
        lastState:
          $ref: '#/components/schemas/k8s.ContainerState'
          description: Details about the container's last termination condition.
        name:
          description: This must be a DNS_LABEL. Each container in a pod must have a
            unique name. Cannot be updated.
          type: string
        ready:
          description: Specifies whether the container has passed its readiness probe.
          type: boolean
        restartCount:
          description: The number of times the container has been restarted.
          format: int32
          type: integer
        started:
          description: Specifies whether the container has passed its startup probe.
            Initialized as false, becomes true after startupProbe is considered successful.
            Resets to false when the container is restarted, or if kubelet loses state
            temporarily. Is always true when no startupProbe is defined.
          type: boolean
        state:
          $ref: '#/components/schemas/k8s.ContainerState'
          description: Details about the container's current condition.
      required:
      - name
      - ready
      - restartCount
      - image
      - imageID
      type: object



    k8s.Volume:
      description: Volume represents a named volume in a pod that may be accessed by
        any container in the pod.
      properties:
        name:
          description: 'name of the volume. Must be a DNS_LABEL and unique within the
            pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
          type: string
        #awsElasticBlockStore:
        #  $ref: '#/components/schemas/k8s.AWSElasticBlockStoreVolumeSource'
        #  description: 'awsElasticBlockStore represents an AWS Disk resource that is
        #    attached to a kubelet''s host machine and then exposed to the pod. More
        #    info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore'
        #csi:
        #  $ref: '#/components/schemas/k8s.CSIVolumeSource'
        #  description: csi (Container Storage Interface) represents ephemeral storage
        #    that is handled by certain external CSI drivers (Beta feature).
        persistentVolumeClaim:
          $ref: '#/components/schemas/k8s.PersistentVolumeClaimVolumeSource'
          description: 'persistentVolumeClaimVolumeSource represents a reference to
            a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims'
      required:
      - name
      type: object
    k8s.VolumeDevice:
      description: volumeDevice describes a mapping of a raw block device within a container.
      properties:
        devicePath:
          description: devicePath is the path inside of the container that the device
            will be mapped to.
          type: string
        name:
          description: name must match the name of a persistentVolumeClaim in the pod
          type: string
      required:
      - name
      - devicePath
      type: object


    k8s.PodCondition:
      description: PodCondition contains details for the current condition of this pod.
      properties:
        lastProbeTime:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
          description: Last time we probed the condition.
        lastTransitionTime:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
          description: Last time the condition transitioned from one status to another.
        message:
          description: Human-readable message indicating details about last transition.
          type: string
        reason:
          description: Unique, one-word, CamelCase reason for the condition's last transition.
          type: string
        status:
          description: 'Status is the status of the condition. Can be True, False, Unknown.
            More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions'
          type: string
        type:
          description: 'Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions'
          type: string
      required:
      - type
      - status
      type: object


    k8s.VolumeMount:
      description: VolumeMount describes a mounting of a Volume within a container.
      properties:
        mountPath:
          description: Path within the container at which the volume should be mounted.  Must
            not contain ':'.
          type: string
        mountPropagation:
          description: mountPropagation determines how mounts are propagated from the
            host to container and the other way around. When not set, MountPropagationNone
            is used. This field is beta in 1.10.
          type: string
        name:
          description: This must match the Name of a Volume.
          type: string
        readOnly:
          description: Mounted read-only if true, read-write otherwise (false or unspecified).
            Defaults to false.
          type: boolean
        subPath:
          description: Path within the volume from which the container's volume should
            be mounted. Defaults to "" (volume's root).
          type: string
        subPathExpr:
          description: Expanded path within the volume from which the container's volume
            should be mounted. Behaves similarly to SubPath but environment variable
            references $(VAR_NAME) are expanded using the container's environment. Defaults
            to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
          type: string
      required:
      - name
      - mountPath
      type: object


    k8s.PersistentVolumeClaimVolumeSource:
      description: PersistentVolumeClaimVolumeSource references the user's PVC in the
        same namespace. This volume finds the bound PV and mounts that volume for the
        pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another
        type of volume that is owned by someone else (the system).
      properties:
        claimName:
          description: 'claimName is the name of a PersistentVolumeClaim in the same
            namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims'
          type: string
        readOnly:
          description: readOnly Will force the ReadOnly setting in VolumeMounts. Default
            false.
          type: boolean
      required:
      - claimName
      type: object


    k8s.EnvVar:
      description: EnvVar represents an environment variable present in a Container.
      properties:
        name:
          description: Name of the environment variable. Must be a C_IDENTIFIER.
          type: string
        value:
          description: 'Variable references $(VAR_NAME) are expanded using the previously
            defined environment variables in the container and any service environment
            variables. If a variable cannot be resolved, the reference in the input
            string will be unchanged. Double $$ are reduced to a single $, which allows
            for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the
            string literal "$(VAR_NAME)". Escaped references will never be expanded,
            regardless of whether the variable exists or not. Defaults to "".'
          type: string
      required:
      - name
      type: object


    k8s.ResourceRequirements:
      properties:
        limits:
          additionalProperties:
            type: string
        requests:
          additionalProperties:
            type: string






    k8s.SecretList:
      properties:
        apiVersion:
          type: string
        items:
          items:
            $ref: '#/components/schemas/k8s.Secret'
          type: array
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      required:
      - items
      type: object
      x-kubernetes-group-version-kind:
      - group: ''
        kind: SecretList
        version: v1


    k8s.Secret:
      properties:
        apiVersion:
          type: string
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        type:
          type: string
        data:
          type: object
          additionalProperties:
            type: string
        binaryData:
          type: object
          additionalProperties:
            type: string
      type: object
      x-kubernetes-group-version-kind:
      - group: ''
        kind: Secret
        version: v1


    k8s.ServiceList:
      properties:
        apiVersion:
          type: string
        items:
          items:
            $ref: '#/components/schemas/k8s.Service'
          type: array
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      required:
      - items
      type: object
      x-kubernetes-group-version-kind:
      - group: ''
        kind: ServiceList
        version: v1


    k8s.Service:
      properties:
        apiVersion:
          type: string
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/k8s.ServiceSpec'
      required:
      - spec
      type: object
      x-kubernetes-group-version-kind:
      - group: ''
        kind: Service
        version: v1

    k8s.ServiceSpec:
      type: object
      properties:
        clusterIP:
          description: "ignored for helm compat"
          type: string
        selector:
          type: object
          additionalProperties:
            type: string
        ports:
          type: array
          items:
            $ref: '#/components/schemas/k8s.ServicePort'
        type:
          type: string
          description: "FIXME. ClusterIP, ExternalName, NodePort, LoadBalancer"
        sessionAffinity:
          type: string
          description: "FIXME, ClientIP, None"
        internalTrafficPolicy:
          description: "ignored for helm compat"



    k8s.ServicePort:
      type: object
      properties:
        protocol:
          type: string
        port:
          type: integer
        targetPort:
          $ref: "#/components/schemas/io.k8s.apimachinery.pkg.util.intstr.IntOrString"
        name:
          type: string
          description: "FIXME"
        nodePort:
          type: integer
          description: "FIXME"
        appProtocol:
          type: string
          description: "FIXME"
      required:
        - port
        - targetPort


    k8s.ServiceAccountList:
      properties:
        apiVersion:
          type: string
        items:
          items:
            $ref: '#/components/schemas/k8s.ServiceAccount'
          type: array
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      required:
      - items
      type: object
      x-kubernetes-group-version-kind:
      - group: ''
        kind: ServiceAccountList
        version: v1


    k8s.ServiceAccount:
      properties:
        apiVersion:
          type: string
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        automountServiceAccountToken:
          type: boolean
      type: object
      x-kubernetes-group-version-kind:
      - group: ''
        kind: ServiceAccount
        version: v1



    k8s.StorageClass:
      properties:
        apiVersion:
          type: string
        kind:
          type: string
        allowVolumeExpansion:
          description: AllowVolumeExpansion shows whether the storage class allow volume
            expand
          type: boolean
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        mountOptions:
          description: Dynamically provisioned PersistentVolumes of this storage class
            are created with these mountOptions, e.g. ["ro", "soft"]. Not validated
            - mount of the PVs will simply fail if one is invalid.
          items:
            type: string
          type: array
        parameters:
          additionalProperties:
            type: string
          description: Parameters holds the parameters for the provisioner that should
            create volumes of this storage class.
          type: object
        provisioner:
          description: Provisioner indicates the type of the provisioner.
          type: string
        reclaimPolicy:
          description: Dynamically provisioned PersistentVolumes of this storage class
            are created with this reclaimPolicy. Defaults to Delete.
          type: string
        volumeBindingMode:
          description: VolumeBindingMode indicates how PersistentVolumeClaims should
            be provisioned and bound.  When unset, VolumeBindingImmediate is used. This
            field is only honored by servers that enable the VolumeScheduling feature.
          type: string
      required:
      - provisioner
      type: object
      x-kubernetes-group-version-kind:
      - group: storage.k8s.io
        kind: StorageClass
        version: v1


    k8s.StorageClassList:
      description: StorageClassList is a collection of storage classes.
      properties:
        kind:
          type: string
        apiVersion:
          type: string
        items:
          items:
            $ref: '#/components/schemas/k8s.StorageClass'
          type: array
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      required:
      - items
      type: object
      x-kubernetes-group-version-kind:
      - group: storage.k8s.io
        kind: StorageClassList
        version: v1

    k8s.UserList:
      properties:
        apiVersion:
          type: string
        items:
          items:
            $ref: '#/components/schemas/k8s.User'
          type: array
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      required:
      - items
      type: object
      x-kubernetes-group-version-kind:
      - group: ''
        kind: UserList
        version: v1

    k8s.User:
      properties:
        apiVersion:
          type: string
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/k8s.UserSpec'
      type: object
      x-kubernetes-group-version-kind:
      - group: ''
        kind: CertificateSigningRequest
        version: v1

    k8s.UserSpec:
      type: object
      properties:
        displayName:
          type: string
        email:
          type: string
        idpId:
          type: string
        status:
          type: string
      required:
        - displayName
        - email


    k8s.PersistentVolumeClaimList:
      properties:
        apiVersion:
          type: string
        items:
          items:
            $ref: '#/components/schemas/k8s.PersistentVolumeClaim'
          type: array
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      required:
        - apiVersion
        - kind
        - metadata
        - items
      type: object
      x-kubernetes-group-version-kind:
      - group: ''
        kind: PersistentVolumeClaimList
        version: v1

    k8s.PersistentVolumeClaim:
      properties:
        apiVersion:
          type: string
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
        spec:
          $ref: '#/components/schemas/k8s.PersistentVolumeClaimSpec'
      type: object
      required:
        - apiVersion
        - kind
        - metadata
        - spec
      x-kubernetes-group-version-kind:
      - group: ''
        kind: PersistentVolumeClaim
        version: v1


    k8s.PersistentVolumeClaimSpecResources:
      type: object
      required:
        - requests
      properties:
        requests:
          type: object
          required:
            - storage
          properties:
            storage:
              type: string

    k8s.PersistentVolumeClaimSpec:
      type: object
      properties:
        storageClassName:
          type: string
        accessModes:
          type: array
          items:
            type: string
        resources:
          $ref: '#/components/schemas/k8s.PersistentVolumeClaimSpecResources'

    ContainerInspectResponse:
      type: "object"
      properties:
        Id:
          description: "The ID of the container"
          type: "string"
        Created:
          description: "The time the container was created"
          type: "string"
        Path:
          description: "The path to the command being run"
          type: "string"
        Args:
          description: "The arguments to the command being run"
          type: "array"
          items:
            type: "string"
        State:
          x-nullable: true
          $ref: "#/components/schemas/ContainerState"
        Image:
          description: "The container's image ID"
          type: "string"
        ResolvConfPath:
          type: "string"
        HostnamePath:
          type: "string"
        HostsPath:
          type: "string"
        LogPath:
          type: "string"
        Name:
          type: "string"
        RestartCount:
          type: "integer"
        Driver:
          type: "string"
        Platform:
          type: "string"
        MountLabel:
          type: "string"
        ProcessLabel:
          type: "string"
        AppArmorProfile:
          type: "string"
        ExecIDs:
          description: "IDs of exec instances that are running in the container."
          type: "array"
          items:
            type: "string"
          x-nullable: true
        HostConfig:
          $ref: "#/components/schemas/HostConfig"
        GraphDriver:
          $ref: "#/components/schemas/GraphDriverData"
        SizeRw:
          description: |
            The size of files that have been created or changed by this
            container.
          type: "integer"
          format: "int64"
        SizeRootFs:
          description: "The total size of all the files in this container."
          type: "integer"
          format: "int64"
        Mounts:
          type: "array"
          items:
            $ref: "#/components/schemas/MountPoint"
        Config:
          $ref: "#/components/schemas/ContainerConfig"
        NetworkSettings:
          $ref: "#/components/schemas/NetworkSettings"


    Port:
      type: "object"
      description: "An open port on a container"
      required: [PrivatePort, Type]
      properties:
        IP:
          type: "string"
          format: "ip-address"
          description: "Host IP address that the container's port is mapped to"
        PrivatePort:
          type: "integer"
          format: "uint16"
          x-nullable: false
          description: "Port on the container"
        PublicPort:
          type: "integer"
          format: "uint16"
          description: "Port exposed on the host"
        Type:
          type: "string"
          x-nullable: false
          enum: ["tcp", "udp", "sctp"]
      example:
        PrivatePort: 8080
        PublicPort: 80
        Type: "tcp"
  
    MountPoint:
      type: "object"
      description: |
        MountPoint represents a mount point configuration inside the container.
        This is used for reporting the mountpoints in use by a container.
      properties:
        Type:
          description: |
            The mount type:
  
            - `bind` a mount of a file or directory from the host into the container.
            - `volume` a docker volume with the given `Name`.
            - `tmpfs` a `tmpfs`.
            - `npipe` a named pipe from the host into the container.
          type: "string"
          enum:
            - "bind"
            - "volume"
            - "tmpfs"
            - "npipe"
          example: "volume"
        Name:
          description: |
            Name is the name reference to the underlying data defined by `Source`
            e.g., the volume name.
          type: "string"
          example: "myvolume"
        Source:
          description: |
            Source location of the mount.
  
            For volumes, this contains the storage location of the volume (within
            `/var/lib/docker/volumes/`). For bind-mounts, and `npipe`, this contains
            the source (host) part of the bind-mount. For `tmpfs` mount points, this
            field is empty.
          type: "string"
          example: "/var/lib/docker/volumes/myvolume/_data"
        Destination:
          description: |
            Destination is the path relative to the container root (`/`) where
            the `Source` is mounted inside the container.
          type: "string"
          example: "/usr/share/nginx/html/"
        Driver:
          description: |
            Driver is the volume driver used to create the volume (if it is a volume).
          type: "string"
          example: "local"
        Mode:
          description: |
            Mode is a comma separated list of options supplied by the user when
            creating the bind/volume mount.
  
            The default is platform-specific (`"z"` on Linux, empty on Windows).
          type: "string"
          example: "z"
        RW:
          description: |
            Whether the mount is mounted writable (read-write).
          type: "boolean"
          example: true
        Propagation:
          description: |
            Propagation describes how mounts are propagated from the host into the
            mount point, and vice-versa. Refer to the [Linux kernel documentation](https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt)
            for details. This field is not used on Windows.
          type: "string"
          example: ""
  
    DeviceMapping:
      type: "object"
      description: "A device mapping between the host and container"
      properties:
        PathOnHost:
          type: "string"
        PathInContainer:
          type: "string"
        CgroupPermissions:
          type: "string"
      example:
        PathOnHost: "/dev/deviceName"
        PathInContainer: "/dev/deviceName"
        CgroupPermissions: "mrw"
  
    DeviceRequest:
      type: "object"
      description: "A request for devices to be sent to device drivers"
      properties:
        Driver:
          type: "string"
          example: "nvidia"
        Count:
          type: "integer"
          example: -1
        DeviceIDs:
          type: "array"
          items:
            type: "string"
          example:
            - "0"
            - "1"
            - "GPU-fef8089b-4820-abfc-e83e-94318197576e"
        Capabilities:
          description: |
            A list of capabilities; an OR list of AND lists of capabilities.
          type: "array"
          items:
            type: "array"
            items:
              type: "string"
          example:
            # gpu AND nvidia AND compute
            - ["gpu", "nvidia", "compute"]
        Options:
          description: |
            Driver-specific options, specified as a key/value pairs. These options
            are passed directly to the driver.
          type: "object"
          additionalProperties:
            type: "string"
  
    ThrottleDevice:
      type: "object"
      properties:
        Path:
          description: "Device path"
          type: "string"
        Rate:
          description: "Rate"
          type: "integer"
          format: "int64"
          minimum: 0
  
    Mount:
      type: "object"
      properties:
        Target:
          description: "Container path."
          type: "string"
        Source:
          description: "Mount source (e.g. a volume name, a host path)."
          type: "string"
        Type:
          description: |
            The mount type. Available types:
  
            - `bind` Mounts a file or directory from the host into the container. Must exist prior to creating the container.
            - `volume` Creates a volume with the given name and options (or uses a pre-existing volume with the same name and options). These are **not** removed when the container is removed.
            - `tmpfs` Create a tmpfs with the given options. The mount source cannot be specified for tmpfs.
            - `npipe` Mounts a named pipe from the host into the container. Must exist prior to creating the container.
          type: "string"
          enum:
            - "bind"
            - "volume"
            - "tmpfs"
            - "npipe"
        ReadOnly:
          description: "Whether the mount should be read-only."
          type: "boolean"
        Consistency:
          description: "The consistency requirement for the mount: `default`, `consistent`, `cached`, or `delegated`."
          type: "string"
        BindOptions:
          description: "Optional configuration for the `bind` type."
          type: "object"
          properties:
            Propagation:
              description: "A propagation mode with the value `[r]private`, `[r]shared`, or `[r]slave`."
              type: "string"
              enum:
                - "private"
                - "rprivate"
                - "shared"
                - "rshared"
                - "slave"
                - "rslave"
            NonRecursive:
              description: "Disable recursive bind mount."
              type: "boolean"
              default: false
        VolumeOptions:
          description: "Optional configuration for the `volume` type."
          type: "object"
          properties:
            NoCopy:
              description: "Populate volume with data from the target."
              type: "boolean"
              default: false
            Labels:
              description: "User-defined key/value metadata."
              type: "object"
              additionalProperties:
                type: "string"
            DriverConfig:
              description: "Map of driver specific options"
              type: "object"
              properties:
                Name:
                  description: "Name of the driver to use to create the volume."
                  type: "string"
                Options:
                  description: "key/value map of driver specific options."
                  type: "object"
                  additionalProperties:
                    type: "string"
        TmpfsOptions:
          description: "Optional configuration for the `tmpfs` type."
          type: "object"
          properties:
            SizeBytes:
              description: "The size for the tmpfs mount in bytes."
              type: "integer"
              format: "int64"
            Mode:
              description: "The permission mode for the tmpfs mount in an integer."
              type: "integer"
  
    RestartPolicy:
      description: |
        The behavior to apply when the container exits. The default is not to
        restart.
  
        An ever increasing delay (double the previous delay, starting at 100ms) is
        added before each restart to prevent flooding the server.
      type: "object"
      properties:
        Name:
          type: "string"
          description: |
            - Empty string means not to restart
            - `no` Do not automatically restart
            - `always` Always restart
            - `unless-stopped` Restart always except when the user has manually stopped the container
            - `on-failure` Restart only when the container exit code is non-zero
          enum:
            - ""
            - "no"
            - "always"
            - "unless-stopped"
            - "on-failure"
        MaximumRetryCount:
          type: "integer"
          description: |
            If `on-failure` is used, the number of times to retry before giving up.
  
    Resources:
      description: "A container's resources (cgroups config, ulimits, etc)"
      type: "object"
      properties:
        # Applicable to all platforms
        CpuShares:
          description: |
            An integer value representing this container's relative CPU weight
            versus other containers.
          type: "integer"
        Memory:
          description: "Memory limit in bytes."
          type: "integer"
          format: "int64"
          default: 0
        # Applicable to UNIX platforms
        CgroupParent:
          description: |
            Path to `cgroups` under which the container's `cgroup` is created. If
            the path is not absolute, the path is considered to be relative to the
            `cgroups` path of the init process. Cgroups are created if they do not
            already exist.
          type: "string"
        BlkioWeight:
          description: "Block IO weight (relative weight)."
          type: "integer"
          minimum: 0
          maximum: 1000
        BlkioWeightDevice:
          description: |
            Block IO weight (relative device weight) in the form:
  
            ```
            [{"Path": "device_path", "Weight": weight}]
            ```
          type: "array"
          items:
            type: "object"
            properties:
              Path:
                type: "string"
              Weight:
                type: "integer"
                minimum: 0
        BlkioDeviceReadBps:
          description: |
            Limit read rate (bytes per second) from a device, in the form:
  
            ```
            [{"Path": "device_path", "Rate": rate}]
            ```
          type: "array"
          items:
            $ref: "#/components/schemas/ThrottleDevice"
        BlkioDeviceWriteBps:
          description: |
            Limit write rate (bytes per second) to a device, in the form:
  
            ```
            [{"Path": "device_path", "Rate": rate}]
            ```
          type: "array"
          items:
            $ref: "#/components/schemas/ThrottleDevice"
        BlkioDeviceReadIOps:
          description: |
            Limit read rate (IO per second) from a device, in the form:
  
            ```
            [{"Path": "device_path", "Rate": rate}]
            ```
          type: "array"
          items:
            $ref: "#/components/schemas/ThrottleDevice"
        BlkioDeviceWriteIOps:
          description: |
            Limit write rate (IO per second) to a device, in the form:
  
            ```
            [{"Path": "device_path", "Rate": rate}]
            ```
          type: "array"
          items:
            $ref: "#/components/schemas/ThrottleDevice"
        CpuPeriod:
          description: "The length of a CPU period in microseconds."
          type: "integer"
          format: "int64"
        CpuQuota:
          description: |
            Microseconds of CPU time that the container can get in a CPU period.
          type: "integer"
          format: "int64"
        CpuRealtimePeriod:
          description: |
            The length of a CPU real-time period in microseconds. Set to 0 to
            allocate no time allocated to real-time tasks.
          type: "integer"
          format: "int64"
        CpuRealtimeRuntime:
          description: |
            The length of a CPU real-time runtime in microseconds. Set to 0 to
            allocate no time allocated to real-time tasks.
          type: "integer"
          format: "int64"
        CpusetCpus:
          description: |
            CPUs in which to allow execution (e.g., `0-3`, `0,1`).
          type: "string"
          example: "0-3"
        CpusetMems:
          description: |
            Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only
            effective on NUMA systems.
          type: "string"
        Devices:
          description: "A list of devices to add to the container."
          type: "array"
          items:
            $ref: "#/components/schemas/DeviceMapping"
        DeviceCgroupRules:
          description: "a list of cgroup rules to apply to the container"
          type: "array"
          items:
            type: "string"
            example: "c 13:* rwm"
        DeviceRequests:
          description: |
            A list of requests for devices to be sent to device drivers.
          type: "array"
          items:
            $ref: "#/components/schemas/DeviceRequest"
        KernelMemory:
          description: |
            Kernel memory limit in bytes.
  
            <p><br /></p>
  
            > **Deprecated**: This field is deprecated as the kernel 5.4 deprecated
            > `kmem.limit_in_bytes`.
          type: "integer"
          format: "int64"
          example: 209715200
        KernelMemoryTCP:
          description: "Hard limit for kernel TCP buffer memory (in bytes)."
          type: "integer"
          format: "int64"
        MemoryReservation:
          description: "Memory soft limit in bytes."
          type: "integer"
          format: "int64"
        MemorySwap:
          description: |
            Total memory limit (memory + swap). Set as `-1` to enable unlimited
            swap.
          type: "integer"
          format: "int64"
        MemorySwappiness:
          description: |
            Tune a container's memory swappiness behavior. Accepts an integer
            between 0 and 100.
          type: "integer"
          format: "int64"
          minimum: 0
          maximum: 100
        NanoCpus:
          description: "CPU quota in units of 10<sup>-9</sup> CPUs."
          type: "integer"
          format: "int64"
        OomKillDisable:
          description: "Disable OOM Killer for the container."
          type: "boolean"
        Init:
          description: |
            Run an init inside the container that forwards signals and reaps
            processes. This field is omitted if empty, and the default (as
            configured on the daemon) is used.
          type: "boolean"
          x-nullable: true
        PidsLimit:
          description: |
            Tune a container's PIDs limit. Set `0` or `-1` for unlimited, or `null`
            to not change.
          type: "integer"
          format: "int64"
          x-nullable: true
        Ulimits:
          description: |
            A list of resource limits to set in the container. For example:
  
            ```
            {"Name": "nofile", "Soft": 1024, "Hard": 2048}
            ```
          type: "array"
          items:
            type: "object"
            properties:
              Name:
                description: "Name of ulimit"
                type: "string"
              Soft:
                description: "Soft limit"
                type: "integer"
              Hard:
                description: "Hard limit"
                type: "integer"
        # Applicable to Windows
        CpuCount:
          description: |
            The number of usable CPUs (Windows only).
  
            On Windows Server containers, the processor resource controls are
            mutually exclusive. The order of precedence is `CPUCount` first, then
            `CPUShares`, and `CPUPercent` last.
          type: "integer"
          format: "int64"
        CpuPercent:
          description: |
            The usable percentage of the available CPUs (Windows only).
  
            On Windows Server containers, the processor resource controls are
            mutually exclusive. The order of precedence is `CPUCount` first, then
            `CPUShares`, and `CPUPercent` last.
          type: "integer"
          format: "int64"
        IOMaximumIOps:
          description: "Maximum IOps for the container system drive (Windows only)"
          type: "integer"
          format: "int64"
        IOMaximumBandwidth:
          description: |
            Maximum IO in bytes per second for the container system drive
            (Windows only).
          type: "integer"
          format: "int64"
  
    Limit:
      description: |
        An object describing a limit on resources which can be requested by a task.
      type: "object"
      properties:
        NanoCPUs:
          type: "integer"
          format: "int64"
          example: 4000000000
        MemoryBytes:
          type: "integer"
          format: "int64"
          example: 8272408576
        Pids:
          description: |
            Limits the maximum number of PIDs in the container. Set `0` for unlimited.
          type: "integer"
          format: "int64"
          default: 0
          example: 100
  
    ResourceObject:
      description: |
        An object describing the resources which can be advertised by a node and
        requested by a task.
      type: "object"
      properties:
        NanoCPUs:
          type: "integer"
          format: "int64"
          example: 4000000000
        MemoryBytes:
          type: "integer"
          format: "int64"
          example: 8272408576
        GenericResources:
          $ref: "#/components/schemas/GenericResources"
  
    GenericResources:
      description: |
        User-defined resources can be either Integer resources (e.g, `SSD=3`) or
        String resources (e.g, `GPU=UUID1`).
      type: "array"
      items:
        type: "object"
        properties:
          NamedResourceSpec:
            type: "object"
            properties:
              Kind:
                type: "string"
              Value:
                type: "string"
          DiscreteResourceSpec:
            type: "object"
            properties:
              Kind:
                type: "string"
              Value:
                type: "integer"
                format: "int64"
      example:
        - DiscreteResourceSpec:
            Kind: "SSD"
            Value: 3
        - NamedResourceSpec:
            Kind: "GPU"
            Value: "UUID1"
        - NamedResourceSpec:
            Kind: "GPU"
            Value: "UUID2"
  
    HealthConfig:
      description: "A test to perform to check that the container is healthy."
      type: "object"
      properties:
        Test:
          description: |
            The test to perform. Possible values are:
  
            - `[]` inherit healthcheck from image or parent image
            - `["NONE"]` disable healthcheck
            - `["CMD", args...]` exec arguments directly
            - `["CMD-SHELL", command]` run command with system's default shell
          type: "array"
          items:
            type: "string"
        Interval:
          description: |
            The time to wait between checks in nanoseconds. It should be 0 or at
            least 1000000 (1 ms). 0 means inherit.
          type: "integer"
        Timeout:
          description: |
            The time to wait before considering the check to have hung. It should
            be 0 or at least 1000000 (1 ms). 0 means inherit.
          type: "integer"
        Retries:
          description: |
            The number of consecutive failures needed to consider a container as
            unhealthy. 0 means inherit.
          type: "integer"
        StartPeriod:
          description: |
            Start period for the container to initialize before starting
            health-retries countdown in nanoseconds. It should be 0 or at least
            1000000 (1 ms). 0 means inherit.
          type: "integer"
  
    Health:
      description: |
        Health stores information about the container's healthcheck results.
      type: "object"
      x-nullable: true
      properties:
        Status:
          description: |
            Status is one of `none`, `starting`, `healthy` or `unhealthy`
  
            - "none"      Indicates there is no healthcheck
            - "starting"  Starting indicates that the container is not yet ready
            - "healthy"   Healthy indicates that the container is running correctly
            - "unhealthy" Unhealthy indicates that the container has a problem
          type: "string"
          enum:
            - "none"
            - "starting"
            - "healthy"
            - "unhealthy"
          example: "healthy"
        FailingStreak:
          description: "FailingStreak is the number of consecutive failures"
          type: "integer"
          example: 0
        Log:
          type: "array"
          description: |
            Log contains the last few results (oldest first)
          items:
            x-nullable: true
            $ref: "#/components/schemas/HealthcheckResult"
  
    HealthcheckResult:
      description: |
        HealthcheckResult stores information about a single run of a healthcheck probe
      type: "object"
      properties:
        Start:
          description: |
            Date and time at which this check started in
            [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
          type: "string"
          format: "date-time"
          example: "2020-01-04T10:44:24.496525531Z"
        End:
          description: |
            Date and time at which this check ended in
            [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
          type: "string"
          format: "dateTime"
          example: "2020-01-04T10:45:21.364524523Z"
        ExitCode:
          description: |
            ExitCode meanings:
  
            - `0` healthy
            - `1` unhealthy
            - `2` reserved (considered unhealthy)
            - other values: error running probe
          type: "integer"
          example: 0
        Output:
          description: "Output from last check"
          type: "string"
  
    HostConfig:
      description: "Container configuration that depends on the host we are running on"
      allOf:
        - $ref: "#/components/schemas/Resources"
        - type: "object"
          properties:
            # Applicable to all platforms
            Binds:
              type: "array"
              description: |
                A list of volume bindings for this container. Each volume binding
                is a string in one of these forms:
  
                - `host-src:container-dest[:options]` to bind-mount a host path
                  into the container. Both `host-src`, and `container-dest` must
                  be an _absolute_ path.
                - `volume-name:container-dest[:options]` to bind-mount a volume
                  managed by a volume driver into the container. `container-dest`
                  must be an _absolute_ path.
  
                `options` is an optional, comma-delimited list of:
  
                - `nocopy` disables automatic copying of data from the container
                  path to the volume. The `nocopy` flag only applies to named volumes.
                - `[ro|rw]` mounts a volume read-only or read-write, respectively.
                  If omitted or set to `rw`, volumes are mounted read-write.
                - `[z|Z]` applies SELinux labels to allow or deny multiple containers
                  to read and write to the same volume.
                    - `z`: a _shared_ content label is applied to the content. This
                      label indicates that multiple containers can share the volume
                      content, for both reading and writing.
                    - `Z`: a _private unshared_ label is applied to the content.
                      This label indicates that only the current container can use
                      a private volume. Labeling systems such as SELinux require
                      proper labels to be placed on volume content that is mounted
                      into a container. Without a label, the security system can
                      prevent a container's processes from using the content. By
                      default, the labels set by the host operating system are not
                      modified.
                - `[[r]shared|[r]slave|[r]private]` specifies mount
                  [propagation behavior](https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt).
                  This only applies to bind-mounted volumes, not internal volumes
                  or named volumes. Mount propagation requires the source mount
                  point (the location where the source directory is mounted in the
                  host operating system) to have the correct propagation properties.
                  For shared volumes, the source mount point must be set to `shared`.
                  For slave volumes, the mount must be set to either `shared` or
                  `slave`.
              items:
                type: "string"
            ContainerIDFile:
              type: "string"
              description: "Path to a file where the container ID is written"
            LogConfig:
              type: "object"
              description: "The logging configuration for this container"
              properties:
                Type:
                  type: "string"
                  enum:
                    - "json-file"
                    - "syslog"
                    - "journald"
                    - "gelf"
                    - "fluentd"
                    - "awslogs"
                    - "splunk"
                    - "etwlogs"
                    - "none"
                Config:
                  type: "object"
                  additionalProperties:
                    type: "string"
            NetworkMode:
              type: "string"
              description: |
                Network mode to use for this container. Supported standard values
                are: `bridge`, `host`, `none`, and `container:<name|id>`. Any
                other value is taken as a custom network's name to which this
                container should connect to.
            PortBindings:
              $ref: "#/components/schemas/PortMap"
            RestartPolicy:
              $ref: "#/components/schemas/RestartPolicy"
            AutoRemove:
              type: "boolean"
              description: |
                Automatically remove the container when the container's process
                exits. This has no effect if `RestartPolicy` is set.
            VolumeDriver:
              type: "string"
              description: "Driver that this container uses to mount volumes."
            VolumesFrom:
              type: "array"
              description: |
                A list of volumes to inherit from another container, specified in
                the form `<container name>[:<ro|rw>]`.
              items:
                type: "string"
            Mounts:
              description: |
                Specification for mounts to be added to the container.
              type: "array"
              items:
                $ref: "#/components/schemas/Mount"
  
            # Applicable to UNIX platforms
            CapAdd:
              type: "array"
              description: |
                A list of kernel capabilities to add to the container. Conflicts
                with option 'Capabilities'.
              items:
                type: "string"
            CapDrop:
              type: "array"
              description: |
                A list of kernel capabilities to drop from the container. Conflicts
                with option 'Capabilities'.
              items:
                type: "string"
            CgroupnsMode:
              type: "string"
              enum:
                - "private"
                - "host"
              description: |
                cgroup namespace mode for the container. Possible values are:
  
                - `"private"`: the container runs in its own private cgroup namespace
                - `"host"`: use the host system's cgroup namespace
  
                If not specified, the daemon default is used, which can either be `"private"`
                or `"host"`, depending on daemon version, kernel support and configuration.
            Dns:
              type: "array"
              description: "A list of DNS servers for the container to use."
              items:
                type: "string"
            DnsOptions:
              type: "array"
              description: "A list of DNS options."
              items:
                type: "string"
            DnsSearch:
              type: "array"
              description: "A list of DNS search domains."
              items:
                type: "string"
            ExtraHosts:
              type: "array"
              description: |
                A list of hostnames/IP mappings to add to the container's `/etc/hosts`
                file. Specified in the form `["hostname:IP"]`.
              items:
                type: "string"
            GroupAdd:
              type: "array"
              description: |
                A list of additional groups that the container process will run as.
              items:
                type: "string"
            IpcMode:
              type: "string"
              description: |
                IPC sharing mode for the container. Possible values are:
  
                - `"none"`: own private IPC namespace, with /dev/shm not mounted
                - `"private"`: own private IPC namespace
                - `"shareable"`: own private IPC namespace, with a possibility to share it with other containers
                - `"container:<name|id>"`: join another (shareable) container's IPC namespace
                - `"host"`: use the host system's IPC namespace
  
                If not specified, daemon default is used, which can either be `"private"`
                or `"shareable"`, depending on daemon version and configuration.
            Cgroup:
              type: "string"
              description: "Cgroup to use for the container."
            Links:
              type: "array"
              description: |
                A list of links for the container in the form `container_name:alias`.
              items:
                type: "string"
            OomScoreAdj:
              type: "integer"
              description: |
                An integer value containing the score given to the container in
                order to tune OOM killer preferences.
              example: 500
            PidMode:
              type: "string"
              description: |
                Set the PID (Process) Namespace mode for the container. It can be
                either:
  
                - `"container:<name|id>"`: joins another container's PID namespace
                - `"host"`: use the host's PID namespace inside the container
            Privileged:
              type: "boolean"
              description: "Gives the container full access to the host."
            PublishAllPorts:
              type: "boolean"
              description: |
                Allocates an ephemeral host port for all of a container's
                exposed ports.
  
                Ports are de-allocated when the container stops and allocated when
                the container starts. The allocated port might be changed when
                restarting the container.
  
                The port is selected from the ephemeral port range that depends on
                the kernel. For example, on Linux the range is defined by
                `/proc/sys/net/ipv4/ip_local_port_range`.
            ReadonlyRootfs:
              type: "boolean"
              description: "Mount the container's root filesystem as read only."
            SecurityOpt:
              type: "array"
              description: |
                A list of string values to customize labels for MLS systems, such
                as SELinux.
              items:
                type: "string"
            StorageOpt:
              type: "object"
              description: |
                Storage driver options for this container, in the form `{"size": "120G"}`.
              additionalProperties:
                type: "string"
            Tmpfs:
              type: "object"
              description: |
                A map of container directories which should be replaced by tmpfs
                mounts, and their corresponding mount options. For example:
  
                ```
                { "/run": "rw,noexec,nosuid,size=65536k" }
                ```
              additionalProperties:
                type: "string"
            UTSMode:
              type: "string"
              description: "UTS namespace to use for the container."
            UsernsMode:
              type: "string"
              description: |
                Sets the usernamespace mode for the container when usernamespace
                remapping option is enabled.
            ShmSize:
              type: "integer"
              description: |
                Size of `/dev/shm` in bytes. If omitted, the system uses 64MB.
              minimum: 0
            Sysctls:
              type: "object"
              description: |
                A list of kernel parameters (sysctls) to set in the container.
                For example:
  
                ```
                {"net.ipv4.ip_forward": "1"}
                ```
              additionalProperties:
                type: "string"
            Runtime:
              type: "string"
              description: "Runtime to use with this container."
            # Applicable to Windows
            ConsoleSize:
              type: "array"
              description: |
                Initial console size, as an `[height, width]` array. (Windows only)
              minItems: 2
              maxItems: 2
              items:
                type: "integer"
                minimum: 0
            Isolation:
              type: "string"
              description: |
                Isolation technology of the container. (Windows only)
              enum:
                - "default"
                - "process"
                - "hyperv"
            MaskedPaths:
              type: "array"
              description: |
                The list of paths to be masked inside the container (this overrides
                the default set of paths).
              items:
                type: "string"
            ReadonlyPaths:
              type: "array"
              description: |
                The list of paths to be set as read-only inside the container
                (this overrides the default set of paths).
              items:
                type: "string"
  
    ContainerConfig:
      description: |
        Configuration for a container that is portable between hosts.
      type: "object"
      properties:
        Hostname:
          description: |
            The hostname to use for the container, as a valid RFC 1123 hostname.
          type: "string"
          example: "439f4e91bd1d"
        Domainname:
          description: |
            The domain name to use for the container.
          type: "string"
        User:
          description: "The user that commands are run as inside the container."
          type: "string"
        AttachStdin:
          description: "Whether to attach to `stdin`."
          type: "boolean"
          default: false
        AttachStdout:
          description: "Whether to attach to `stdout`."
          type: "boolean"
          default: true
        AttachStderr:
          description: "Whether to attach to `stderr`."
          type: "boolean"
          default: true
        ExposedPorts:
          description: |
            An object mapping ports to an empty object in the form:
  
            `{"<port>/<tcp|udp|sctp>": {}}`
          type: "object"
          x-nullable: true
          additionalProperties:
            type: "object"
            enum:
              - {}
            default: {}
          example: {
            "80/tcp": {},
            "443/tcp": {}
          }
        Tty:
          description: |
            Attach standard streams to a TTY, including `stdin` if it is not closed.
          type: "boolean"
          default: false
        OpenStdin:
          description: "Open `stdin`"
          type: "boolean"
          default: false
        StdinOnce:
          description: "Close `stdin` after one attached client disconnects"
          type: "boolean"
          default: false
        Env:
          description: |
            A list of environment variables to set inside the container in the
            form `["VAR=value", ...]`. A variable without `=` is removed from the
            environment, rather than to have an empty value.
          type: "array"
          items:
            type: "string"
          example:
            - "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
        Cmd:
          description: |
            Command to run specified as a string or an array of strings.
          type: "array"
          items:
            type: "string"
          example: ["/bin/sh"]
        Healthcheck:
          $ref: "#/components/schemas/HealthConfig"
        ArgsEscaped:
          description: "Command is already escaped (Windows only)"
          type: "boolean"
          default: false
          example: false
          x-nullable: true
        Image:
          description: |
            The name (or reference) of the image to use when creating the container,
            or which was used when the container was created.
          type: "string"
          example: "example-image:1.0"
        Volumes:
          description: |
            An object mapping mount point paths inside the container to empty
            objects.
          type: "object"
          additionalProperties:
            type: "object"
            enum:
              - {}
            default: {}
        WorkingDir:
          description: "The working directory for commands to run in."
          type: "string"
          example: "/public/"
        Entrypoint:
          description: |
            The entry point for the container as a string or an array of strings.
  
            If the array consists of exactly one empty string (`[""]`) then the
            entry point is reset to system default (i.e., the entry point used by
            docker when there is no `ENTRYPOINT` instruction in the `Dockerfile`).
          type: "array"
          items:
            type: "string"
          example: []
        NetworkDisabled:
          description: "Disable networking for the container."
          type: "boolean"
          x-nullable: true
        MacAddress:
          description: "MAC address of the container."
          type: "string"
          x-nullable: true
        OnBuild:
          description: |
            `ONBUILD` metadata that were defined in the image's `Dockerfile`.
          type: "array"
          x-nullable: true
          items:
            type: "string"
          example: []
        Labels:
          description: "User-defined key/value metadata."
          type: "object"
          additionalProperties:
            type: "string"
          example:
            com.example.some-label: "some-value"
            com.example.some-other-label: "some-other-value"
        StopSignal:
          description: |
            Signal to stop a container as a string or unsigned integer.
          type: "string"
          example: "SIGTERM"
          x-nullable: true
        StopTimeout:
          description: "Timeout to stop a container in seconds."
          type: "integer"
          default: 10
          x-nullable: true
        Shell:
          description: |
            Shell for when `RUN`, `CMD`, and `ENTRYPOINT` uses a shell.
          type: "array"
          x-nullable: true
          items:
            type: "string"
          example: ["/bin/sh", "-c"]
  
    NetworkingConfig:
      description: |
        NetworkingConfig represents the container's networking configuration for
        each of its interfaces.
        It is used for the networking configs specified in the `docker create`
        and `docker network connect` commands.
      type: "object"
      properties:
        EndpointsConfig:
          description: |
            A mapping of network name to endpoint configuration for that network.
          type: "object"
          additionalProperties:
            $ref: "#/components/schemas/EndpointSettings"
      example:
        # putting an example here, instead of using the example values from
        # /definitions/EndpointSettings, because containers/create currently
        # does not support attaching to multiple networks, so the example request
        # would be confusing if it showed that multiple networks can be contained
        # in the EndpointsConfig.
        # TODO remove once we support multiple networks on container create (see https://github.com/moby/moby/blob/07e6b843594e061f82baa5fa23c2ff7d536c2a05/daemon/create.go#L323)
        EndpointsConfig:
          isolated_nw:
            IPAMConfig:
              IPv4Address: "172.20.30.33"
              IPv6Address: "2001:db8:abcd::3033"
              LinkLocalIPs:
                - "169.254.34.68"
                - "fe80::3468"
            Links:
              - "container_1"
              - "container_2"
            Aliases:
              - "server_x"
              - "server_y"
  
    NetworkSettings:
      description: "NetworkSettings exposes the network settings in the API"
      type: "object"
      properties:
        Bridge:
          description: Name of the network'a bridge (for example, `docker0`).
          type: "string"
          example: "docker0"
        SandboxID:
          description: SandboxID uniquely represents a container's network stack.
          type: "string"
          example: "9d12daf2c33f5959c8bf90aa513e4f65b561738661003029ec84830cd503a0c3"
        HairpinMode:
          description: |
            Indicates if hairpin NAT should be enabled on the virtual interface.
          type: "boolean"
          example: false
        LinkLocalIPv6Address:
          description: IPv6 unicast address using the link-local prefix.
          type: "string"
          example: "fe80::42:acff:fe11:1"
        LinkLocalIPv6PrefixLen:
          description: Prefix length of the IPv6 unicast address.
          type: "integer"
          example: "64"
        Ports:
          $ref: "#/components/schemas/PortMap"
        SandboxKey:
          description: SandboxKey identifies the sandbox
          type: "string"
          example: "/var/run/docker/netns/8ab54b426c38"
  
        # TODO is SecondaryIPAddresses actually used?
        SecondaryIPAddresses:
          description: ""
          type: "array"
          items:
            $ref: "#/components/schemas/Address"
          x-nullable: true
  
        # TODO is SecondaryIPv6Addresses actually used?
        SecondaryIPv6Addresses:
          description: ""
          type: "array"
          items:
            $ref: "#/components/schemas/Address"
          x-nullable: true
  
        # TODO properties below are part of DefaultNetworkSettings, which is
        # marked as deprecated since Docker 1.9 and to be removed in Docker v17.12
        EndpointID:
          description: |
            EndpointID uniquely represents a service endpoint in a Sandbox.
  
            <p><br /></p>
  
            > **Deprecated**: This field is only propagated when attached to the
            > default "bridge" network. Use the information from the "bridge"
            > network inside the `Networks` map instead, which contains the same
            > information. This field was deprecated in Docker 1.9 and is scheduled
            > to be removed in Docker 17.12.0
          type: "string"
          example: "b88f5b905aabf2893f3cbc4ee42d1ea7980bbc0a92e2c8922b1e1795298afb0b"
        Gateway:
          description: |
            Gateway address for the default "bridge" network.
  
            <p><br /></p>
  
            > **Deprecated**: This field is only propagated when attached to the
            > default "bridge" network. Use the information from the "bridge"
            > network inside the `Networks` map instead, which contains the same
            > information. This field was deprecated in Docker 1.9 and is scheduled
            > to be removed in Docker 17.12.0
          type: "string"
          example: "172.17.0.1"
        GlobalIPv6Address:
          description: |
            Global IPv6 address for the default "bridge" network.
  
            <p><br /></p>
  
            > **Deprecated**: This field is only propagated when attached to the
            > default "bridge" network. Use the information from the "bridge"
            > network inside the `Networks` map instead, which contains the same
            > information. This field was deprecated in Docker 1.9 and is scheduled
            > to be removed in Docker 17.12.0
          type: "string"
          example: "2001:db8::5689"
        GlobalIPv6PrefixLen:
          description: |
            Mask length of the global IPv6 address.
  
            <p><br /></p>
  
            > **Deprecated**: This field is only propagated when attached to the
            > default "bridge" network. Use the information from the "bridge"
            > network inside the `Networks` map instead, which contains the same
            > information. This field was deprecated in Docker 1.9 and is scheduled
            > to be removed in Docker 17.12.0
          type: "integer"
          example: 64
        IPAddress:
          description: |
            IPv4 address for the default "bridge" network.
  
            <p><br /></p>
  
            > **Deprecated**: This field is only propagated when attached to the
            > default "bridge" network. Use the information from the "bridge"
            > network inside the `Networks` map instead, which contains the same
            > information. This field was deprecated in Docker 1.9 and is scheduled
            > to be removed in Docker 17.12.0
          type: "string"
          example: "172.17.0.4"
        IPPrefixLen:
          description: |
            Mask length of the IPv4 address.
  
            <p><br /></p>
  
            > **Deprecated**: This field is only propagated when attached to the
            > default "bridge" network. Use the information from the "bridge"
            > network inside the `Networks` map instead, which contains the same
            > information. This field was deprecated in Docker 1.9 and is scheduled
            > to be removed in Docker 17.12.0
          type: "integer"
          example: 16
        IPv6Gateway:
          description: |
            IPv6 gateway address for this network.
  
            <p><br /></p>
  
            > **Deprecated**: This field is only propagated when attached to the
            > default "bridge" network. Use the information from the "bridge"
            > network inside the `Networks` map instead, which contains the same
            > information. This field was deprecated in Docker 1.9 and is scheduled
            > to be removed in Docker 17.12.0
          type: "string"
          example: "2001:db8:2::100"
        MacAddress:
          description: |
            MAC address for the container on the default "bridge" network.
  
            <p><br /></p>
  
            > **Deprecated**: This field is only propagated when attached to the
            > default "bridge" network. Use the information from the "bridge"
            > network inside the `Networks` map instead, which contains the same
            > information. This field was deprecated in Docker 1.9 and is scheduled
            > to be removed in Docker 17.12.0
          type: "string"
          example: "02:42:ac:11:00:04"
        Networks:
          description: |
            Information about all networks that the container is connected to.
          type: "object"
          additionalProperties:
            $ref: "#/components/schemas/EndpointSettings"
  
    Address:
      description: Address represents an IPv4 or IPv6 IP address.
      type: "object"
      properties:
        Addr:
          description: IP address.
          type: "string"
        PrefixLen:
          description: Mask length of the IP address.
          type: "integer"
  
    PortMap:
      description: |
        PortMap describes the mapping of container ports to host ports, using the
        container's port-number and protocol as key in the format `<port>/<protocol>`,
        for example, `80/udp`.
  
        If a container's port is mapped for multiple protocols, separate entries
        are added to the mapping table.
      type: "object"
      additionalProperties:
        type: "array"
        x-nullable: true
        items:
          $ref: "#/components/schemas/PortBinding"
      example:
        "443/tcp":
          - HostIp: "127.0.0.1"
            HostPort: "4443"
        "80/tcp":
          - HostIp: "0.0.0.0"
            HostPort: "80"
          - HostIp: "0.0.0.0"
            HostPort: "8080"
        "80/udp":
          - HostIp: "0.0.0.0"
            HostPort: "80"
        "53/udp":
          - HostIp: "0.0.0.0"
            HostPort: "53"
        "2377/tcp": null
  
    PortBinding:
      description: |
        PortBinding represents a binding between a host IP address and a host
        port.
      type: "object"
      properties:
        HostIp:
          description: "Host IP address that the container's port is mapped to."
          type: "string"
          example: "127.0.0.1"
        HostPort:
          description: "Host port number that the container's port is mapped to."
          type: "string"
          example: "4443"
        IngressProtocol:
          type: string
  
    GraphDriverData:
      description: |
        Information about the storage driver used to store the container's and
        image's filesystem.
      type: "object"
      required: [Name, Data]
      properties:
        Name:
          description: "Name of the storage driver."
          type: "string"
          x-nullable: false
          example: "overlay2"
        Data:
          description: |
            Low-level storage metadata, provided as key/value pairs.
  
            This information is driver-specific, and depends on the storage-driver
            in use, and should be used for informational purposes only.
          type: "object"
          x-nullable: false
          additionalProperties:
            type: "string"
          example: {
            "MergedDir": "/var/lib/docker/overlay2/ef749362d13333e65fc95c572eb525abbe0052e16e086cb64bc3b98ae9aa6d74/merged",
            "UpperDir": "/var/lib/docker/overlay2/ef749362d13333e65fc95c572eb525abbe0052e16e086cb64bc3b98ae9aa6d74/diff",
            "WorkDir": "/var/lib/docker/overlay2/ef749362d13333e65fc95c572eb525abbe0052e16e086cb64bc3b98ae9aa6d74/work"
          }
  
    ImageInspect:
      description: |
        Information about an image in the local image cache.
      type: "object"
      properties:
        Id:
          description: |
            ID is the content-addressable ID of an image.
  
            This identified is a content-addressable digest calculated from the
            image's configuration (which includes the digests of layers used by
            the image).
  
            Note that this digest differs from the `RepoDigests` below, which
            holds digests of image manifests that reference the image.
          type: "string"
          x-nullable: false
          example: "sha256:ec3f0931a6e6b6855d76b2d7b0be30e81860baccd891b2e243280bf1cd8ad710"
        RepoTags:
          description: |
            List of image names/tags in the local image cache that reference this
            image.
  
            Multiple image tags can refer to the same imagem and this list may be
            empty if no tags reference the image, in which case the image is
            "untagged", in which case it can still be referenced by its ID.
          type: "array"
          items:
            type: "string"
          example:
            - "example:1.0"
            - "example:latest"
            - "example:stable"
            - "internal.registry.example.com:5000/example:1.0"
        RepoDigests:
          description: |
            List of content-addressable digests of locally available image manifests
            that the image is referenced from. Multiple manifests can refer to the
            same image.
  
            These digests are usually only available if the image was either pulled
            from a registry, or if the image was pushed to a registry, which is when
            the manifest is generated and its digest calculated.
          type: "array"
          items:
            type: "string"
          example:
            - "example@sha256:afcc7f1ac1b49db317a7196c902e61c6c3c4607d63599ee1a82d702d249a0ccb"
            - "internal.registry.example.com:5000/example@sha256:b69959407d21e8a062e0416bf13405bb2b71ed7a84dde4158ebafacfa06f5578"
        Parent:
          description: |
            ID of the parent image.
  
            Depending on how the image was created, this field may be empty and
            is only set for images that were built/created locally. This field
            is empty if the image was pulled from an image registry.
          type: "string"
          x-nullable: false
          example: ""
        Comment:
          description: |
            Optional message that was set when committing or importing the image.
          type: "string"
          x-nullable: false
          example: ""
        Created:
          description: |
            Date and time at which the image was created, formatted in
            [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
          type: "string"
          x-nullable: false
          example: "2022-02-04T21:20:12.497794809Z"
        Container:
          description: |
            The ID of the container that was used to create the image.
  
            Depending on how the image was created, this field may be empty.
          type: "string"
          x-nullable: false
          example: "65974bc86f1770ae4bff79f651ebdbce166ae9aada632ee3fa9af3a264911735"
        ContainerConfig:
          $ref: "#/components/schemas/ContainerConfig"
        DockerVersion:
          description: |
            The version of Docker that was used to build the image.
  
            Depending on how the image was created, this field may be empty.
          type: "string"
          x-nullable: false
          example: "20.10.7"
        Author:
          description: |
            Name of the author that was specified when committing the image, or as
            specified through MAINTAINER (deprecated) in the Dockerfile.
          type: "string"
          x-nullable: false
          example: ""
        Config:
          $ref: "#/components/schemas/ContainerConfig"
        Architecture:
          description: |
            Hardware CPU architecture that the image runs on.
          type: "string"
          x-nullable: false
          example: "arm"
        Variant:
          description: |
            CPU architecture variant (presently ARM-only).
          type: "string"
          x-nullable: true
          example: "v7"
        Os:
          description: |
            Operating System the image is built to run on.
          type: "string"
          x-nullable: false
          example: "linux"
        OsVersion:
          description: |
            Operating System version the image is built to run on (especially
            for Windows).
          type: "string"
          example: ""
          x-nullable: true
        Size:
          description: |
            Total size of the image including all layers it is composed of.
          type: "integer"
          format: "int64"
          x-nullable: false
          example: 1239828
        VirtualSize:
          description: |
            Total size of the image including all layers it is composed of.
  
            In versions of Docker before v1.10, this field was calculated from
            the image itself and all of its parent images. Docker v1.10 and up
            store images self-contained, and no longer use a parent-chain, making
            this field an equivalent of the Size field.
  
            This field is kept for backward compatibility, but may be removed in
            a future version of the API.
          type: "integer"
          format: "int64"
          x-nullable: false
          example: 1239828
        GraphDriver:
          $ref: "#/components/schemas/GraphDriverData"
        RootFS:
          description: |
            Information about the image's RootFS, including the layer IDs.
          type: "object"
          required: [Type]
          properties:
            Type:
              type: "string"
              x-nullable: false
              example: "layers"
            Layers:
              type: "array"
              items:
                type: "string"
              example:
                - "sha256:1834950e52ce4d5a88a1bbd131c537f4d0e56d10ff0dd69e66be3b7dfa9df7e6"
                - "sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef"
        Metadata:
          description: |
            Additional metadata of the image in the local cache. This information
            is local to the daemon, and not part of the image itself.
          type: "object"
          properties:
            LastTagTime:
              description: |
                Date and time at which the image was last tagged in
                [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
  
                This information is only available if the image was tagged locally,
                and omitted otherwise.
              type: "string"
              format: "dateTime"
              example: "2022-02-28T14:40:02.623929178Z"
              x-nullable: true
    ImageSummary:
      type: "object"
      required:
        - Id
        - ParentId
        - RepoTags
        - RepoDigests
        - Created
        - Size
        - SharedSize
        - VirtualSize
        - Labels
        - Containers
      properties:
        Id:
          type: "string"
          x-nullable: false
        ParentId:
          type: "string"
          x-nullable: false
        RepoTags:
          type: "array"
          x-nullable: false
          items:
            type: "string"
        RepoDigests:
          type: "array"
          x-nullable: false
          items:
            type: "string"
        Created:
          type: "integer"
          x-nullable: false
        Size:
          type: "integer"
          x-nullable: false
        SharedSize:
          type: "integer"
          x-nullable: false
        VirtualSize:
          type: "integer"
          x-nullable: false
        Labels:
          type: "object"
          x-nullable: false
          additionalProperties:
            type: "string"
        Containers:
          x-nullable: false
          type: "integer"
  
    AuthConfig:
      type: "object"
      properties:
        username:
          type: "string"
        password:
          type: "string"
        email:
          type: "string"
        serveraddress:
          type: "string"
      example:
        username: "hannibal"
        password: "xxxx"
        serveraddress: "https://index.docker.io/v1/"
  
    ProcessConfig:
      type: "object"
      properties:
        privileged:
          type: "boolean"
        user:
          type: "string"
        tty:
          type: "boolean"
        entrypoint:
          type: "string"
        arguments:
          type: "array"
          items:
            type: "string"
  
    Volume:
      type: "object"
      required: [Name, Driver, Mountpoint, Labels, Scope, Options]
      properties:
        Name:
          type: "string"
          description: "Name of the volume."
          x-nullable: false
          example: "tardis"
        Driver:
          type: "string"
          description: "Name of the volume driver used by the volume."
          x-nullable: false
          example: "custom"
        Mountpoint:
          type: "string"
          description: "Mount path of the volume on the host."
          x-nullable: false
          example: "/var/lib/docker/volumes/tardis"
        CreatedAt:
          type: "string"
          format: "dateTime"
          description: "Date/Time the volume was created."
          example: "2016-06-07T20:31:11.853781916Z"
        Status:
          type: "object"
          description: |
            Low-level details about the volume, provided by the volume driver.
            Details are returned as a map with key/value pairs:
            `{"key":"value","key2":"value2"}`.
  
            The `Status` field is optional, and is omitted if the volume driver
            does not support this feature.
          additionalProperties:
            type: "object"
          example:
            hello: "world"
        Labels:
          type: "object"
          description: "User-defined key/value metadata."
          x-nullable: false
          additionalProperties:
            type: "string"
          example:
            com.example.some-label: "some-value"
            com.example.some-other-label: "some-other-value"
        Scope:
          type: "string"
          description: |
            The level at which the volume exists. Either `global` for cluster-wide,
            or `local` for machine level.
          default: "local"
          x-nullable: false
          enum: ["local", "global"]
          example: "local"
        Options:
          type: "object"
          description: |
            The driver specific options used when creating the volume.
          additionalProperties:
            type: "string"
          example:
            device: "tmpfs"
            o: "size=100m,uid=1000"
            type: "tmpfs"
        UsageData:
          type: "object"
          x-nullable: true
          required: [Size, RefCount]
          description: |
            Usage details about the volume. This information is used by the
            `GET /system/df` endpoint, and omitted in other endpoints.
          properties:
            Size:
              type: "integer"
              default: -1
              description: |
                Amount of disk space used by the volume (in bytes). This information
                is only available for volumes created with the `"local"` volume
                driver. For volumes created with other volume drivers, this field
                is set to `-1` ("not available")
              x-nullable: false
            RefCount:
              type: "integer"
              default: -1
              description: |
                The number of containers referencing this volume. This field
                is set to `-1` if the reference-count is not available.
              x-nullable: false
  
    VolumeCreateOptions:
      description: "Volume configuration"
      type: "object"
      title: "VolumeConfig"
      x-go-name: "VolumeCreateBody"
      properties:
        Name:
          description: |
            The new volume's name. If not specified, Docker generates a name.
          type: "string"
          x-nullable: false
          example: "tardis"
        Driver:
          description: "Name of the volume driver to use."
          type: "string"
          default: "local"
          x-nullable: false
          example: "custom"
        DriverOpts:
          description: |
            A mapping of driver options and values. These options are
            passed directly to the driver and are driver specific.
          type: "object"
          additionalProperties:
            type: "string"
          example:
            device: "tmpfs"
            o: "size=100m,uid=1000"
            type: "tmpfs"
        Labels:
          description: "User-defined key/value metadata."
          type: "object"
          additionalProperties:
            type: "string"
          example:
            com.example.some-label: "some-value"
            com.example.some-other-label: "some-other-value"
  
    Network:
      type: "object"
      properties:
        Name:
          type: "string"
        Id:
          type: "string"
        Created:
          type: "string"
          format: "dateTime"
        Scope:
          type: "string"
        Driver:
          type: "string"
        EnableIPv6:
          type: "boolean"
        IPAM:
          $ref: "#/components/schemas/IPAM"
        Internal:
          type: "boolean"
        Attachable:
          type: "boolean"
        Ingress:
          type: "boolean"
        Containers:
          type: "object"
          additionalProperties:
            $ref: "#/components/schemas/NetworkContainer"
        Options:
          type: "object"
          additionalProperties:
            type: "string"
        Labels:
          type: "object"
          additionalProperties:
            type: "string"
      example:
        Name: "net01"
        Id: "7d86d31b1478e7cca9ebed7e73aa0fdeec46c5ca29497431d3007d2d9e15ed99"
        Created: "2016-10-19T04:33:30.360899459Z"
        Scope: "local"
        Driver: "bridge"
        EnableIPv6: false
        IPAM:
          Driver: "default"
          Config:
            - Subnet: "172.19.0.0/16"
              Gateway: "172.19.0.1"
          Options:
            foo: "bar"
        Internal: false
        Attachable: false
        Ingress: false
        Containers:
          19a4d5d687db25203351ed79d478946f861258f018fe384f229f2efa4b23513c:
            Name: "test"
            EndpointID: "628cadb8bcb92de107b2a1e516cbffe463e321f548feb37697cce00ad694f21a"
            MacAddress: "02:42:ac:13:00:02"
            IPv4Address: "172.19.0.2/16"
            IPv6Address: ""
        Options:
          com.docker.network.bridge.default_bridge: "true"
          com.docker.network.bridge.enable_icc: "true"
          com.docker.network.bridge.enable_ip_masquerade: "true"
          com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
          com.docker.network.bridge.name: "docker0"
          com.docker.network.driver.mtu: "1500"
        Labels:
          com.example.some-label: "some-value"
          com.example.some-other-label: "some-other-value"
    IPAM:
      type: "object"
      properties:
        Driver:
          description: "Name of the IPAM driver to use."
          type: "string"
          default: "default"
        Config:
          description: |
            List of IPAM configuration options, specified as a map:
  
            ```
            {"Subnet": <CIDR>, "IPRange": <CIDR>, "Gateway": <IP address>, "AuxAddress": <device_name:IP address>}
            ```
          type: "array"
          items:
            $ref: "#/components/schemas/IPAMConfig"
        Options:
          description: "Driver-specific options, specified as a map."
          type: "object"
          additionalProperties:
            type: "string"
  
    IPAMConfig:
      type: "object"
      properties:
        Subnet:
          type: "string"
        IPRange:
          type: "string"
        Gateway:
          type: "string"
        AuxiliaryAddresses:
          type: "object"
          additionalProperties:
            type: "string"
  
    NetworkContainer:
      type: "object"
      properties:
        Name:
          type: "string"
        EndpointID:
          type: "string"
        MacAddress:
          type: "string"
        IPv4Address:
          type: "string"
        IPv6Address:
          type: "string"
  
    BuildInfo:
      type: "object"
      properties:
        id:
          type: "string"
        stream:
          type: "string"
        error:
          type: "string"
        errorDetail:
          $ref: "#/components/schemas/ErrorDetail"
        status:
          type: "string"
        progress:
          type: "string"
        progressDetail:
          $ref: "#/components/schemas/ProgressDetail"
        aux:
          $ref: "#/components/schemas/ImageID"
  
    BuildCache:
      type: "object"
      properties:
        ID:
          type: "string"
        Parent:
          type: "string"
        Type:
          type: "string"
        Description:
          type: "string"
        InUse:
          type: "boolean"
        Shared:
          type: "boolean"
        Size:
          description: |
            Amount of disk space used by the build cache (in bytes).
          type: "integer"
        CreatedAt:
          description: |
            Date and time at which the build cache was created in
            [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
          type: "string"
          format: "dateTime"
          example: "2016-08-18T10:44:24.496525531Z"
        LastUsedAt:
          description: |
            Date and time at which the build cache was last used in
            [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
          type: "string"
          format: "dateTime"
          x-nullable: true
          example: "2017-08-09T07:09:37.632105588Z"
        UsageCount:
          type: "integer"
  
    ImageID:
      type: "object"
      description: "Image ID or Digest"
      properties:
        ID:
          type: "string"
      example:
        ID: "sha256:85f05633ddc1c50679be2b16a0479ab6f7637f8884e0cfe0f4d20e1ebb3d6e7c"
  
    CreateImageInfo:
      type: "object"
      properties:
        id:
          type: "string"
        error:
          type: "string"
        status:
          type: "string"
        progress:
          type: "string"
        progressDetail:
          $ref: "#/components/schemas/ProgressDetail"
  
    PushImageInfo:
      type: "object"
      properties:
        error:
          type: "string"
        status:
          type: "string"
        progress:
          type: "string"
        progressDetail:
          $ref: "#/components/schemas/ProgressDetail"
  
    ErrorDetail:
      type: "object"
      properties:
        code:
          type: "integer"
        message:
          type: "string"
  
    ProgressDetail:
      type: "object"
      properties:
        current:
          type: "integer"
        total:
          type: "integer"
  
    ErrorResponse:
      description: "Represents an error."
      type: "object"
      required: ["message"]
      properties:
        message:
          description: "The error message."
          type: "string"
          x-nullable: false
      example:
        message: "Something went wrong."
  
    IdResponse:
      description: "Response to an API call that returns just an Id"
      type: "object"
      required: ["Id"]
      properties:
        Id:
          description: "The id of the newly created object."
          type: "string"
          x-nullable: false
  
    EndpointSettings:
      description: "Configuration for a network endpoint."
      type: "object"
      properties:
        # Configurations
        IPAMConfig:
          $ref: "#/components/schemas/EndpointIPAMConfig"
        Links:
          type: "array"
          items:
            type: "string"
          example:
            - "container_1"
            - "container_2"
        Aliases:
          type: "array"
          items:
            type: "string"
          example:
            - "server_x"
            - "server_y"
  
        # Operational data
        NetworkID:
          description: |
            Unique ID of the network.
          type: "string"
          example: "08754567f1f40222263eab4102e1c733ae697e8e354aa9cd6e18d7402835292a"
        EndpointID:
          description: |
            Unique ID for the service endpoint in a Sandbox.
          type: "string"
          example: "b88f5b905aabf2893f3cbc4ee42d1ea7980bbc0a92e2c8922b1e1795298afb0b"
        Gateway:
          description: |
            Gateway address for this network.
          type: "string"
          example: "172.17.0.1"
        IPAddress:
          description: |
            IPv4 address.
          type: "string"
          example: "172.17.0.4"
        IPPrefixLen:
          description: |
            Mask length of the IPv4 address.
          type: "integer"
          example: 16
        IPv6Gateway:
          description: |
            IPv6 gateway address.
          type: "string"
          example: "2001:db8:2::100"
        GlobalIPv6Address:
          description: |
            Global IPv6 address.
          type: "string"
          example: "2001:db8::5689"
        GlobalIPv6PrefixLen:
          description: |
            Mask length of the global IPv6 address.
          type: "integer"
          format: "int64"
          example: 64
        MacAddress:
          description: |
            MAC address for the endpoint on this network.
          type: "string"
          example: "02:42:ac:11:00:04"
        DriverOpts:
          description: |
            DriverOpts is a mapping of driver options and values. These options
            are passed directly to the driver and are driver specific.
          type: "object"
          x-nullable: true
          additionalProperties:
            type: "string"
          example:
            com.example.some-label: "some-value"
            com.example.some-other-label: "some-other-value"
  
    EndpointIPAMConfig:
      description: |
        EndpointIPAMConfig represents an endpoint's IPAM configuration.
      type: "object"
      x-nullable: true
      properties:
        IPv4Address:
          type: "string"
          example: "172.20.30.33"
        IPv6Address:
          type: "string"
          example: "2001:db8:abcd::3033"
        LinkLocalIPs:
          type: "array"
          items:
            type: "string"
          example:
            - "169.254.34.68"
            - "fe80::3468"
  
    PluginMount:
      type: "object"
      x-nullable: false
      required: [Name, Description, Settable, Source, Destination, Type, Options]
      properties:
        Name:
          type: "string"
          x-nullable: false
          example: "some-mount"
        Description:
          type: "string"
          x-nullable: false
          example: "This is a mount that's used by the plugin."
        Settable:
          type: "array"
          items:
            type: "string"
        Source:
          type: "string"
          example: "/var/lib/docker/plugins/"
        Destination:
          type: "string"
          x-nullable: false
          example: "/mnt/state"
        Type:
          type: "string"
          x-nullable: false
          example: "bind"
        Options:
          type: "array"
          items:
            type: "string"
          example:
            - "rbind"
            - "rw"
  
    PluginDevice:
      type: "object"
      required: [Name, Description, Settable, Path]
      x-nullable: false
      properties:
        Name:
          type: "string"
          x-nullable: false
        Description:
          type: "string"
          x-nullable: false
        Settable:
          type: "array"
          items:
            type: "string"
        Path:
          type: "string"
          example: "/dev/fuse"
  
    PluginEnv:
      type: "object"
      x-nullable: false
      required: [Name, Description, Settable, Value]
      properties:
        Name:
          x-nullable: false
          type: "string"
        Description:
          x-nullable: false
          type: "string"
        Settable:
          type: "array"
          items:
            type: "string"
        Value:
          type: "string"
  
    PluginInterfaceType:
      type: "object"
      x-nullable: false
      required: [Prefix, Capability, Version]
      properties:
        Prefix:
          type: "string"
          x-nullable: false
        Capability:
          type: "string"
          x-nullable: false
        Version:
          type: "string"
          x-nullable: false
  
    PluginPrivilege:
      description: |
        Describes a permission the user has to accept upon installing
        the plugin.
      type: "object"
      x-go-name: "PluginPrivilege"
      properties:
        Name:
          type: "string"
          example: "network"
        Description:
          type: "string"
        Value:
          type: "array"
          items:
            type: "string"
          example:
            - "host"
  
    Plugin:
      description: "A plugin for the Engine API"
      type: "object"
      required: [Settings, Enabled, Config, Name]
      properties:
        Id:
          type: "string"
          example: "5724e2c8652da337ab2eedd19fc6fc0ec908e4bd907c7421bf6a8dfc70c4c078"
        Name:
          type: "string"
          x-nullable: false
          example: "tiborvass/sample-volume-plugin"
        Enabled:
          description:
            True if the plugin is running. False if the plugin is not running,
            only installed.
          type: "boolean"
          x-nullable: false
          example: true
        Settings:
          description: "Settings that can be modified by users."
          type: "object"
          x-nullable: false
          required: [Args, Devices, Env, Mounts]
          properties:
            Mounts:
              type: "array"
              items:
                $ref: "#/components/schemas/PluginMount"
            Env:
              type: "array"
              items:
                type: "string"
              example:
                - "DEBUG=0"
            Args:
              type: "array"
              items:
                type: "string"
            Devices:
              type: "array"
              items:
                $ref: "#/components/schemas/PluginDevice"
        PluginReference:
          description: "plugin remote reference used to push/pull the plugin"
          type: "string"
          x-nullable: false
          example: "localhost:5000/tiborvass/sample-volume-plugin:latest"
        Config:
          description: "The config of a plugin."
          type: "object"
          x-nullable: false
          required:
            - Description
            - Documentation
            - Interface
            - Entrypoint
            - WorkDir
            - Network
            - Linux
            - PidHost
            - PropagatedMount
            - IpcHost
            - Mounts
            - Env
            - Args
          properties:
            DockerVersion:
              description: "Docker Version used to create the plugin"
              type: "string"
              x-nullable: false
              example: "17.06.0-ce"
            Description:
              type: "string"
              x-nullable: false
              example: "A sample volume plugin for Docker"
            Documentation:
              type: "string"
              x-nullable: false
              example: "/engine/extend/plugins/"
            Interface:
              description: "The interface between Docker and the plugin"
              x-nullable: false
              type: "object"
              required: [Types, Socket]
              properties:
                Types:
                  type: "array"
                  items:
                    $ref: "#/components/schemas/PluginInterfaceType"
                  example:
                    - "docker.volumedriver/1.0"
                Socket:
                  type: "string"
                  x-nullable: false
                  example: "plugins.sock"
                ProtocolScheme:
                  type: "string"
                  example: "some.protocol/v1.0"
                  description: "Protocol to use for clients connecting to the plugin."
                  enum:
                    - ""
                    - "moby.plugins.http/v1"
            Entrypoint:
              type: "array"
              items:
                type: "string"
              example:
                - "/usr/bin/sample-volume-plugin"
                - "/data"
            WorkDir:
              type: "string"
              x-nullable: false
              example: "/bin/"
            User:
              type: "object"
              x-nullable: false
              properties:
                UID:
                  type: "integer"
                  format: "uint32"
                  example: 1000
                GID:
                  type: "integer"
                  format: "uint32"
                  example: 1000
            Network:
              type: "object"
              x-nullable: false
              required: [Type]
              properties:
                Type:
                  x-nullable: false
                  type: "string"
                  example: "host"
            Linux:
              type: "object"
              x-nullable: false
              required: [Capabilities, AllowAllDevices, Devices]
              properties:
                Capabilities:
                  type: "array"
                  items:
                    type: "string"
                  example:
                    - "CAP_SYS_ADMIN"
                    - "CAP_SYSLOG"
                AllowAllDevices:
                  type: "boolean"
                  x-nullable: false
                  example: false
                Devices:
                  type: "array"
                  items:
                    $ref: "#/components/schemas/PluginDevice"
            PropagatedMount:
              type: "string"
              x-nullable: false
              example: "/mnt/volumes"
            IpcHost:
              type: "boolean"
              x-nullable: false
              example: false
            PidHost:
              type: "boolean"
              x-nullable: false
              example: false
            Mounts:
              type: "array"
              items:
                $ref: "#/components/schemas/PluginMount"
            Env:
              type: "array"
              items:
                $ref: "#/components/schemas/PluginEnv"
              example:
                - Name: "DEBUG"
                  Description: "If set, prints debug messages"
                  Settable: null
                  Value: "0"
            Args:
              type: "object"
              x-nullable: false
              required: [Name, Description, Settable, Value]
              properties:
                Name:
                  x-nullable: false
                  type: "string"
                  example: "args"
                Description:
                  x-nullable: false
                  type: "string"
                  example: "command line arguments"
                Settable:
                  type: "array"
                  items:
                    type: "string"
                Value:
                  type: "array"
                  items:
                    type: "string"
            rootfs:
              type: "object"
              properties:
                type:
                  type: "string"
                  example: "layers"
                diff_ids:
                  type: "array"
                  items:
                    type: "string"
                  example:
                    - "sha256:675532206fbf3030b8458f88d6e26d4eb1577688a25efec97154c94e8b6b4887"
                    - "sha256:e216a057b1cb1efc11f8a268f37ef62083e70b1b38323ba252e25ac88904a7e8"
  
    ObjectVersion:
      description: |
        The version number of the object such as node, service, etc. This is needed
        to avoid conflicting writes. The client must send the version number along
        with the modified specification when updating these objects.
  
        This approach ensures safe concurrency and determinism in that the change
        on the object may not be applied if the version number has changed from the
        last read. In other words, if two update requests specify the same base
        version, only one of the requests can succeed. As a result, two separate
        update requests that happen at the same time will not unintentionally
        overwrite each other.
      type: "object"
      properties:
        Index:
          type: "integer"
          format: "uint64"
          example: 373531
  
    NodeSpec:
      type: "object"
      properties:
        Name:
          description: "Name for the node."
          type: "string"
          example: "my-node"
        Labels:
          description: "User-defined key/value metadata."
          type: "object"
          additionalProperties:
            type: "string"
        Role:
          description: "Role of the node."
          type: "string"
          enum:
            - "worker"
            - "manager"
          example: "manager"
        Availability:
          description: "Availability of the node."
          type: "string"
          enum:
            - "active"
            - "pause"
            - "drain"
          example: "active"
      example:
        Availability: "active"
        Name: "node-name"
        Role: "manager"
        Labels:
          foo: "bar"
  
    Node:
      type: "object"
      properties:
        ID:
          type: "string"
          example: "24ifsmvkjbyhk"
        Version:
          $ref: "#/components/schemas/ObjectVersion"
        CreatedAt:
          description: |
            Date and time at which the node was added to the swarm in
            [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
          type: "string"
          format: "dateTime"
          example: "2016-08-18T10:44:24.496525531Z"
        UpdatedAt:
          description: |
            Date and time at which the node was last updated in
            [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
          type: "string"
          format: "dateTime"
          example: "2017-08-09T07:09:37.632105588Z"
        Spec:
          $ref: "#/components/schemas/NodeSpec"
        Description:
          $ref: "#/components/schemas/NodeDescription"
        Status:
          $ref: "#/components/schemas/NodeStatus"
        ManagerStatus:
          $ref: "#/components/schemas/ManagerStatus"
  
    NodeDescription:
      description: |
        NodeDescription encapsulates the properties of the Node as reported by the
        agent.
      type: "object"
      properties:
        Hostname:
          type: "string"
          example: "bf3067039e47"
        Platform:
          $ref: "#/components/schemas/Platform"
        Resources:
          $ref: "#/components/schemas/ResourceObject"
        Engine:
          $ref: "#/components/schemas/EngineDescription"
        TLSInfo:
          $ref: "#/components/schemas/TLSInfo"
  
    Platform:
      description: |
        Platform represents the platform (Arch/OS).
      type: "object"
      properties:
        Architecture:
          description: |
            Architecture represents the hardware architecture (for example,
            `x86_64`).
          type: "string"
          example: "x86_64"
        OS:
          description: |
            OS represents the Operating System (for example, `linux` or `windows`).
          type: "string"
          example: "linux"
  
    EngineDescription:
      description: "EngineDescription provides information about an engine."
      type: "object"
      properties:
        EngineVersion:
          type: "string"
          example: "17.06.0"
        Labels:
          type: "object"
          additionalProperties:
            type: "string"
          example:
            foo: "bar"
        Plugins:
          type: "array"
          items:
            type: "object"
            properties:
              Type:
                type: "string"
              Name:
                type: "string"
          example:
            - Type: "Log"
              Name: "awslogs"
            - Type: "Log"
              Name: "fluentd"
            - Type: "Log"
              Name: "gcplogs"
            - Type: "Log"
              Name: "gelf"
            - Type: "Log"
              Name: "journald"
            - Type: "Log"
              Name: "json-file"
            - Type: "Log"
              Name: "logentries"
            - Type: "Log"
              Name: "splunk"
            - Type: "Log"
              Name: "syslog"
            - Type: "Network"
              Name: "bridge"
            - Type: "Network"
              Name: "host"
            - Type: "Network"
              Name: "ipvlan"
            - Type: "Network"
              Name: "macvlan"
            - Type: "Network"
              Name: "null"
            - Type: "Network"
              Name: "overlay"
            - Type: "Volume"
              Name: "local"
            - Type: "Volume"
              Name: "localhost:5000/vieux/sshfs:latest"
            - Type: "Volume"
              Name: "vieux/sshfs:latest"
  
    TLSInfo:
      description: |
        Information about the issuer of leaf TLS certificates and the trusted root
        CA certificate.
      type: "object"
      properties:
        TrustRoot:
          description: |
            The root CA certificate(s) that are used to validate leaf TLS
            certificates.
          type: "string"
        CertIssuerSubject:
          description:
            The base64-url-safe-encoded raw subject bytes of the issuer.
          type: "string"
        CertIssuerPublicKey:
          description: |
            The base64-url-safe-encoded raw public key bytes of the issuer.
          type: "string"
      example:
        TrustRoot: |
          -----BEGIN CERTIFICATE-----
          MIIBajCCARCgAwIBAgIUbYqrLSOSQHoxD8CwG6Bi2PJi9c8wCgYIKoZIzj0EAwIw
          EzERMA8GA1UEAxMIc3dhcm0tY2EwHhcNMTcwNDI0MjE0MzAwWhcNMzcwNDE5MjE0
          MzAwWjATMREwDwYDVQQDEwhzd2FybS1jYTBZMBMGByqGSM49AgEGCCqGSM49AwEH
          A0IABJk/VyMPYdaqDXJb/VXh5n/1Yuv7iNrxV3Qb3l06XD46seovcDWs3IZNV1lf
          3Skyr0ofcchipoiHkXBODojJydSjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMB
          Af8EBTADAQH/MB0GA1UdDgQWBBRUXxuRcnFjDfR/RIAUQab8ZV/n4jAKBggqhkjO
          PQQDAgNIADBFAiAy+JTe6Uc3KyLCMiqGl2GyWGQqQDEcO3/YG36x7om65AIhAJvz
          pxv6zFeVEkAEEkqIYi0omA9+CjanB/6Bz4n1uw8H
          -----END CERTIFICATE-----
        CertIssuerSubject: "MBMxETAPBgNVBAMTCHN3YXJtLWNh"
        CertIssuerPublicKey: "MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEmT9XIw9h1qoNclv9VeHmf/Vi6/uI2vFXdBveXTpcPjqx6i9wNazchk1XWV/dKTKvSh9xyGKmiIeRcE4OiMnJ1A=="
  
    NodeStatus:
      description: |
        NodeStatus represents the status of a node.
  
        It provides the current status of the node, as seen by the manager.
      type: "object"
      properties:
        State:
          $ref: "#/components/schemas/NodeState"
        Message:
          type: "string"
          example: ""
        Addr:
          description: "IP address of the node."
          type: "string"
          example: "172.17.0.2"
  
    NodeState:
      description: "NodeState represents the state of a node."
      type: "string"
      enum:
        - "unknown"
        - "down"
        - "ready"
        - "disconnected"
      example: "ready"
  
    ManagerStatus:
      description: |
        ManagerStatus represents the status of a manager.
  
        It provides the current status of a node's manager component, if the node
        is a manager.
      x-nullable: true
      type: "object"
      properties:
        Leader:
          type: "boolean"
          default: false
          example: true
        Reachability:
          $ref: "#/components/schemas/Reachability"
        Addr:
          description: |
            The IP address and port at which the manager is reachable.
          type: "string"
          example: "10.0.0.46:2377"
  
    Reachability:
      description: "Reachability represents the reachability of a node."
      type: "string"
      enum:
        - "unknown"
        - "unreachable"
        - "reachable"
      example: "reachable"
  
    SwarmSpec:
      description: "User modifiable swarm configuration."
      type: "object"
      properties:
        Name:
          description: "Name of the swarm."
          type: "string"
          example: "default"
        Labels:
          description: "User-defined key/value metadata."
          type: "object"
          additionalProperties:
            type: "string"
          example:
            com.example.corp.type: "production"
            com.example.corp.department: "engineering"
        Orchestration:
          description: "Orchestration configuration."
          type: "object"
          x-nullable: true
          properties:
            TaskHistoryRetentionLimit:
              description: |
                The number of historic tasks to keep per instance or node. If
                negative, never remove completed or failed tasks.
              type: "integer"
              format: "int64"
              example: 10
        Raft:
          description: "Raft configuration."
          type: "object"
          properties:
            SnapshotInterval:
              description: "The number of log entries between snapshots."
              type: "integer"
              format: "uint64"
              example: 10000
            KeepOldSnapshots:
              description: |
                The number of snapshots to keep beyond the current snapshot.
              type: "integer"
              format: "uint64"
            LogEntriesForSlowFollowers:
              description: |
                The number of log entries to keep around to sync up slow followers
                after a snapshot is created.
              type: "integer"
              format: "uint64"
              example: 500
            ElectionTick:
              description: |
                The number of ticks that a follower will wait for a message from
                the leader before becoming a candidate and starting an election.
                `ElectionTick` must be greater than `HeartbeatTick`.
  
                A tick currently defaults to one second, so these translate
                directly to seconds currently, but this is NOT guaranteed.
              type: "integer"
              example: 3
            HeartbeatTick:
              description: |
                The number of ticks between heartbeats. Every HeartbeatTick ticks,
                the leader will send a heartbeat to the followers.
  
                A tick currently defaults to one second, so these translate
                directly to seconds currently, but this is NOT guaranteed.
              type: "integer"
              example: 1
        Dispatcher:
          description: "Dispatcher configuration."
          type: "object"
          x-nullable: true
          properties:
            HeartbeatPeriod:
              description: |
                The delay for an agent to send a heartbeat to the dispatcher.
              type: "integer"
              format: "int64"
              example: 5000000000
        CAConfig:
          description: "CA configuration."
          type: "object"
          x-nullable: true
          properties:
            NodeCertExpiry:
              description: "The duration node certificates are issued for."
              type: "integer"
              format: "int64"
              example: 7776000000000000
            ExternalCAs:
              description: |
                Configuration for forwarding signing requests to an external
                certificate authority.
              type: "array"
              items:
                type: "object"
                properties:
                  Protocol:
                    description: |
                      Protocol for communication with the external CA (currently
                      only `cfssl` is supported).
                    type: "string"
                    enum:
                      - "cfssl"
                    default: "cfssl"
                  URL:
                    description: |
                      URL where certificate signing requests should be sent.
                    type: "string"
                  Options:
                    description: |
                      An object with key/value pairs that are interpreted as
                      protocol-specific options for the external CA driver.
                    type: "object"
                    additionalProperties:
                      type: "string"
                  CACert:
                    description: |
                      The root CA certificate (in PEM format) this external CA uses
                      to issue TLS certificates (assumed to be to the current swarm
                      root CA certificate if not provided).
                    type: "string"
            SigningCACert:
              description: |
                The desired signing CA certificate for all swarm node TLS leaf
                certificates, in PEM format.
              type: "string"
            SigningCAKey:
              description: |
                The desired signing CA key for all swarm node TLS leaf certificates,
                in PEM format.
              type: "string"
            ForceRotate:
              description: |
                An integer whose purpose is to force swarm to generate a new
                signing CA certificate and key, if none have been specified in
                `SigningCACert` and `SigningCAKey`
              format: "uint64"
              type: "integer"
        EncryptionConfig:
          description: "Parameters related to encryption-at-rest."
          type: "object"
          properties:
            AutoLockManagers:
              description: |
                If set, generate a key and use it to lock data stored on the
                managers.
              type: "boolean"
              example: false
        TaskDefaults:
          description: "Defaults for creating tasks in this cluster."
          type: "object"
          properties:
            LogDriver:
              description: |
                The log driver to use for tasks created in the orchestrator if
                unspecified by a service.
  
                Updating this value only affects new tasks. Existing tasks continue
                to use their previously configured log driver until recreated.
              type: "object"
              properties:
                Name:
                  description: |
                    The log driver to use as a default for new tasks.
                  type: "string"
                  example: "json-file"
                Options:
                  description: |
                    Driver-specific options for the selectd log driver, specified
                    as key/value pairs.
                  type: "object"
                  additionalProperties:
                    type: "string"
                  example:
                    "max-file": "10"
                    "max-size": "100m"
  
    # The Swarm information for `GET /info`. It is the same as `GET /swarm`, but
    # without `JoinTokens`.
    ClusterInfo:
      description: |
        ClusterInfo represents information about the swarm as is returned by the
        "/info" endpoint. Join-tokens are not included.
      x-nullable: true
      type: "object"
      properties:
        ID:
          description: "The ID of the swarm."
          type: "string"
          example: "abajmipo7b4xz5ip2nrla6b11"
        Version:
          $ref: "#/components/schemas/ObjectVersion"
        CreatedAt:
          description: |
            Date and time at which the swarm was initialised in
            [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
          type: "string"
          format: "dateTime"
          example: "2016-08-18T10:44:24.496525531Z"
        UpdatedAt:
          description: |
            Date and time at which the swarm was last updated in
            [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
          type: "string"
          format: "dateTime"
          example: "2017-08-09T07:09:37.632105588Z"
        Spec:
          $ref: "#/components/schemas/SwarmSpec"
        TLSInfo:
          $ref: "#/components/schemas/TLSInfo"
        RootRotationInProgress:
          description: |
            Whether there is currently a root CA rotation in progress for the swarm
          type: "boolean"
          example: false
        DataPathPort:
          description: |
            DataPathPort specifies the data path port number for data traffic.
            Acceptable port range is 1024 to 49151.
            If no port is set or is set to 0, the default port (4789) is used.
          type: "integer"
          format: "uint32"
          default: 4789
          example: 4789
        DefaultAddrPool:
          description: |
            Default Address Pool specifies default subnet pools for global scope
            networks.
          type: "array"
          items:
            type: "string"
            format: "CIDR"
            example: ["10.10.0.0/16", "20.20.0.0/16"]
        SubnetSize:
          description: |
            SubnetSize specifies the subnet size of the networks created from the
            default subnet pool.
          type: "integer"
          format: "uint32"
          maximum: 29
          default: 24
          example: 24
  
    JoinTokens:
      description: |
        JoinTokens contains the tokens workers and managers need to join the swarm.
      type: "object"
      properties:
        Worker:
          description: |
            The token workers can use to join the swarm.
          type: "string"
          example: "SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-1awxwuwd3z9j1z3puu7rcgdbx"
        Manager:
          description: |
            The token managers can use to join the swarm.
          type: "string"
          example: "SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-7p73s1dx5in4tatdymyhg9hu2"
  
    Swarm:
      type: "object"
      allOf:
        - $ref: "#/components/schemas/ClusterInfo"
        - type: "object"
          properties:
            JoinTokens:
              $ref: "#/components/schemas/JoinTokens"
  
    TaskSpecContainerSpecConfig:
      type: "object"
      properties:
        File:
          description: |
            File represents a specific target that is backed by a file.

            <p><br /><p>

            > **Note**: `Configs.File` and `Configs.Runtime` are mutually exclusive
          type: "object"
          properties:
            Name:
              description: |
                Name represents the final filename in the filesystem.
              type: "string"
            UID:
              description: "UID represents the file UID."
              type: "string"
            GID:
              description: "GID represents the file GID."
              type: "string"
            Mode:
              description: "Mode represents the FileMode of the file."
              type: "integer"
              format: "uint32"
        Runtime:
          description: |
            Runtime represents a target that is not mounted into the
            container but is used by the task
  
            <p><br /><p>
  
            > **Note**: `Configs.File` and `Configs.Runtime` are mutually
            > exclusive
          type: "object"
        ConfigID:
          description: |
            ConfigID represents the ID of the specific config that we're
            referencing.
          type: "string"
        ConfigName:
          description: |
            ConfigName is the name of the config that this references,
            but this is just provided for lookup/display purposes. The
            config in the reference will be identified by its ID.
          type: "string"

    TaskSpecContainerSpecSecret:
                type: "object"
                properties:
                  File:
                    description: |
                      File represents a specific target that is backed by a file.
                    type: "object"
                    properties:
                      Name:
                        description: |
                          Name represents the final filename in the filesystem.
                        type: "string"
                      UID:
                        description: "UID represents the file UID."
                        type: "string"
                      GID:
                        description: "GID represents the file GID."
                        type: "string"
                      Mode:
                        description: "Mode represents the FileMode of the file."
                        type: "integer"
                        format: "uint32"
                  SecretID:
                    description: |
                      SecretID represents the ID of the specific secret that we're
                      referencing.
                    type: "string"
                  SecretName:
                    description: |
                      SecretName is the name of the secret that this references,
                      but this is just provided for lookup/display purposes. The
                      secret in the reference will be identified by its ID.
                    type: "string"

    TaskSpecContainerSpec:
          type: "object"
          description: |
            Container spec for the service.
  
            <p><br /></p>
  
            > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are
            > mutually exclusive. PluginSpec is only used when the Runtime field
            > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime
            > field is set to `attachment`.
          properties:
            Image:
              description: "The image name to use for the container"
              type: "string"
            Labels:
              description: "User-defined key/value data."
              type: "object"
              additionalProperties:
                type: "string"
            Command:
              description: "The command to be run in the image."
              type: "array"
              items:
                type: "string"
            Args:
              description: "Arguments to the command."
              type: "array"
              items:
                type: "string"
            Hostname:
              description: |
                The hostname to use for the container, as a valid
                [RFC 1123](https://tools.ietf.org/html/rfc1123) hostname.
              type: "string"
            Env:
              description: |
                A list of environment variables in the form `VAR=value`.
              type: "array"
              items:
                type: "string"
            Dir:
              description: "The working directory for commands to run in."
              type: "string"
            User:
              description: "The user inside the container."
              type: "string"
            Groups:
              type: "array"
              description: |
                A list of additional groups that the container process will run as.
              items:
                type: "string"
            Privileges:
              type: "object"
              description: "Security options for the container"
              properties:
                CredentialSpec:
                  type: "object"
                  description: "CredentialSpec for managed service account (Windows only)"
                  properties:
                    Config:
                      type: "string"
                      example: "0bt9dmxjvjiqermk6xrop3ekq"
                      description: |
                        Load credential spec from a Swarm Config with the given ID.
                        The specified config must also be present in the Configs
                        field with the Runtime property set.
  
                        <p><br /></p>
  
  
                        > **Note**: `CredentialSpec.File`, `CredentialSpec.Registry`,
                        > and `CredentialSpec.Config` are mutually exclusive.
                    File:
                      type: "string"
                      example: "spec.json"
                      description: |
                        Load credential spec from this file. The file is read by
                        the daemon, and must be present in the `CredentialSpecs`
                        subdirectory in the docker data directory, which defaults
                        to `C:\ProgramData\Docker\` on Windows.
  
                        For example, specifying `spec.json` loads
                        `C:\ProgramData\Docker\CredentialSpecs\spec.json`.
  
                        <p><br /></p>
  
                        > **Note**: `CredentialSpec.File`, `CredentialSpec.Registry`,
                        > and `CredentialSpec.Config` are mutually exclusive.
                    Registry:
                      type: "string"
                      description: |
                        Load credential spec from this value in the Windows
                        registry. The specified registry value must be located in:
  
                        `HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Virtualization\Containers\CredentialSpecs`
  
                        <p><br /></p>
  
  
                        > **Note**: `CredentialSpec.File`, `CredentialSpec.Registry`,
                        > and `CredentialSpec.Config` are mutually exclusive.
                SELinuxContext:
                  type: "object"
                  description: "SELinux labels of the container"
                  properties:
                    Disable:
                      type: "boolean"
                      description: "Disable SELinux"
                    User:
                      type: "string"
                      description: "SELinux user label"
                    Role:
                      type: "string"
                      description: "SELinux role label"
                    Type:
                      type: "string"
                      description: "SELinux type label"
                    Level:
                      type: "string"
                      description: "SELinux level label"
            TTY:
              description: "Whether a pseudo-TTY should be allocated."
              type: "boolean"
            OpenStdin:
              description: "Open `stdin`"
              type: "boolean"
            ReadOnly:
              description: "Mount the container's root filesystem as read only."
              type: "boolean"
            Mounts:
              description: |
                Specification for mounts to be added to containers created as part
                of the service.
              type: "array"
              items:
                $ref: "#/components/schemas/Mount"
            StopSignal:
              description: "Signal to stop the container."
              type: "string"
            StopGracePeriod:
              description: |
                Amount of time to wait for the container to terminate before
                forcefully killing it.
              type: "integer"
              format: "int64"
            HealthCheck:
              $ref: "#/components/schemas/HealthConfig"
            Hosts:
              type: "array"
              description: |
                A list of hostname/IP mappings to add to the container's `hosts`
                file. The format of extra hosts is specified in the
                [hosts(5)](http://man7.org/linux/man-pages/man5/hosts.5.html)
                man page:
  
                    IP_address canonical_hostname [aliases...]
              items:
                type: "string"
            DNSConfig:
              description: |
                Specification for DNS related configurations in resolver configuration
                file (`resolv.conf`).
              type: "object"
              properties:
                Nameservers:
                  description: "The IP addresses of the name servers."
                  type: "array"
                  items:
                    type: "string"
                Search:
                  description: "A search list for host-name lookup."
                  type: "array"
                  items:
                    type: "string"
                Options:
                  description: |
                    A list of internal resolver variables to be modified (e.g.,
                    `debug`, `ndots:3`, etc.).
                  type: "array"
                  items:
                    type: "string"
            Secrets:
              description: |
                Secrets contains references to zero or more secrets that will be
                exposed to the service.
              type: "array"
              items:
                $ref: "#/components/schemas/TaskSpecContainerSpecSecret"
            Configs:
              description: |
                Configs contains references to zero or more configs that will be
                exposed to the service.
              type: "array"
              items:
                $ref: "#/components/schemas/TaskSpecContainerSpecConfig"
            Isolation:
              type: "string"
              description: |
                Isolation technology of the containers running the service.
                (Windows only)
              enum:
                - "default"
                - "process"
                - "hyperv"
            Init:
              description: |
                Run an init inside the container that forwards signals and reaps
                processes. This field is omitted if empty, and the default (as
                configured on the daemon) is used.
              type: "boolean"
              x-nullable: true
            Sysctls:
              description: |
                Set kernel namedspaced parameters (sysctls) in the container.
                The Sysctls option on services accepts the same sysctls as the
                are supported on containers. Note that while the same sysctls are
                supported, no guarantees or checks are made about their
                suitability for a clustered environment, and it's up to the user
                to determine whether a given sysctl will work properly in a
                Service.
              type: "object"
              additionalProperties:
                type: "string"
            # This option is not used by Windows containers
            CapabilityAdd:
              type: "array"
              description: |
                A list of kernel capabilities to add to the default set
                for the container.
              items:
                type: "string"
              example:
                - "CAP_NET_RAW"
                - "CAP_SYS_ADMIN"
                - "CAP_SYS_CHROOT"
                - "CAP_SYSLOG"
            CapabilityDrop:
              type: "array"
              description: |
                A list of kernel capabilities to drop from the default set
                for the container.
              items:
                type: "string"
              example:
                - "CAP_NET_RAW"
            Ulimits:
              description: |
                A list of resource limits to set in the container. For example: `{"Name": "nofile", "Soft": 1024, "Hard": 2048}`"
              type: "array"
              items:
                type: "object"
                properties:
                  Name:
                    description: "Name of ulimit"
                    type: "string"
                  Soft:
                    description: "Soft limit"
                    type: "integer"
                  Hard:
                    description: "Hard limit"
                    type: "integer"
    TaskSpec:
      description: "User modifiable task configuration."
      type: "object"
      properties:
        PluginSpec:
          type: "object"
          description: |
            Plugin spec for the service.  *(Experimental release only.)*
  
            <p><br /></p>
  
            > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are
            > mutually exclusive. PluginSpec is only used when the Runtime field
            > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime
            > field is set to `attachment`.
          properties:
            Name:
              description: "The name or 'alias' to use for the plugin."
              type: "string"
            Remote:
              description: "The plugin image reference to use."
              type: "string"
            Disabled:
              description: "Disable the plugin once scheduled."
              type: "boolean"
            PluginPrivilege:
              type: "array"
              items:
                $ref: "#/components/schemas/PluginPrivilege"
        ContainerSpec:
          $ref: "#/components/schemas/TaskSpecContainerSpec"
        NetworkAttachmentSpec:
          description: |
            Read-only spec type for non-swarm containers attached to swarm overlay
            networks.
  
            <p><br /></p>
  
            > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are
            > mutually exclusive. PluginSpec is only used when the Runtime field
            > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime
            > field is set to `attachment`.
          type: "object"
          properties:
            ContainerID:
              description: "ID of the container represented by this task"
              type: "string"
        Resources:
          description: |
            Resource requirements which apply to each individual container created
            as part of the service.
          type: "object"
          properties:
            Limits:
              description: "Define resources limits."
              $ref: "#/components/schemas/Limit"
            Reservations:
              description: "Define resources reservation."
              $ref: "#/components/schemas/ResourceObject"
        RestartPolicy:
          description: |
            Specification for the restart policy which applies to containers
            created as part of this service.
          type: "object"
          properties:
            Condition:
              description: "Condition for restart."
              type: "string"
              enum:
                - "none"
                - "on-failure"
                - "any"
            Delay:
              description: "Delay between restart attempts."
              type: "integer"
              format: "int64"
            MaxAttempts:
              description: |
                Maximum attempts to restart a given container before giving up
                (default value is 0, which is ignored).
              type: "integer"
              format: "int64"
              default: 0
            Window:
              description: |
                Windows is the time window used to evaluate the restart policy
                (default value is 0, which is unbounded).
              type: "integer"
              format: "int64"
              default: 0
        Placement:
          type: "object"
          properties:
            Constraints:
              description: |
                An array of constraint expressions to limit the set of nodes where
                a task can be scheduled. Constraint expressions can either use a
                _match_ (`==`) or _exclude_ (`!=`) rule. Multiple constraints find
                nodes that satisfy every expression (AND match). Constraints can
                match node or Docker Engine labels as follows:
  
                node attribute       | matches                        | example
                ---------------------|--------------------------------|-----------------------------------------------
                `node.id`            | Node ID                        | `node.id==2ivku8v2gvtg4`
                `node.hostname`      | Node hostname                  | `node.hostname!=node-2`
                `node.role`          | Node role (`manager`/`worker`) | `node.role==manager`
                `node.platform.os`   | Node operating system          | `node.platform.os==windows`
                `node.platform.arch` | Node architecture              | `node.platform.arch==x86_64`
                `node.labels`        | User-defined node labels       | `node.labels.security==high`
                `engine.labels`      | Docker Engine's labels         | `engine.labels.operatingsystem==ubuntu-14.04`
  
                `engine.labels` apply to Docker Engine labels like operating system,
                drivers, etc. Swarm administrators add `node.labels` for operational
                purposes by using the [`node update endpoint`](#operation/NodeUpdate).
  
              type: "array"
              items:
                type: "string"
              example:
                - "node.hostname!=node3.corp.example.com"
                - "node.role!=manager"
                - "node.labels.type==production"
                - "node.platform.os==linux"
                - "node.platform.arch==x86_64"
            Preferences:
              description: |
                Preferences provide a way to make the scheduler aware of factors
                such as topology. They are provided in order from highest to
                lowest precedence.
              type: "array"
              items:
                type: "object"
                properties:
                  Spread:
                    type: "object"
                    properties:
                      SpreadDescriptor:
                        description: |
                          label descriptor, such as `engine.labels.az`.
                        type: "string"
              example:
                - Spread:
                    SpreadDescriptor: "node.labels.datacenter"
                - Spread:
                    SpreadDescriptor: "node.labels.rack"
            MaxReplicas:
              description: |
                Maximum number of replicas for per node (default value is 0, which
                is unlimited)
              type: "integer"
              format: "int64"
              default: 0
            Platforms:
              description: |
                Platforms stores all the platforms that the service's image can
                run on. This field is used in the platform filter for scheduling.
                If empty, then the platform filter is off, meaning there are no
                scheduling restrictions.
              type: "array"
              items:
                $ref: "#/components/schemas/Platform"
        ForceUpdate:
          description: |
            A counter that triggers an update even if no relevant parameters have
            been changed.
          type: "integer"
        Runtime:
          description: |
            Runtime is the type of runtime specified for the task executor.
          type: "string"
        Networks:
          description: "Specifies which networks the service should attach to."
          type: "array"
          items:
            $ref: "#/components/schemas/NetworkAttachmentConfig"
        LogDriver:
          description: |
            Specifies the log driver to use for tasks created from this spec. If
            not present, the default one for the swarm will be used, finally
            falling back to the engine default if not specified.
          type: "object"
          properties:
            Name:
              type: "string"
            Options:
              type: "object"
              additionalProperties:
                type: "string"
  
    TaskState:
      type: "string"
      enum:
        - "new"
        - "allocated"
        - "pending"
        - "assigned"
        - "accepted"
        - "preparing"
        - "ready"
        - "starting"
        - "running"
        - "complete"
        - "shutdown"
        - "failed"
        - "rejected"
        - "remove"
        - "orphaned"
  
    Task:
      type: "object"
      properties:
        ID:
          description: "The ID of the task."
          type: "string"
        Version:
          $ref: "#/components/schemas/ObjectVersion"
        CreatedAt:
          type: "string"
          format: "dateTime"
        UpdatedAt:
          type: "string"
          format: "dateTime"
        Name:
          description: "Name of the task."
          type: "string"
        Labels:
          description: "User-defined key/value metadata."
          type: "object"
          additionalProperties:
            type: "string"
        Spec:
          $ref: "#/components/schemas/TaskSpec"
        ServiceID:
          description: "The ID of the service this task is part of."
          type: "string"
        Slot:
          type: "integer"
        NodeID:
          description: "The ID of the node that this task is on."
          type: "string"
        AssignedGenericResources:
          $ref: "#/components/schemas/GenericResources"
        Status:
          type: "object"
          properties:
            Timestamp:
              type: "string"
              format: "dateTime"
            State:
              $ref: "#/components/schemas/TaskState"
            Message:
              type: "string"
            Err:
              type: "string"
            ContainerStatus:
              type: "object"
              properties:
                ContainerID:
                  type: "string"
                PID:
                  type: "integer"
                ExitCode:
                  type: "integer"
        DesiredState:
          $ref: "#/components/schemas/TaskState"
        JobIteration:
          description: |
            If the Service this Task belongs to is a job-mode service, contains
            the JobIteration of the Service this Task was created for. Absent if
            the Task was created for a Replicated or Global Service.
          $ref: "#/components/schemas/ObjectVersion"
      example:
        ID: "0kzzo1i0y4jz6027t0k7aezc7"
        Version:
          Index: 71
        CreatedAt: "2016-06-07T21:07:31.171892745Z"
        UpdatedAt: "2016-06-07T21:07:31.376370513Z"
        Spec:
          ContainerSpec:
            Image: "redis"
          Resources:
            Limits: {}
            Reservations: {}
          RestartPolicy:
            Condition: "any"
            MaxAttempts: 0
          Placement: {}
        ServiceID: "9mnpnzenvg8p8tdbtq4wvbkcz"
        Slot: 1
        NodeID: "60gvrl6tm78dmak4yl7srz94v"
        Status:
          Timestamp: "2016-06-07T21:07:31.290032978Z"
          State: "running"
          Message: "started"
          ContainerStatus:
            ContainerID: "e5d62702a1b48d01c3e02ca1e0212a250801fa8d67caca0b6f35919ebc12f035"
            PID: 677
        DesiredState: "running"
        NetworksAttachments:
          - Network:
              ID: "4qvuz4ko70xaltuqbt8956gd1"
              Version:
                Index: 18
              CreatedAt: "2016-06-07T20:31:11.912919752Z"
              UpdatedAt: "2016-06-07T21:07:29.955277358Z"
              Spec:
                Name: "ingress"
                Labels:
                  com.docker.swarm.internal: "true"
                DriverConfiguration: {}
                IPAMOptions:
                  Driver: {}
                  Configs:
                    - Subnet: "10.255.0.0/16"
                      Gateway: "10.255.0.1"
              DriverState:
                Name: "overlay"
                Options:
                  com.docker.network.driver.overlay.vxlanid_list: "256"
              IPAMOptions:
                Driver:
                  Name: "default"
                Configs:
                  - Subnet: "10.255.0.0/16"
                    Gateway: "10.255.0.1"
            Addresses:
              - "10.255.0.10/16"
        AssignedGenericResources:
          - DiscreteResourceSpec:
              Kind: "SSD"
              Value: 3
          - NamedResourceSpec:
              Kind: "GPU"
              Value: "UUID1"
          - NamedResourceSpec:
              Kind: "GPU"
              Value: "UUID2"
  
    ServiceSpecMode:
      description: "Scheduling mode for the service."
      type: "object"
      properties:
        Replicated:
          $ref: "#/components/schemas/ServiceSpecModeReplicated"

    ServiceSpecModeReplicated:
      type: "object"
      properties:
        Replicas:
          type: "integer"
          format: "int64"
          Global:
            type: "object"
            ReplicatedJob:
              description: |
                The mode used for services with a finite number of tasks that run
                to a completed state.
              type: "object"
              properties:
                MaxConcurrent:
                  description: |
                    The maximum number of replicas to run simultaneously.
                  type: "integer"
                  format: "int64"
                  default: 1
                TotalCompletions:
                  description: |
                    The total number of replicas desired to reach the Completed
                    state. If unset, will default to the value of `MaxConcurrent`
                  type: "integer"
                  format: "int64"
            GlobalJob:
              description: |
                The mode used for services which run a task to the completed state
                on each valid node.
              type: "object"

    ServiceSpec:
      description: "User modifiable configuration for a service."
      type: object
      properties:
        Name:
          description: "Name of the service."
          type: "string"
        Labels:
          description: "User-defined key/value metadata."
          type: "object"
          additionalProperties:
            type: "string"
        TaskTemplate:
          $ref: "#/components/schemas/TaskSpec"
        Mode:
          $ref: "#/components/schemas/ServiceSpecMode"
        UpdateConfig:
          description: "Specification for the update strategy of the service."
          type: "object"
          properties:
            Parallelism:
              description: |
                Maximum number of tasks to be updated in one iteration (0 means
                unlimited parallelism).
              type: "integer"
              format: "int64"
            Delay:
              description: "Amount of time between updates, in nanoseconds."
              type: "integer"
              format: "int64"
            FailureAction:
              description: |
                Action to take if an updated task fails to run, or stops running
                during the update.
              type: "string"
              enum:
                - "continue"
                - "pause"
                - "rollback"
            Monitor:
              description: |
                Amount of time to monitor each updated task for failures, in
                nanoseconds.
              type: "integer"
              format: "int64"
            MaxFailureRatio:
              description: |
                The fraction of tasks that may fail during an update before the
                failure action is invoked, specified as a floating point number
                between 0 and 1.
              type: "number"
              default: 0
            Order:
              description: |
                The order of operations when rolling out an updated task. Either
                the old task is shut down before the new task is started, or the
                new task is started before the old task is shut down.
              type: "string"
              enum:
                - "stop-first"
                - "start-first"
        RollbackConfig:
          description: "Specification for the rollback strategy of the service."
          type: "object"
          properties:
            Parallelism:
              description: |
                Maximum number of tasks to be rolled back in one iteration (0 means
                unlimited parallelism).
              type: "integer"
              format: "int64"
            Delay:
              description: |
                Amount of time between rollback iterations, in nanoseconds.
              type: "integer"
              format: "int64"
            FailureAction:
              description: |
                Action to take if an rolled back task fails to run, or stops
                running during the rollback.
              type: "string"
              enum:
                - "continue"
                - "pause"
            Monitor:
              description: |
                Amount of time to monitor each rolled back task for failures, in
                nanoseconds.
              type: "integer"
              format: "int64"
            MaxFailureRatio:
              description: |
                The fraction of tasks that may fail during a rollback before the
                failure action is invoked, specified as a floating point number
                between 0 and 1.
              type: "number"
              default: 0
            Order:
              description: |
                The order of operations when rolling back a task. Either the old
                task is shut down before the new task is started, or the new task
                is started before the old task is shut down.
              type: "string"
              enum:
                - "stop-first"
                - "start-first"
        Networks:
          description: "Specifies which networks the service should attach to."
          type: "array"
          items:
            $ref: "#/components/schemas/NetworkAttachmentConfig"
  
        EndpointSpec:
          $ref: "#/components/schemas/EndpointSpec"
  
    EndpointPortConfig:
      type: "object"
      properties:
        Name:
          type: "string"
        Protocol:
          type: "string"
          enum:
            - "tcp"
            - "udp"
            - "sctp"
        TargetPort:
          description: "The port inside the container."
          type: "integer"
        PublishedPort:
          description: "The port on the swarm hosts."
          type: "integer"
        PublishMode:
          description: |
            The mode in which port is published.
  
            <p><br /></p>
  
            - "ingress" makes the target port accessible on every node,
              regardless of whether there is a task for the service running on
              that node or not.
            - "host" bypasses the routing mesh and publish the port directly on
              the swarm node where that service is running.
  
          type: "string"
          enum:
            - "ingress"
            - "host"
          default: "ingress"
          example: "ingress"
  
    EndpointSpec:
      description: "Properties that can be configured to access and load balance a service."
      type: "object"
      properties:
        Mode:
          description: |
            The mode of resolution to use for internal load balancing between tasks.
          type: "string"
          enum:
            - "vip"
            - "dnsrr"
          default: "vip"
        Ports:
          description: |
            List of exposed ports that this service is accessible on from the
            outside. Ports can only be provided if `vip` resolution mode is used.
          type: "array"
          items:
            $ref: "#/components/schemas/EndpointPortConfig"
  

    ServiceEndpoint:
          type: "object"
          properties:
            Spec:
              $ref: "#/components/schemas/EndpointSpec"
            Ports:
              type: "array"
              items:
                $ref: "#/components/schemas/EndpointPortConfig"
            VirtualIPs:
              type: "array"
              items:
                type: "object"
                properties:
                  NetworkID:
                    type: "string"
                  Addr:
                    type: "string"

    ServiceUpdateStatus:
          description: "The status of a service update."
          type: "object"
          properties:
            State:
              type: "string"
              enum:
                - "updating"
                - "paused"
                - "completed"
            StartedAt:
              type: "string"
              format: "dateTime"
            CompletedAt:
              type: "string"
              format: "dateTime"
            Message:
              type: "string"

    ServiceStatus:
          description: |
            The status of the service's tasks. Provided only when requested as
            part of a ServiceList operation.
          type: "object"
          properties:
            RunningTasks:
              description: |
                The number of tasks for the service currently in the Running state.
              type: "integer"
              format: "uint64"
              example: 7
            DesiredTasks:
              description: |
                The number of tasks for the service desired to be running.
                For replicated services, this is the replica count from the
                service spec. For global services, this is computed by taking
                count of all tasks for the service with a Desired State other
                than Shutdown.
              type: "integer"
              format: "uint64"
              example: 10
            CompletedTasks:
              description: |
                The number of tasks for a job that are in the Completed state.
                This field must be cross-referenced with the service type, as the
                value of 0 may mean the service is not in a job mode, or it may
                mean the job-mode service has no tasks yet Completed.
              type: "integer"
              format: "uint64"

    ServiceJobStatus:
          description: |
            The status of the service when it is in one of ReplicatedJob or
            GlobalJob modes. Absent on Replicated and Global mode services. The
            JobIteration is an ObjectVersion, but unlike the Service's version,
            does not need to be sent with an update request.
          type: "object"
          properties:
            JobIteration:
              description: |
                JobIteration is a value increased each time a Job is executed,
                successfully or otherwise. "Executed", in this case, means the
                job as a whole has been started, not that an individual Task has
                been launched. A job is "Executed" when its ServiceSpec is
                updated. JobIteration can be used to disambiguate Tasks belonging
                to different executions of a job.  Though JobIteration will
                increase with each subsequent execution, it may not necessarily
                increase by 1, and so JobIteration should not be used to
              $ref: "#/components/schemas/ObjectVersion"
            LastExecution:
              description: |
                The last time, as observed by the server, that this job was
                started.
              type: "string"
              format: "dateTime"

    Service:
      type: "object"
      properties:
        ID:
          type: "string"
        Version:
          $ref: "#/components/schemas/ObjectVersion"
        CreatedAt:
          type: "string"
          format: "dateTime"
        UpdatedAt:
          type: "string"
          format: "dateTime"
        Spec:
          $ref: "#/components/schemas/ServiceSpec"
        Endpoint:
          $ref: "#/components/schemas/ServiceEndpoint"
        UpdateStatus:
          $ref: "#/components/schemas/ServiceUpdateStatus"
        ServiceStatus:
          $ref: "#/components/schemas/ServiceStatus"
        JobStatus:
          $ref: "#/components/schemas/ServiceJobStatus"
      example:
        ID: "9mnpnzenvg8p8tdbtq4wvbkcz"
        Version:
          Index: 19
        CreatedAt: "2016-06-07T21:05:51.880065305Z"
        UpdatedAt: "2016-06-07T21:07:29.962229872Z"
        Spec:
          Name: "hopeful_cori"
          TaskTemplate:
            ContainerSpec:
              Image: "redis"
            Resources:
              Limits: {}
              Reservations: {}
            RestartPolicy:
              Condition: "any"
              MaxAttempts: 0
            Placement: {}
            ForceUpdate: 0
          Mode:
            Replicated:
              Replicas: 1
          UpdateConfig:
            Parallelism: 1
            Delay: 1000000000
            FailureAction: "pause"
            Monitor: 15000000000
            MaxFailureRatio: 0.15
          RollbackConfig:
            Parallelism: 1
            Delay: 1000000000
            FailureAction: "pause"
            Monitor: 15000000000
            MaxFailureRatio: 0.15
          EndpointSpec:
            Mode: "vip"
            Ports:
              -
                Protocol: "tcp"
                TargetPort: 6379
                PublishedPort: 30001
        Endpoint:
          Spec:
            Mode: "vip"
            Ports:
              -
                Protocol: "tcp"
                TargetPort: 6379
                PublishedPort: 30001
          Ports:
            -
              Protocol: "tcp"
              TargetPort: 6379
              PublishedPort: 30001
          VirtualIPs:
            -
              NetworkID: "4qvuz4ko70xaltuqbt8956gd1"
              Addr: "10.255.0.2/16"
            -
              NetworkID: "4qvuz4ko70xaltuqbt8956gd1"
              Addr: "10.255.0.3/16"
  
    ImageDeleteResponseItem:
      type: "object"
      properties:
        Untagged:
          description: "The image ID of an image that was untagged"
          type: "string"
        Deleted:
          description: "The image ID of an image that was deleted"
          type: "string"
  
    ServiceUpdateResponse:
      type: "object"
      properties:
        Warnings:
          description: "Optional warning messages"
          type: "array"
          items:
            type: "string"
      example:
        Warning: "unable to pin image doesnotexist:latest to digest: image library/doesnotexist:latest not found"
  
    ContainerSummary:
      type: "object"
      properties:
        Id:
          description: "The ID of this container"
          type: "string"
          x-go-name: "ID"
        Names:
          description: "The names that this container has been given"
          type: "array"
          items:
            type: "string"
        Image:
          description: "The name of the image used when creating this container"
          type: "string"
        ImageID:
          description: "The ID of the image that this container was created from"
          type: "string"
        Command:
          description: "Command to run when starting the container"
          type: "string"
        Created:
          description: "When the container was created"
          type: "integer"
          format: "int64"
        Ports:
          description: "The ports exposed by this container"
          type: "array"
          items:
            $ref: "#/components/schemas/Port"
        SizeRw:
          description: "The size of files that have been created or changed by this container"
          type: "integer"
          format: "int64"
        SizeRootFs:
          description: "The total size of all the files in this container"
          type: "integer"
          format: "int64"
        Labels:
          description: "User-defined key/value metadata."
          type: "object"
          additionalProperties:
            type: "string"
        State:
          description: "The state of this container (e.g. `Exited`)"
          type: "string"
        Status:
          description: "Additional human-readable status of this container (e.g. `Exit 0`)"
          type: "string"
        HostConfig:
          type: "object"
          properties:
            NetworkMode:
              type: "string"
        NetworkSettings:
          description: "A summary of the container's network settings"
          type: "object"
          properties:
            Networks:
              type: "object"
              additionalProperties:
                $ref: "#/components/schemas/EndpointSettings"
        Mounts:
          type: "array"
          items:
            $ref: "#/components/schemas/MountPoint"
  
    Driver:
      description: "Driver represents a driver (network, logging, secrets)."
      type: "object"
      required: [Name]
      properties:
        Name:
          description: "Name of the driver."
          type: "string"
          x-nullable: false
          example: "some-driver"
        Options:
          description: "Key/value map of driver-specific options."
          type: "object"
          x-nullable: false
          additionalProperties:
            type: "string"
          example:
            OptionA: "value for driver-specific option A"
            OptionB: "value for driver-specific option B"
  
    SecretSpec:
      type: "object"
      properties:
        Name:
          description: "User-defined name of the secret."
          type: "string"
        Labels:
          description: "User-defined key/value metadata."
          type: "object"
          additionalProperties:
            type: "string"
          example:
            com.example.some-label: "some-value"
            com.example.some-other-label: "some-other-value"
        Data:
          description: |
            Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-5))
            data to store as secret.
  
            This field is only used to _create_ a secret, and is not returned by
            other endpoints.
          type: "string"
          example: ""
        Driver:
          description: |
            Name of the secrets driver used to fetch the secret's value from an
            external secret store.
          $ref: "#/components/schemas/Driver"
        Templating:
          description: |
            Templating driver, if applicable
  
            Templating controls whether and how to evaluate the config payload as
            a template. If no driver is set, no templating is used.
          $ref: "#/components/schemas/Driver"
  
    Secret:
      type: "object"
      properties:
        ID:
          type: "string"
          example: "blt1owaxmitz71s9v5zh81zun"
        Version:
          $ref: "#/components/schemas/ObjectVersion"
        CreatedAt:
          type: "string"
          format: "dateTime"
          example: "2017-07-20T13:55:28.678958722Z"
        UpdatedAt:
          type: "string"
          format: "dateTime"
          example: "2017-07-20T13:55:28.678958722Z"
        Spec:
          $ref: "#/components/schemas/SecretSpec"
  
    ConfigSpec:
      type: "object"
      properties:
        Name:
          description: "User-defined name of the config."
          type: "string"
        Labels:
          description: "User-defined key/value metadata."
          type: "object"
          additionalProperties:
            type: "string"
        Data:
          description: |
            Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-5))
            config data.
          type: "string"
        Templating:
          description: |
            Templating driver, if applicable
  
            Templating controls whether and how to evaluate the config payload as
            a template. If no driver is set, no templating is used.
          $ref: "#/components/schemas/Driver"
  
    Config:
      type: "object"
      properties:
        ID:
          type: "string"
        Version:
          $ref: "#/components/schemas/ObjectVersion"
        CreatedAt:
          type: "string"
          format: "dateTime"
        UpdatedAt:
          type: "string"
          format: "dateTime"
        Spec:
          $ref: "#/components/schemas/ConfigSpec"
  
    ContainerState:
      description: |
        ContainerState stores container's running state. It's part of ContainerJSONBase
        and will be returned by the "inspect" command.
      type: "object"
      properties:
        Status:
          description: |
            String representation of the container state. Can be one of "created",
            "running", "paused", "restarting", "removing", "exited", or "dead".
          type: "string"
          enum: ["created", "running", "paused", "restarting", "removing", "exited", "dead"]
          example: "running"
        Running:
          description: |
            Whether this container is running.
  
            Note that a running container can be _paused_. The `Running` and `Paused`
            booleans are not mutually exclusive:
  
            When pausing a container (on Linux), the freezer cgroup is used to suspend
            all processes in the container. Freezing the process requires the process to
            be running. As a result, paused containers are both `Running` _and_ `Paused`.
  
            Use the `Status` field instead to determine if a container's state is "running".
          type: "boolean"
          example: true
        Paused:
          description: "Whether this container is paused."
          type: "boolean"
          example: false
        Restarting:
          description: "Whether this container is restarting."
          type: "boolean"
          example: false
        OOMKilled:
          description: |
            Whether this container has been killed because it ran out of memory.
          type: "boolean"
          example: false
        Dead:
          type: "boolean"
          example: false
        Pid:
          description: "The process ID of this container"
          type: "integer"
          example: 1234
        ExitCode:
          description: "The last exit code of this container"
          type: "integer"
          example: 0
        Error:
          type: "string"
        StartedAt:
          description: "The time when this container was last started."
          type: "string"
          example: "2020-01-06T09:06:59.461876391Z"
        FinishedAt:
          description: "The time when this container last exited."
          type: "string"
          example: "2020-01-06T09:07:59.461876391Z"
        Health:
          x-nullable: true
          $ref: "#/components/schemas/Health"
  
    ContainerWaitResponse:
      description: "OK response to ContainerWait operation"
      type: "object"
      x-go-name: "ContainerWaitOKBody"
      title: "ContainerWaitResponse"
      required: [StatusCode, Error]
      properties:
        StatusCode:
          description: "Exit code of the container"
          type: "integer"
          x-nullable: false
        Error:
          $ref: "#/components/schemas/ContainerWaitExitError"
  
    ContainerWaitExitError:
      description: "container waiting error, if any"
      type: "object"
      x-go-name: "ContainerWaitOKBodyError"
      properties:
        Message:
          description: "Details of an error"
          type: "string"
  
    SystemVersion:
      type: "object"
      description: |
        Response of Engine API: GET "/version"
      properties:
        Platform:
          type: "object"
          required: [Name]
          properties:
            Name:
              type: "string"
        Components:
          type: "array"
          description: |
            Information about system components
          items:
            type: "object"
            x-go-name: ComponentVersion
            required: [Name, Version]
            properties:
              Name:
                description: |
                  Name of the component
                type: "string"
                example: "Engine"
              Version:
                description: |
                  Version of the component
                type: "string"
                x-nullable: false
                example: "19.03.12"
              Details:
                description: |
                  Key/value pairs of strings with additional information about the
                  component. These values are intended for informational purposes
                  only, and their content is not defined, and not part of the API
                  specification.
  
                  These messages can be printed by the client as information to the user.
                type: "object"
                x-nullable: true
        Version:
          description: "The version of the daemon"
          type: "string"
          example: "19.03.12"
        ApiVersion:
          description: |
            The default (and highest) API version that is supported by the daemon
          type: "string"
          example: "1.40"
        MinAPIVersion:
          description: |
            The minimum API version that is supported by the daemon
          type: "string"
          example: "1.12"
        GitCommit:
          description: |
            The Git commit of the source code that was used to build the daemon
          type: "string"
          example: "48a66213fe"
        GoVersion:
          description: |
            The version Go used to compile the daemon, and the version of the Go
            runtime in use.
          type: "string"
          example: "go1.13.14"
        Os:
          description: |
            The operating system that the daemon is running on ("linux" or "windows")
          type: "string"
          example: "linux"
        Arch:
          description: |
            The architecture that the daemon is running on
          type: "string"
          example: "amd64"
        KernelVersion:
          description: |
            The kernel version (`uname -r`) that the daemon is running on.
  
            This field is omitted when empty.
          type: "string"
          example: "4.19.76-linuxkit"
        Experimental:
          description: |
            Indicates if the daemon is started with experimental features enabled.
  
            This field is omitted when empty / false.
          type: "boolean"
          example: true
        BuildTime:
          description: |
            The date and time that the daemon was compiled.
          type: "string"
          example: "2020-06-22T15:49:27.000000000+00:00"
  
    SystemInfo:
      type: "object"
      properties:
        ID:
          description: |
            Unique identifier of the daemon.
  
            <p><br /></p>
  
            > **Note**: The format of the ID itself is not part of the API, and
            > should not be considered stable.
          type: "string"
          example: "7TRN:IPZB:QYBB:VPBQ:UMPP:KARE:6ZNR:XE6T:7EWV:PKF4:ZOJD:TPYS"
        Containers:
          description: "Total number of containers on the host."
          type: "integer"
          example: 14
        ContainersRunning:
          description: |
            Number of containers with status `"running"`.
          type: "integer"
          example: 3
        ContainersPaused:
          description: |
            Number of containers with status `"paused"`.
          type: "integer"
          example: 1
        ContainersStopped:
          description: |
            Number of containers with status `"stopped"`.
          type: "integer"
          example: 10
        Images:
          description: |
            Total number of images on the host.
  
            Both _tagged_ and _untagged_ (dangling) images are counted.
          type: "integer"
          example: 508
        Driver:
          description: "Name of the storage driver in use."
          type: "string"
          example: "overlay2"
        DriverStatus:
          description: |
            Information specific to the storage driver, provided as
            "label" / "value" pairs.
  
            This information is provided by the storage driver, and formatted
            in a way consistent with the output of `docker info` on the command
            line.
  
            <p><br /></p>
  
            > **Note**: The information returned in this field, including the
            > formatting of values and labels, should not be considered stable,
            > and may change without notice.
          type: "array"
          items:
            type: "array"
            items:
              type: "string"
          example:
            - ["Backing Filesystem", "extfs"]
            - ["Supports d_type", "true"]
            - ["Native Overlay Diff", "true"]
        DockerRootDir:
          description: |
            Root directory of persistent Docker state.
  
            Defaults to `/var/lib/docker` on Linux, and `C:\ProgramData\docker`
            on Windows.
          type: "string"
          example: "/var/lib/docker"
        Plugins:
          $ref: "#/components/schemas/PluginsInfo"
        MemoryLimit:
          description: "Indicates if the host has memory limit support enabled."
          type: "boolean"
          example: true
        SwapLimit:
          description: "Indicates if the host has memory swap limit support enabled."
          type: "boolean"
          example: true
        KernelMemory:
          description: |
            Indicates if the host has kernel memory limit support enabled.
  
            <p><br /></p>
  
            > **Deprecated**: This field is deprecated as the kernel 5.4 deprecated
            > `kmem.limit_in_bytes`.
          type: "boolean"
          example: true
        KernelMemoryTCP:
          description: |
            Indicates if the host has kernel memory TCP limit support enabled.
  
            Kernel memory TCP limits are not supported when using cgroups v2, which
            does not support the corresponding `memory.kmem.tcp.limit_in_bytes` cgroup.
          type: "boolean"
          example: true
        CpuCfsPeriod:
          description: |
            Indicates if CPU CFS(Completely Fair Scheduler) period is supported by
            the host.
          type: "boolean"
          example: true
        CpuCfsQuota:
          description: |
            Indicates if CPU CFS(Completely Fair Scheduler) quota is supported by
            the host.
          type: "boolean"
          example: true
        CPUShares:
          description: |
            Indicates if CPU Shares limiting is supported by the host.
          type: "boolean"
          example: true
        CPUSet:
          description: |
            Indicates if CPUsets (cpuset.cpus, cpuset.mems) are supported by the host.
  
            See [cpuset(7)](https://www.kernel.org/doc/Documentation/cgroup-v1/cpusets.txt)
          type: "boolean"
          example: true
        PidsLimit:
          description: "Indicates if the host kernel has PID limit support enabled."
          type: "boolean"
          example: true
        OomKillDisable:
          description: "Indicates if OOM killer disable is supported on the host."
          type: "boolean"
        IPv4Forwarding:
          description: "Indicates IPv4 forwarding is enabled."
          type: "boolean"
          example: true
        BridgeNfIptables:
          description: "Indicates if `bridge-nf-call-iptables` is available on the host."
          type: "boolean"
          example: true
        BridgeNfIp6tables:
          description: "Indicates if `bridge-nf-call-ip6tables` is available on the host."
          type: "boolean"
          example: true
        Debug:
          description: |
            Indicates if the daemon is running in debug-mode / with debug-level
            logging enabled.
          type: "boolean"
          example: true
        NFd:
          description: |
            The total number of file Descriptors in use by the daemon process.
  
            This information is only returned if debug-mode is enabled.
          type: "integer"
          example: 64
        NGoroutines:
          description: |
            The  number of goroutines that currently exist.
  
            This information is only returned if debug-mode is enabled.
          type: "integer"
          example: 174
        SystemTime:
          description: |
            Current system-time in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt)
            format with nano-seconds.
          type: "string"
          example: "2017-08-08T20:28:29.06202363Z"
        LoggingDriver:
          description: |
            The logging driver to use as a default for new containers.
          type: "string"
        CgroupDriver:
          description: |
            The driver to use for managing cgroups.
          type: "string"
          enum: ["cgroupfs", "systemd", "none"]
          default: "cgroupfs"
          example: "cgroupfs"
        CgroupVersion:
          description: |
            The version of the cgroup.
          type: "string"
          enum: ["1", "2"]
          default: "1"
          example: "1"
        NEventsListener:
          description: "Number of event listeners subscribed."
          type: "integer"
          example: 30
        KernelVersion:
          description: |
            Kernel version of the host.
  
            On Linux, this information obtained from `uname`. On Windows this
            information is queried from the <kbd>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\</kbd>
            registry value, for example _"10.0 14393 (14393.1198.amd64fre.rs1_release_sec.170427-1353)"_.
          type: "string"
          example: "4.9.38-moby"
        OperatingSystem:
          description: |
            Name of the host's operating system, for example: "Ubuntu 16.04.2 LTS"
            or "Windows Server 2016 Datacenter"
          type: "string"
          example: "Alpine Linux v3.5"
        OSVersion:
          description: |
            Version of the host's operating system
  
            <p><br /></p>
  
            > **Note**: The information returned in this field, including its
            > very existence, and the formatting of values, should not be considered
            > stable, and may change without notice.
          type: "string"
          example: "16.04"
        OSType:
          description: |
            Generic type of the operating system of the host, as returned by the
            Go runtime (`GOOS`).
  
            Currently returned values are "linux" and "windows". A full list of
            possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment).
          type: "string"
          example: "linux"
        Architecture:
          description: |
            Hardware architecture of the host, as returned by the Go runtime
            (`GOARCH`).
  
            A full list of possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment).
          type: "string"
          example: "x86_64"
        NCPU:
          description: |
            The number of logical CPUs usable by the daemon.
  
            The number of available CPUs is checked by querying the operating
            system when the daemon starts. Changes to operating system CPU
            allocation after the daemon is started are not reflected.
          type: "integer"
          example: 4
        MemTotal:
          description: |
            Total amount of physical memory available on the host, in bytes.
          type: "integer"
          format: "int64"
          example: 2095882240
  
        IndexServerAddress:
          description: |
            Address / URL of the index server that is used for image search,
            and as a default for user authentication for Docker Hub and Docker Cloud.
          default: "https://index.docker.io/v1/"
          type: "string"
          example: "https://index.docker.io/v1/"
        RegistryConfig:
          $ref: "#/components/schemas/RegistryServiceConfig"
        GenericResources:
          $ref: "#/components/schemas/GenericResources"
        HttpProxy:
          description: |
            HTTP-proxy configured for the daemon. This value is obtained from the
            [`HTTP_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.
            Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL
            are masked in the API response.
  
            Containers do not automatically inherit this configuration.
          type: "string"
          example: "http://xxxxx:xxxxx@proxy.corp.example.com:8080"
        HttpsProxy:
          description: |
            HTTPS-proxy configured for the daemon. This value is obtained from the
            [`HTTPS_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.
            Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL
            are masked in the API response.
  
            Containers do not automatically inherit this configuration.
          type: "string"
          example: "https://xxxxx:xxxxx@proxy.corp.example.com:4443"
        NoProxy:
          description: |
            Comma-separated list of domain extensions for which no proxy should be
            used. This value is obtained from the [`NO_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html)
            environment variable.
  
            Containers do not automatically inherit this configuration.
          type: "string"
          example: "*.local, 169.254/16"
        Name:
          description: "Hostname of the host."
          type: "string"
          example: "node5.corp.example.com"
        Labels:
          description: |
            User-defined labels (key/value metadata) as set on the daemon.
  
            <p><br /></p>
  
            > **Note**: When part of a Swarm, nodes can both have _daemon_ labels,
            > set through the daemon configuration, and _node_ labels, set from a
            > manager node in the Swarm. Node labels are not included in this
            > field. Node labels can be retrieved using the `/nodes/(id)` endpoint
            > on a manager node in the Swarm.
          type: "array"
          items:
            type: "string"
          example: ["storage=ssd", "production"]
        ExperimentalBuild:
          description: |
            Indicates if experimental features are enabled on the daemon.
          type: "boolean"
          example: true
        ServerVersion:
          description: |
            Version string of the daemon.
  
            > **Note**: the [standalone Swarm API](/swarm/swarm-api/)
            > returns the Swarm version instead of the daemon  version, for example
            > `swarm/1.2.8`.
          type: "string"
          example: "17.06.0-ce"
        ClusterStore:
          description: |
            URL of the distributed storage backend.
  
  
            The storage backend is used for multihost networking (to store
            network and endpoint information) and by the node discovery mechanism.
  
            <p><br /></p>
  
            > **Deprecated**: This field is only propagated when using standalone Swarm
            > mode, and overlay networking using an external k/v store. Overlay
            > networks with Swarm mode enabled use the built-in raft store, and
            > this field will be empty.
          type: "string"
          example: "consul://consul.corp.example.com:8600/some/path"
        ClusterAdvertise:
          description: |
            The network endpoint that the Engine advertises for the purpose of
            node discovery. ClusterAdvertise is a `host:port` combination on which
            the daemon is reachable by other hosts.
  
            <p><br /></p>
  
            > **Deprecated**: This field is only propagated when using standalone Swarm
            > mode, and overlay networking using an external k/v store. Overlay
            > networks with Swarm mode enabled use the built-in raft store, and
            > this field will be empty.
          type: "string"
          example: "node5.corp.example.com:8000"
        Runtimes:
          description: |
            List of [OCI compliant](https://github.com/opencontainers/runtime-spec)
            runtimes configured on the daemon. Keys hold the "name" used to
            reference the runtime.
  
            The Docker daemon relies on an OCI compliant runtime (invoked via the
            `containerd` daemon) as its interface to the Linux kernel namespaces,
            cgroups, and SELinux.
  
            The default runtime is `runc`, and automatically configured. Additional
            runtimes can be configured by the user and will be listed here.
          type: "object"
          additionalProperties:
            $ref: "#/components/schemas/Runtime"
          default:
            runc:
              path: "runc"
          example:
            runc:
              path: "runc"
            runc-master:
              path: "/go/bin/runc"
            custom:
              path: "/usr/local/bin/my-oci-runtime"
              runtimeArgs: ["--debug", "--systemd-cgroup=false"]
        DefaultRuntime:
          description: |
            Name of the default OCI runtime that is used when starting containers.
  
            The default can be overridden per-container at create time.
          type: "string"
          default: "runc"
          example: "runc"
        Swarm:
          $ref: "#/components/schemas/SwarmInfo"
        LiveRestoreEnabled:
          description: |
            Indicates if live restore is enabled.
  
            If enabled, containers are kept running when the daemon is shutdown
            or upon daemon start if running containers are detected.
          type: "boolean"
          default: false
          example: false
        Isolation:
          description: |
            Represents the isolation technology to use as a default for containers.
            The supported values are platform-specific.
  
            If no isolation value is specified on daemon start, on Windows client,
            the default is `hyperv`, and on Windows server, the default is `process`.
  
            This option is currently not used on other platforms.
          default: "default"
          type: "string"
          enum:
            - "default"
            - "hyperv"
            - "process"
        InitBinary:
          description: |
            Name and, optional, path of the `docker-init` binary.
  
            If the path is omitted, the daemon searches the host's `$PATH` for the
            binary and uses the first result.
          type: "string"
          example: "docker-init"
        ContainerdCommit:
          $ref: "#/components/schemas/Commit"
        RuncCommit:
          $ref: "#/components/schemas/Commit"
        InitCommit:
          $ref: "#/components/schemas/Commit"
        SecurityOptions:
          description: |
            List of security features that are enabled on the daemon, such as
            apparmor, seccomp, SELinux, user-namespaces (userns), and rootless.
  
            Additional configuration options for each security feature may
            be present, and are included as a comma-separated list of key/value
            pairs.
          type: "array"
          items:
            type: "string"
          example:
            - "name=apparmor"
            - "name=seccomp,profile=default"
            - "name=selinux"
            - "name=userns"
            - "name=rootless"
        ProductLicense:
          description: |
            Reports a summary of the product license on the daemon.
  
            If a commercial license has been applied to the daemon, information
            such as number of nodes, and expiration are included.
          type: "string"
          example: "Community Engine"
        DefaultAddressPools:
          description: |
            List of custom default address pools for local networks, which can be
            specified in the daemon.json file or dockerd option.
  
            Example: a Base "10.10.0.0/16" with Size 24 will define the set of 256
            10.10.[0-255].0/24 address pools.
          type: "array"
          items:
            type: "object"
            properties:
              Base:
                description: "The network address in CIDR format"
                type: "string"
                example: "10.10.0.0/16"
              Size:
                description: "The network pool size"
                type: "integer"
                example: "24"
        Warnings:
          description: |
            List of warnings / informational messages about missing features, or
            issues related to the daemon configuration.
  
            These messages can be printed by the client as information to the user.
          type: "array"
          items:
            type: "string"
          example:
            - "WARNING: No memory limit support"
            - "WARNING: bridge-nf-call-iptables is disabled"
            - "WARNING: bridge-nf-call-ip6tables is disabled"
  
  
    # PluginsInfo is a temp struct holding Plugins name
    # registered with docker daemon. It is used by Info struct
    PluginsInfo:
      description: |
        Available plugins per type.
  
        <p><br /></p>
  
        > **Note**: Only unmanaged (V1) plugins are included in this list.
        > V1 plugins are "lazily" loaded, and are not returned in this list
        > if there is no resource using the plugin.
      type: "object"
      properties:
        Volume:
          description: "Names of available volume-drivers, and network-driver plugins."
          type: "array"
          items:
            type: "string"
          example: ["local"]
        Network:
          description: "Names of available network-drivers, and network-driver plugins."
          type: "array"
          items:
            type: "string"
          example: ["bridge", "host", "ipvlan", "macvlan", "null", "overlay"]
        Authorization:
          description: "Names of available authorization plugins."
          type: "array"
          items:
            type: "string"
          example: ["img-authz-plugin", "hbm"]
        Log:
          description: "Names of available logging-drivers, and logging-driver plugins."
          type: "array"
          items:
            type: "string"
          example: ["awslogs", "fluentd", "gcplogs", "gelf", "journald", "json-file", "logentries", "splunk", "syslog"]
  
  
    RegistryServiceConfig:
      description: |
        RegistryServiceConfig stores daemon registry services configuration.
      type: "object"
      x-nullable: true
      properties:
        AllowNondistributableArtifactsCIDRs:
          description: |
            List of IP ranges to which nondistributable artifacts can be pushed,
            using the CIDR syntax [RFC 4632](https://tools.ietf.org/html/4632).
  
            Some images (for example, Windows base images) contain artifacts
            whose distribution is restricted by license. When these images are
            pushed to a registry, restricted artifacts are not included.
  
            This configuration override this behavior, and enables the daemon to
            push nondistributable artifacts to all registries whose resolved IP
            address is within the subnet described by the CIDR syntax.
  
            This option is useful when pushing images containing
            nondistributable artifacts to a registry on an air-gapped network so
            hosts on that network can pull the images without connecting to
            another server.
  
            > **Warning**: Nondistributable artifacts typically have restrictions
            > on how and where they can be distributed and shared. Only use this
            > feature to push artifacts to private registries and ensure that you
            > are in compliance with any terms that cover redistributing
            > nondistributable artifacts.
  
          type: "array"
          items:
            type: "string"
          example: ["::1/128", "127.0.0.0/8"]
        AllowNondistributableArtifactsHostnames:
          description: |
            List of registry hostnames to which nondistributable artifacts can be
            pushed, using the format `<hostname>[:<port>]` or `<IP address>[:<port>]`.
  
            Some images (for example, Windows base images) contain artifacts
            whose distribution is restricted by license. When these images are
            pushed to a registry, restricted artifacts are not included.
  
            This configuration override this behavior for the specified
            registries.
  
            This option is useful when pushing images containing
            nondistributable artifacts to a registry on an air-gapped network so
            hosts on that network can pull the images without connecting to
            another server.
  
            > **Warning**: Nondistributable artifacts typically have restrictions
            > on how and where they can be distributed and shared. Only use this
            > feature to push artifacts to private registries and ensure that you
            > are in compliance with any terms that cover redistributing
            > nondistributable artifacts.
          type: "array"
          items:
            type: "string"
          example: ["registry.internal.corp.example.com:3000", "[2001:db8:a0b:12f0::1]:443"]
        InsecureRegistryCIDRs:
          description: |
            List of IP ranges of insecure registries, using the CIDR syntax
            ([RFC 4632](https://tools.ietf.org/html/4632)). Insecure registries
            accept un-encrypted (HTTP) and/or untrusted (HTTPS with certificates
            from unknown CAs) communication.
  
            By default, local registries (`127.0.0.0/8`) are configured as
            insecure. All other registries are secure. Communicating with an
            insecure registry is not possible if the daemon assumes that registry
            is secure.
  
            This configuration override this behavior, insecure communication with
            registries whose resolved IP address is within the subnet described by
            the CIDR syntax.
  
            Registries can also be marked insecure by hostname. Those registries
            are listed under `IndexConfigs` and have their `Secure` field set to
            `false`.
  
            > **Warning**: Using this option can be useful when running a local
            > registry, but introduces security vulnerabilities. This option
            > should therefore ONLY be used for testing purposes. For increased
            > security, users should add their CA to their system's list of trusted
            > CAs instead of enabling this option.
          type: "array"
          items:
            type: "string"
          example: ["::1/128", "127.0.0.0/8"]
        IndexConfigs:
          type: "object"
          additionalProperties:
            $ref: "#/components/schemas/IndexInfo"
          example:
            "127.0.0.1:5000":
              "Name": "127.0.0.1:5000"
              "Mirrors": []
              "Secure": false
              "Official": false
            "[2001:db8:a0b:12f0::1]:80":
              "Name": "[2001:db8:a0b:12f0::1]:80"
              "Mirrors": []
              "Secure": false
              "Official": false
            "docker.io":
              Name: "docker.io"
              Mirrors: ["https://hub-mirror.corp.example.com:5000/"]
              Secure: true
              Official: true
            "registry.internal.corp.example.com:3000":
              Name: "registry.internal.corp.example.com:3000"
              Mirrors: []
              Secure: false
              Official: false
        Mirrors:
          description: |
            List of registry URLs that act as a mirror for the official
            (`docker.io`) registry.
  
          type: "array"
          items:
            type: "string"
          example:
            - "https://hub-mirror.corp.example.com:5000/"
            - "https://[2001:db8:a0b:12f0::1]/"
  
    IndexInfo:
      description:
        IndexInfo contains information about a registry.
      type: "object"
      x-nullable: true
      properties:
        Name:
          description: |
            Name of the registry, such as "docker.io".
          type: "string"
          example: "docker.io"
        Mirrors:
          description: |
            List of mirrors, expressed as URIs.
          type: "array"
          items:
            type: "string"
          example:
            - "https://hub-mirror.corp.example.com:5000/"
            - "https://registry-2.docker.io/"
            - "https://registry-3.docker.io/"
        Secure:
          description: |
            Indicates if the registry is part of the list of insecure
            registries.
  
            If `false`, the registry is insecure. Insecure registries accept
            un-encrypted (HTTP) and/or untrusted (HTTPS with certificates from
            unknown CAs) communication.
  
            > **Warning**: Insecure registries can be useful when running a local
            > registry. However, because its use creates security vulnerabilities
            > it should ONLY be enabled for testing purposes. For increased
            > security, users should add their CA to their system's list of
            > trusted CAs instead of enabling this option.
          type: "boolean"
          example: true
        Official:
          description: |
            Indicates whether this is an official registry (i.e., Docker Hub / docker.io)
          type: "boolean"
          example: true
  
    Runtime:
      description: |
        Runtime describes an [OCI compliant](https://github.com/opencontainers/runtime-spec)
        runtime.
  
        The runtime is invoked by the daemon via the `containerd` daemon. OCI
        runtimes act as an interface to the Linux kernel namespaces, cgroups,
        and SELinux.
      type: "object"
      properties:
        path:
          description: |
            Name and, optional, path, of the OCI executable binary.
  
            If the path is omitted, the daemon searches the host's `$PATH` for the
            binary and uses the first result.
          type: "string"
          example: "/usr/local/bin/my-oci-runtime"
        runtimeArgs:
          description: |
            List of command-line arguments to pass to the runtime when invoked.
          type: "array"
          x-nullable: true
          items:
            type: "string"
          example: ["--debug", "--systemd-cgroup=false"]
  
    Commit:
      description: |
        Commit holds the Git-commit (SHA1) that a binary was built from, as
        reported in the version-string of external tools, such as `containerd`,
        or `runC`.
      type: "object"
      properties:
        ID:
          description: "Actual commit ID of external tool."
          type: "string"
          example: "cfb82a876ecc11b5ca0977d1733adbe58599088a"
        Expected:
          description: |
            Commit ID of external tool expected by dockerd as set at build time.
          type: "string"
          example: "2d41c047c83e09a6d61d464906feb2a2f3c52aa4"
  
    SwarmInfo:
      description: |
        Represents generic information about swarm.
      type: "object"
      properties:
        NodeID:
          description: "Unique identifier of for this node in the swarm."
          type: "string"
          default: ""
          example: "k67qz4598weg5unwwffg6z1m1"
        NodeAddr:
          description: |
            IP address at which this node can be reached by other nodes in the
            swarm.
          type: "string"
          default: ""
          example: "10.0.0.46"
        LocalNodeState:
          $ref: "#/components/schemas/LocalNodeState"
        ControlAvailable:
          type: "boolean"
          default: false
          example: true
        Error:
          type: "string"
          default: ""
        RemoteManagers:
          description: |
            List of ID's and addresses of other managers in the swarm.
          type: "array"
          default: null
          x-nullable: true
          items:
            $ref: "#/components/schemas/PeerNode"
          example:
            - NodeID: "71izy0goik036k48jg985xnds"
              Addr: "10.0.0.158:2377"
            - NodeID: "79y6h1o4gv8n120drcprv5nmc"
              Addr: "10.0.0.159:2377"
            - NodeID: "k67qz4598weg5unwwffg6z1m1"
              Addr: "10.0.0.46:2377"
        Nodes:
          description: "Total number of nodes in the swarm."
          type: "integer"
          x-nullable: true
          example: 4
        Managers:
          description: "Total number of managers in the swarm."
          type: "integer"
          x-nullable: true
          example: 3
        Cluster:
          $ref: "#/components/schemas/ClusterInfo"
  
    LocalNodeState:
      description: "Current local status of this node."
      type: "string"
      default: ""
      enum:
        - ""
        - "inactive"
        - "pending"
        - "active"
        - "error"
        - "locked"
      example: "active"
  
    PeerNode:
      description: "Represents a peer-node in the swarm"
      type: "object"
      properties:
        NodeID:
          description: "Unique identifier of for this node in the swarm."
          type: "string"
        Addr:
          description: |
            IP address and ports at which this node can be reached.
          type: "string"
  
    NetworkAttachmentConfig:
      description: |
        Specifies how a service should be attached to a particular network.
      type: "object"
      properties:
        Target:
          description: |
            The target network for attachment. Must be a network name or ID.
          type: "string"
        Aliases:
          description: |
            Discoverable alternate names for the service on this network.
          type: "array"
          items:
            type: "string"
        DriverOpts:
          description: |
            Driver attachment options for the network target.
          type: "object"
          additionalProperties:
            type: "string"
  
    EventActor:
      description: |
        Actor describes something that generates events, like a container, network,
        or a volume.
      type: "object"
      properties:
        ID:
          description: "The ID of the object emitting the event"
          type: "string"
          example: "ede54ee1afda366ab42f824e8a5ffd195155d853ceaec74a927f249ea270c743"
        Attributes:
          description: |
            Various key/value attributes of the object, depending on its type.
          type: "object"
          additionalProperties:
            type: "string"
          example:
            com.example.some-label: "some-label-value"
            image: "alpine:latest"
            name: "my-container"
  
    EventMessage:
      description: |
        EventMessage represents the information an event contains.
      type: "object"
      title: "SystemEventsResponse"
      properties:
        Type:
          description: "The type of object emitting the event"
          type: "string"
          enum: ["builder", "config", "container", "daemon", "image", "network", "node", "plugin", "secret", "service", "volume"]
          example: "container"
        Action:
          description: "The type of event"
          type: "string"
          example: "create"
        Actor:
          $ref: "#/components/schemas/EventActor"
        scope:
          description: |
            Scope of the event. Engine events are `local` scope. Cluster (Swarm)
            events are `swarm` scope.
          type: "string"
          enum: ["local", "swarm"]
        time:
          description: "Timestamp of event"
          type: "integer"
          format: "int64"
          example: 1629574695
        timeNano:
          description: "Timestamp of event, with nanosecond accuracy"
          type: "integer"
          format: "int64"
          example: 1629574695515050031
  
    OCIDescriptor:
      type: "object"
      x-go-name: Descriptor
      description: |
        A descriptor struct containing digest, media type, and size, as defined in
        the [OCI Content Descriptors Specification](https://github.com/opencontainers/image-spec/blob/v1.0.1/descriptor.md).
      properties:
        mediaType:
          description: |
            The media type of the object this schema refers to.
          type: "string"
          example: "application/vnd.docker.distribution.manifest.v2+json"
        digest:
          description: |
            The digest of the targeted content.
          type: "string"
          example: "sha256:c0537ff6a5218ef531ece93d4984efc99bbf3f7497c0a7726c88e2bb7584dc96"
        size:
          description: |
            The size in bytes of the blob.
          type: "integer"
          format: "int64"
          example: 3987495
          # TODO Not yet including these fields for now, as they are nil / omitted in our response.
          # urls:
          #   description: |
          #     List of URLs from which this object MAY be downloaded.
          #   type: "array"
          #   items:
          #     type: "string"
          #     format: "uri"
          # annotations:
          #   description: |
          #     Arbitrary metadata relating to the targeted content.
          #   type: "object"
          #   additionalProperties:
          #     type: "string"
          # platform:
          #   $ref: "#/components/schemas/OCIPlatform"
  
    OCIPlatform:
      type: "object"
      x-go-name: Platform
      description: |
        Describes the platform which the image in the manifest runs on, as defined
        in the [OCI Image Index Specification](https://github.com/opencontainers/image-spec/blob/v1.0.1/image-index.md).
      properties:
        architecture:
          description: |
            The CPU architecture, for example `amd64` or `ppc64`.
          type: "string"
          example: "arm"
        os:
          description: |
            The operating system, for example `linux` or `windows`.
          type: "string"
          example: "windows"
        os.version:
          description: |
            Optional field specifying the operating system version, for example on
            Windows `10.0.19041.1165`.
          type: "string"
          example: "10.0.19041.1165"
        os.features:
          description: |
            Optional field specifying an array of strings, each listing a required
            OS feature (for example on Windows `win32k`).
          type: "array"
          items:
            type: "string"
          example:
            - "win32k"
        variant:
          description: |
            Optional field specifying a variant of the CPU, for example `v7` to
            specify ARMv7 when architecture is `arm`.
          type: "string"
          example: "v7"
  
    DistributionInspect:
      type: "object"
      x-go-name: DistributionInspect
      title: "DistributionInspectResponse"
      required: [Descriptor, Platforms]
      description: |
        Describes the result obtained from contacting the registry to retrieve
        image metadata.
      properties:
        Descriptor:
          $ref: "#/components/schemas/OCIDescriptor"
        Platforms:
          type: "array"
          description: |
            An array containing all platforms supported by the image.
          items:
            $ref: "#/components/schemas/OCIPlatform"
  
    io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup:
      description: APIGroup contains the name, the supported versions, and the preferred
        version of a group.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest internal
            value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this object
            represents. Servers may infer this from the endpoint the client submits
            requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        name:
          description: name is the name of the group.
          type: string
        preferredVersion:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery'
          description: preferredVersion is the version preferred by the API server,
            which probably is the storage version.
        serverAddressByClientCIDRs:
          description: 'a map of client CIDR to server address that is serving this
            group. This is to help clients reach servers in the most network-efficient
            way possible. Clients can use the appropriate server address as per the
            CIDR that they match. In case of multiple matches, clients should use the
            longest matching CIDR. The server returns only those CIDRs that it thinks
            that the client can match. For example: the master will return an internal
            IP CIDR only, if the client reaches the server using an internal IP. Server
            looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr
            (in that order) to get the client IP.'
          items:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR'
          type: array
        versions:
          description: versions are the versions supported in this group.
          items:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery'
          type: array
      required:
      - name
      - versions
      type: object
      x-kubernetes-group-version-kind:
      - group: ''
        kind: APIGroup
        version: v1
    io.k8s.apimachinery.pkg.apis.meta.v1.APIGroupList:
      description: APIGroupList is a list of APIGroup, to allow clients to discover
        the API at /apis.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest internal
            value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        groups:
          description: groups is a list of APIGroup.
          items:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup'
          type: array
        kind:
          description: 'Kind is a string value representing the REST resource this object
            represents. Servers may infer this from the endpoint the client submits
            requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
      required:
      - groups
      type: object
      x-kubernetes-group-version-kind:
      - group: ''
        kind: APIGroupList
        version: v1
    io.k8s.apimachinery.pkg.apis.meta.v1.APIResource:
      description: APIResource specifies the name of a resource and whether it is namespaced.
      properties:
        categories:
          description: categories is a list of the grouped resources this resource belongs
            to (e.g. 'all')
          items:
            type: string
          type: array
        group:
          description: 'group is the preferred group of the resource.  Empty implies
            the group of the containing resource list. For subresources, this may have
            a different value, for example: Scale".'
          type: string
        kind:
          description: kind is the kind for the resource (e.g. 'Foo' is the kind for
            a resource 'foo')
          type: string
        name:
          description: name is the plural name of the resource.
          type: string
        namespaced:
          description: namespaced indicates if a resource is namespaced or not.
          type: boolean
        shortNames:
          description: shortNames is a list of suggested short names of the resource.
          items:
            type: string
          type: array
        singularName:
          description: singularName is the singular name of the resource.  This allows
            clients to handle plural and singular opaquely. The singularName is more
            correct for reporting status on a single item and both singular and plural
            are allowed from the kubectl CLI interface.
          type: string
        storageVersionHash:
          description: The hash value of the storage version, the version this resource
            is converted to when written to the data store. Value must be treated as
            opaque by clients. Only equality comparison on the value is valid. This
            is an alpha feature and may change or be removed in the future. The field
            is populated by the apiserver only if the StorageVersionHash feature gate
            is enabled. This field will remain optional even if it graduates.
          type: string
        verbs:
          description: verbs is a list of supported kube verbs (this includes get, list,
            watch, create, update, patch, delete, deletecollection, and proxy)
          items:
            type: string
          type: array
        version:
          description: 'version is the preferred version of the resource.  Empty implies
            the version of the containing resource list For subresources, this may have
            a different value, for example: v1 (while inside a v1beta1 version of the
            core resource''s group)".'
          type: string
      required:
      - name
      - singularName
      - namespaced
      - kind
      - verbs
      type: object
    io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList:
      description: APIResourceList is a list of APIResource, it is used to expose the
        name of the resources supported in a specific group and version, and if the
        resource is namespaced.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest internal
            value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        groupVersion:
          description: groupVersion is the group and version this APIResourceList is
            for.
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this object
            represents. Servers may infer this from the endpoint the client submits
            requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        resources:
          description: resources contains the name of the resources and if they are
            namespaced.
          items:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIResource'
          type: array
      required:
      - groupVersion
      - resources
      type: object
      x-kubernetes-group-version-kind:
      - group: ''
        kind: APIResourceList
        version: v1
    io.k8s.apimachinery.pkg.apis.meta.v1.APIVersions:
      description: APIVersions lists the versions that are available, to allow clients
        to discover the API at /api, which is the root path of the legacy v1 API.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest internal
            value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this object
            represents. Servers may infer this from the endpoint the client submits
            requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        serverAddressByClientCIDRs:
          description: 'a map of client CIDR to server address that is serving this
            group. This is to help clients reach servers in the most network-efficient
            way possible. Clients can use the appropriate server address as per the
            CIDR that they match. In case of multiple matches, clients should use the
            longest matching CIDR. The server returns only those CIDRs that it thinks
            that the client can match. For example: the master will return an internal
            IP CIDR only, if the client reaches the server using an internal IP. Server
            looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr
            (in that order) to get the client IP.'
          items:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR'
          type: array
        versions:
          description: versions are the api versions that are available.
          items:
            type: string
          type: array
      required:
      - versions
      - serverAddressByClientCIDRs
      type: object
      x-kubernetes-group-version-kind:
      - group: ''
        kind: APIVersions
        version: v1
    io.k8s.apimachinery.pkg.apis.meta.v1.Condition:
      description: Condition contains details for one aspect of the current state of
        this API Resource.
      properties:
        lastTransitionTime:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
          description: lastTransitionTime is the last time the condition transitioned
            from one status to another. This should be when the underlying condition
            changed.  If that is not known, then using the time when the API field changed
            is acceptable.
        message:
          description: message is a human readable message indicating details about
            the transition. This may be an empty string.
          type: string
        observedGeneration:
          description: observedGeneration represents the .metadata.generation that the
            condition was set based upon. For instance, if .metadata.generation is currently
            12, but the .status.conditions[x].observedGeneration is 9, the condition
            is out of date with respect to the current state of the instance.
          format: int64
          type: integer
        reason:
          description: reason contains a programmatic identifier indicating the reason
            for the condition's last transition. Producers of specific condition types
            may define expected values and meanings for this field, and whether the
            values are considered a guaranteed API. The value should be a CamelCase
            string. This field may not be empty.
          type: string
        status:
          description: status of the condition, one of True, False, Unknown.
          type: string
        type:
          description: type of condition in CamelCase or in foo.example.com/CamelCase.
          type: string
      required:
      - type
      - status
      - lastTransitionTime
      - reason
      - message
      type: object
    io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions:
      description: DeleteOptions may be provided when deleting an API object.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest internal
            value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        dryRun:
          description: 'When present, indicates that modifications should not be persisted.
            An invalid or unrecognized dryRun directive will result in an error response
            and no further processing of the request. Valid values are: - All: all dry
            run stages will be processed'
          items:
            type: string
          type: array
        gracePeriodSeconds:
          description: The duration in seconds before the object should be deleted.
            Value must be non-negative integer. The value zero indicates delete immediately.
            If this value is nil, the default grace period for the specified type will
            be used. Defaults to a per object value if not specified. zero means delete
            immediately.
          format: int64
          type: integer
        kind:
          description: 'Kind is a string value representing the REST resource this object
            represents. Servers may infer this from the endpoint the client submits
            requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        orphanDependents:
          description: 'Deprecated: please use the PropagationPolicy, this field will
            be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
            the "orphan" finalizer will be added to/removed from the object''s finalizers
            list. Either this field or PropagationPolicy may be set, but not both.'
          type: boolean
        preconditions:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions'
          description: Must be fulfilled before a deletion is carried out. If not possible,
            a 409 Conflict status will be returned.
        propagationPolicy:
          description: 'Whether and how garbage collection will be performed. Either
            this field or OrphanDependents may be set, but not both. The default policy
            is decided by the existing finalizer set in the metadata.finalizers and
            the resource-specific default policy. Acceptable values are: ''Orphan''
            - orphan the dependents; ''Background'' - allow the garbage collector to
            delete the dependents in the background; ''Foreground'' - a cascading policy
            that deletes all dependents in the foreground.'
          type: string
      type: object
      x-kubernetes-group-version-kind:
      - group: ''
        kind: DeleteOptions
        version: v1
      - group: admission.k8s.io
        kind: DeleteOptions
        version: v1
      - group: admission.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: admissionregistration.k8s.io
        kind: DeleteOptions
        version: v1
      - group: admissionregistration.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: apiextensions.k8s.io
        kind: DeleteOptions
        version: v1
      - group: apiextensions.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: apiregistration.k8s.io
        kind: DeleteOptions
        version: v1
      - group: apiregistration.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: apps
        kind: DeleteOptions
        version: v1
      - group: apps
        kind: DeleteOptions
        version: v1beta1
      - group: apps
        kind: DeleteOptions
        version: v1beta2
      - group: authentication.k8s.io
        kind: DeleteOptions
        version: v1
      - group: authentication.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: authorization.k8s.io
        kind: DeleteOptions
        version: v1
      - group: authorization.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: autoscaling
        kind: DeleteOptions
        version: v1
      - group: autoscaling
        kind: DeleteOptions
        version: v2
      - group: autoscaling
        kind: DeleteOptions
        version: v2beta1
      - group: autoscaling
        kind: DeleteOptions
        version: v2beta2
      - group: batch
        kind: DeleteOptions
        version: v1
      - group: batch
        kind: DeleteOptions
        version: v1beta1
      - group: certificates.k8s.io
        kind: DeleteOptions
        version: v1
      - group: certificates.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: coordination.k8s.io
        kind: DeleteOptions
        version: v1
      - group: coordination.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: discovery.k8s.io
        kind: DeleteOptions
        version: v1
      - group: discovery.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: events.k8s.io
        kind: DeleteOptions
        version: v1
      - group: events.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: extensions
        kind: DeleteOptions
        version: v1beta1
      - group: flowcontrol.apiserver.k8s.io
        kind: DeleteOptions
        version: v1alpha1
      - group: flowcontrol.apiserver.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: flowcontrol.apiserver.k8s.io
        kind: DeleteOptions
        version: v1beta2
      - group: imagepolicy.k8s.io
        kind: DeleteOptions
        version: v1alpha1
      - group: internal.apiserver.k8s.io
        kind: DeleteOptions
        version: v1alpha1
      - group: networking.k8s.io
        kind: DeleteOptions
        version: v1
      - group: networking.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: node.k8s.io
        kind: DeleteOptions
        version: v1
      - group: node.k8s.io
        kind: DeleteOptions
        version: v1alpha1
      - group: node.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: policy
        kind: DeleteOptions
        version: v1
      - group: policy
        kind: DeleteOptions
        version: v1beta1
      - group: rbac.authorization.k8s.io
        kind: DeleteOptions
        version: v1
      - group: rbac.authorization.k8s.io
        kind: DeleteOptions
        version: v1alpha1
      - group: rbac.authorization.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: scheduling.k8s.io
        kind: DeleteOptions
        version: v1
      - group: scheduling.k8s.io
        kind: DeleteOptions
        version: v1alpha1
      - group: scheduling.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: storage.k8s.io
        kind: DeleteOptions
        version: v1
      - group: storage.k8s.io
        kind: DeleteOptions
        version: v1alpha1
      - group: storage.k8s.io
        kind: DeleteOptions
        version: v1beta1
    io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1:
      description: 'FieldsV1 stores a set of fields in a data structure like a Trie,
        in JSON format.
  
  
        Each key is either a ''.'' representing the field itself, and will always map
        to an empty set, or a string representing a sub-field or item. The string will
        follow one of these four formats: ''f:<name>'', where <name> is the name of
        a field in a struct, or key in a map ''v:<value>'', where <value> is the exact
        json formatted value of a list item ''i:<index>'', where <index> is position
        of a item in a list ''k:<keys>'', where <keys> is a map of  a list item''s key
        fields to their unique values If a key maps to an empty Fields value, the field
        that key represents is part of the set.
  
  
        The exact format is defined in sigs.k8s.io/structured-merge-diff'
      type: object
    io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery:
      description: GroupVersion contains the "group/version" and "version" string of
        a version. It is made a struct to keep extensibility.
      properties:
        groupVersion:
          description: groupVersion specifies the API group and version in the form
            "group/version"
          type: string
        version:
          description: version specifies the version in the form of "version". This
            is to save the clients the trouble of splitting the GroupVersion.
          type: string
      required:
      - groupVersion
      - version
      type: object
    io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector:
      description: A label selector is a label query over a set of resources. The result
        of matchLabels and matchExpressions are ANDed. An empty label selector matches
        all objects. A null label selector matches no objects.
      properties:
        matchExpressions:
          description: matchExpressions is a list of label selector requirements. The
            requirements are ANDed.
          items:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement'
          type: array
        matchLabels:
          additionalProperties:
            type: string
          description: matchLabels is a map of {key,value} pairs. A single {key,value}
            in the matchLabels map is equivalent to an element of matchExpressions,
            whose key field is "key", the operator is "In", and the values array contains
            only "value". The requirements are ANDed.
          type: object
      type: object
      x-kubernetes-map-type: atomic
    io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement:
      description: A label selector requirement is a selector that contains values,
        a key, and an operator that relates the key and values.
      properties:
        key:
          description: key is the label key that the selector applies to.
          type: string
          x-kubernetes-patch-merge-key: key
          x-kubernetes-patch-strategy: merge
        operator:
          description: operator represents a key's relationship to a set of values.
            Valid operators are In, NotIn, Exists and DoesNotExist.
          type: string
        values:
          description: values is an array of string values. If the operator is In or
            NotIn, the values array must be non-empty. If the operator is Exists or
            DoesNotExist, the values array must be empty. This array is replaced during
            a strategic merge patch.
          items:
            type: string
          type: array
      required:
      - key
      - operator
      type: object
    io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta:
      description: ListMeta describes metadata that synthetic resources must have, including
        lists and various status objects. A resource may have only one of {ObjectMeta,
        ListMeta}.
      properties:
        continue:
          description: continue may be set if the user set a limit on the number of
            items returned, and indicates that the server has more data available. The
            value is opaque and may be used to issue another request to the endpoint
            that served this list to retrieve the next set of available objects. Continuing
            a consistent list may not be possible if the server configuration has changed
            or more than a few minutes have passed. The resourceVersion field returned
            when using this continue value will be identical to the value in the first
            response, unless you have received this token from an error message.
          type: string
        remainingItemCount:
          description: remainingItemCount is the number of subsequent items in the list
            which are not included in this list response. If the list request contained
            label or field selectors, then the number of remaining items is unknown
            and the field will be left unset and omitted during serialization. If the
            list is complete (either because it is not chunking or because this is the
            last chunk), then there are no more remaining items and this field will
            be left unset and omitted during serialization. Servers older than v1.15
            do not set this field. The intended use of the remainingItemCount is *estimating*
            the size of a collection. Clients should not rely on the remainingItemCount
            to be set or to be exact.
          format: int64
          type: integer
        resourceVersion:
          description: 'String that identifies the server''s internal version of this
            object that can be used by clients to determine when objects have changed.
            Value must be treated as opaque by clients and passed unmodified back to
            the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
          type: string
        selfLink:
          description: 'Deprecated: selfLink is a legacy read-only field that is no
            longer populated by the system.'
          type: string
      type: object
    io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry:
      description: ManagedFieldsEntry is a workflow-id, a FieldSet and the group version
        of the resource that the fieldset applies to.
      properties:
        apiVersion:
          description: APIVersion defines the version of this resource that this field
            set applies to. The format is "group/version" just like the top-level APIVersion
            field. It is necessary to track the version of a field set because it cannot
            be automatically converted.
          type: string
        fieldsType:
          description: 'FieldsType is the discriminator for the different fields format
            and version. There is currently only one possible value: "FieldsV1"'
          type: string
        fieldsV1:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1'
          description: FieldsV1 holds the first JSON version format as described in
            the "FieldsV1" type.
        manager:
          description: Manager is an identifier of the workflow managing these fields.
          type: string
        operation:
          description: Operation is the type of operation which lead to this ManagedFieldsEntry
            being created. The only valid values for this field are 'Apply' and 'Update'.
          type: string
        subresource:
          description: Subresource is the name of the subresource used to update that
            object, or empty string if the object was updated through the main resource.
            The value of this field is used to distinguish between managers, even if
            they share the same name. For example, a status update will be distinct
            from a regular update using the same manager name. Note that the APIVersion
            field is not related to the Subresource field and it always corresponds
            to the version of the main resource.
          type: string
        time:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
          description: Time is the timestamp of when the ManagedFields entry was added.
            The timestamp will also be updated if a field is added, the manager changes
            any of the owned fields value or removes a field. The timestamp does not
            update when a field is removed from the entry because another manager took
            it over.
      type: object
    io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime:
      description: MicroTime is version of Time with microsecond level precision.
      format: date-time
      type: string
    io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta:
      description: ObjectMeta is metadata that all persisted resources must have, which
        includes all objects users must create.
      properties:
        annotations:
          additionalProperties:
            type: string
          description: 'Annotations is an unstructured key value map stored with a resource
            that may be set by external tools to store and retrieve arbitrary metadata.
            They are not queryable and should be preserved when modifying objects. More
            info: http://kubernetes.io/docs/user-guide/annotations'
          type: object
        clusterName:
          description: 'Deprecated: ClusterName is a legacy field that was always cleared
            by the system and never used; it will be removed completely in 1.25.
  
  
            The name in the go struct is changed to help clients detect accidental use.'
          type: string
        creationTimestamp:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
          description: 'CreationTimestamp is a timestamp representing the server time
            when this object was created. It is not guaranteed to be set in happens-before
            order across separate operations. Clients may not set this value. It is
            represented in RFC3339 form and is in UTC.
  
  
            Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
        deletionGracePeriodSeconds:
          description: Number of seconds allowed for this object to gracefully terminate
            before it will be removed from the system. Only set when deletionTimestamp
            is also set. May only be shortened. Read-only.
          format: int64
          type: integer
        deletionTimestamp:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
          description: 'DeletionTimestamp is RFC 3339 date and time at which this resource
            will be deleted. This field is set by the server when a graceful deletion
            is requested by the user, and is not directly settable by a client. The
            resource is expected to be deleted (no longer visible from resource lists,
            and not reachable by name) after the time in this field, once the finalizers
            list is empty. As long as the finalizers list contains items, deletion is
            blocked. Once the deletionTimestamp is set, this value may not be unset
            or be set further into the future, although it may be shortened or the resource
            may be deleted prior to this time. For example, a user may request that
            a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful
            termination signal to the containers in the pod. After that 30 seconds,
            the Kubelet will send a hard termination signal (SIGKILL) to the container
            and after cleanup, remove the pod from the API. In the presence of network
            partitions, this object may still exist after this timestamp, until an administrator
            or automated process can determine the resource is fully terminated. If
            not set, graceful deletion of the object has not been requested.
  
  
            Populated by the system when a graceful deletion is requested. Read-only.
            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
        finalizers:
          description: Must be empty before the object is deleted from the registry.
            Each entry is an identifier for the responsible component that will remove
            the entry from the list. If the deletionTimestamp of the object is non-nil,
            entries in this list can only be removed. Finalizers may be processed and
            removed in any order.  Order is NOT enforced because it introduces significant
            risk of stuck finalizers. finalizers is a shared field, any actor with permission
            can reorder it. If the finalizer list is processed in order, then this can
            lead to a situation in which the component responsible for the first finalizer
            in the list is waiting for a signal (field value, external system, or other)
            produced by a component responsible for a finalizer later in the list, resulting
            in a deadlock. Without enforced ordering finalizers are free to order amongst
            themselves and are not vulnerable to ordering changes in the list.
          items:
            type: string
          type: array
          x-kubernetes-patch-strategy: merge
        generateName:
          description: 'GenerateName is an optional prefix, used by the server, to generate
            a unique name ONLY IF the Name field has not been provided. If this field
            is used, the name returned to the client will be different than the name
            passed. This value will also be combined with a unique suffix. The provided
            value has the same validation rules as the Name field, and may be truncated
            by the length of the suffix required to make the value unique on the server.
  
  
            If this field is specified and the generated name exists, the server will
            return a 409.
  
  
            Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency'
          type: string
        generation:
          description: A sequence number representing a specific generation of the desired
            state. Populated by the system. Read-only.
          format: int64
          type: integer
        labels:
          additionalProperties:
            type: string
          description: 'Map of string keys and values that can be used to organize and
            categorize (scope and select) objects. May match selectors of replication
            controllers and services. More info: http://kubernetes.io/docs/user-guide/labels'
          type: object
        managedFields:
          description: ManagedFields maps workflow-id and version to the set of fields
            that are managed by that workflow. This is mostly for internal housekeeping,
            and users typically shouldn't need to set or understand this field. A workflow
            can be the user's name, a controller's name, or the name of a specific apply
            path like "ci-cd". The set of fields is always in the version that the workflow
            used when modifying the object.
          items:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry'
          type: array
        name:
          description: 'Name must be unique within a namespace. Is required when creating
            resources, although some resources may allow a client to request the generation
            of an appropriate name automatically. Name is primarily intended for creation
            idempotence and configuration definition. Cannot be updated. More info:
            http://kubernetes.io/docs/user-guide/identifiers#names'
          type: string
        namespace:
          description: 'Namespace defines the space within which each name must be unique.
            An empty namespace is equivalent to the "default" namespace, but "default"
            is the canonical representation. Not all objects are required to be scoped
            to a namespace - the value of this field for those objects will be empty.
  
  
            Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces'
          type: string
        ownerReferences:
          description: List of objects depended by this object. If ALL objects in the
            list have been deleted, this object will be garbage collected. If this object
            is managed by a controller, then an entry in this list will point to this
            controller, with the controller field set to true. There cannot be more
            than one managing controller.
          items:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference'
          type: array
          x-kubernetes-patch-merge-key: uid
          x-kubernetes-patch-strategy: merge
        resourceVersion:
          description: 'An opaque value that represents the internal version of this
            object that can be used by clients to determine when objects have changed.
            May be used for optimistic concurrency, change detection, and the watch
            operation on a resource or set of resources. Clients must treat these values
            as opaque and passed unmodified back to the server. They may only be valid
            for a particular resource or set of resources.
  
  
            Populated by the system. Read-only. Value must be treated as opaque by clients
            and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
          type: string
        selfLink:
          description: 'Deprecated: selfLink is a legacy read-only field that is no
            longer populated by the system.'
          type: string
        uid:
          description: 'UID is the unique in time and space value for this object. It
            is typically generated by the server on successful creation of a resource
            and is not allowed to change on PUT operations.
  
  
            Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
          type: string
      type: object
    io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference:
      description: OwnerReference contains enough information to let you identify an
        owning object. An owning object must be in the same namespace as the dependent,
        or be cluster-scoped, so there is no namespace field.
      properties:
        apiVersion:
          description: API version of the referent.
          type: string
        blockOwnerDeletion:
          description: If true, AND if the owner has the "foregroundDeletion" finalizer,
            then the owner cannot be deleted from the key-value store until this reference
            is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion
            for how the garbage collector interacts with this field and enforces the
            foreground deletion. Defaults to false. To set this field, a user needs
            "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will
            be returned.
          type: boolean
        controller:
          description: If true, this reference points to the managing controller.
          type: boolean
        kind:
          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        name:
          description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
          type: string
        uid:
          description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
          type: string
      required:
      - apiVersion
      - kind
      - name
      - uid
      type: object
      x-kubernetes-map-type: atomic
    io.k8s.apimachinery.pkg.apis.meta.v1.Patch:
      description: Patch is provided to give a concrete name and type to the Kubernetes
        PATCH request body.
      type: object
    io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions:
      description: Preconditions must be fulfilled before an operation (update, delete,
        etc.) is carried out.
      properties:
        resourceVersion:
          description: Specifies the target ResourceVersion
          type: string
        uid:
          description: Specifies the target UID.
          type: string
      type: object
    io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR:
      description: ServerAddressByClientCIDR helps the client to determine the server
        address that they should use, depending on the clientCIDR that they match.
      properties:
        clientCIDR:
          description: The CIDR with which clients can match their IP to figure out
            the server address that they should use.
          type: string
        serverAddress:
          description: Address of this server, suitable for a client that matches the
            above CIDR. This can be a hostname, hostname:port, IP or IP:port.
          type: string
      required:
      - clientCIDR
      - serverAddress
      type: object
    io.k8s.apimachinery.pkg.apis.meta.v1.Status:
      description: Status is a return value for calls that don't return other objects.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest internal
            value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        code:
          description: Suggested HTTP return code for this status, 0 if not set.
          format: int32
          type: integer
        details:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails'
          description: Extended data associated with the reason.  Each reason may define
            its own extended details. This field is optional and the data returned is
            not guaranteed to conform to any schema except that defined by the reason
            type.
        kind:
          description: 'Kind is a string value representing the REST resource this object
            represents. Servers may infer this from the endpoint the client submits
            requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        message:
          description: A human-readable description of the status of this operation.
          type: string
        metadata:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
          description: 'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        reason:
          description: A machine-readable description of why this operation is in the
            "Failure" status. If this value is empty there is no information available.
            A Reason clarifies an HTTP status code but does not override it.
          type: string
        status:
          description: 'Status of the operation. One of: "Success" or "Failure". More
            info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
          type: string
      type: object
      x-kubernetes-group-version-kind:
      - group: ''
        kind: Status
        version: v1
    io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause:
      description: StatusCause provides more information about an api.Status failure,
        including cases when multiple errors are encountered.
      properties:
        field:
          description: "The field of the resource that has caused this error, as named\
            \ by its JSON serialization. May include dot and postfix notation for nested\
            \ attributes. Arrays are zero-indexed.  Fields may appear more than once\
            \ in an array of causes due to fields having multiple errors. Optional.\n\
            \nExamples:\n  \"name\" - the field \"name\" on the current resource\n \
            \ \"items[0].name\" - the field \"name\" on the first array entry in \"\
            items\""
          type: string
        message:
          description: A human-readable description of the cause of the error.  This
            field may be presented as-is to a reader.
          type: string
        reason:
          description: A machine-readable description of the cause of the error. If
            this value is empty there is no information available.
          type: string
      type: object
    io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails:
      description: StatusDetails is a set of additional properties that MAY be set by
        the server to provide additional information about a response. The Reason field
        of a Status object defines what attributes will be set. Clients must ignore
        fields that do not match the defined type of each attribute, and should assume
        that any attribute may be empty, invalid, or under defined.
      properties:
        causes:
          description: The Causes array includes more details associated with the StatusReason
            failure. Not all StatusReasons may provide detailed causes.
          items:
            $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause'
          type: array
        group:
          description: The group attribute of the resource associated with the status
            StatusReason.
          type: string
        kind:
          description: 'The kind attribute of the resource associated with the status
            StatusReason. On some operations may differ from the requested resource
            Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        name:
          description: The name attribute of the resource associated with the status
            StatusReason (when there is a single name which can be described).
          type: string
        retryAfterSeconds:
          description: If specified, the time in seconds before the operation should
            be retried. Some errors may indicate the client must take an alternate action
            - for those errors this field may indicate how long to wait before taking
            the alternate action.
          format: int32
          type: integer
        uid:
          description: 'UID of the resource. (when there is a single resource which
            can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
          type: string
      type: object
    io.k8s.apimachinery.pkg.apis.meta.v1.Time:
      description: Time is a wrapper around time.Time which supports correct marshaling
        to YAML and JSON.  Wrappers are provided for many of the factory methods that
        the time package offers.
      format: date-time
      type: string
    io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent:
      description: Event represents a single event to a watched resource.
      properties:
        object:
          $ref: '#/components/schemas/io.k8s.apimachinery.pkg.runtime.RawExtension'
          description: "Object is:\n * If Type is Added or Modified: the new state of\
            \ the object.\n * If Type is Deleted: the state of the object immediately\
            \ before deletion.\n * If Type is Error: *Status is recommended; other types\
            \ may make sense\n   depending on context."
        type:
          type: string
      required:
      - type
      - object
      type: object
      x-kubernetes-group-version-kind:
      - group: ''
        kind: WatchEvent
        version: v1
      - group: admission.k8s.io
        kind: WatchEvent
        version: v1
      - group: admission.k8s.io
        kind: WatchEvent
        version: v1beta1
      - group: admissionregistration.k8s.io
        kind: WatchEvent
        version: v1
      - group: admissionregistration.k8s.io
        kind: WatchEvent
        version: v1beta1
      - group: apiextensions.k8s.io
        kind: WatchEvent
        version: v1
      - group: apiextensions.k8s.io
        kind: WatchEvent
        version: v1beta1
      - group: apiregistration.k8s.io
        kind: WatchEvent
        version: v1
      - group: apiregistration.k8s.io
        kind: WatchEvent
        version: v1beta1
      - group: apps
        kind: WatchEvent
        version: v1
      - group: apps
        kind: WatchEvent
        version: v1beta1
      - group: apps
        kind: WatchEvent
        version: v1beta2
      - group: authentication.k8s.io
        kind: WatchEvent
        version: v1
      - group: authentication.k8s.io
        kind: WatchEvent
        version: v1beta1
      - group: authorization.k8s.io
        kind: WatchEvent
        version: v1
      - group: authorization.k8s.io
        kind: WatchEvent
        version: v1beta1
      - group: autoscaling
        kind: WatchEvent
        version: v1
      - group: autoscaling
        kind: WatchEvent
        version: v2
      - group: autoscaling
        kind: WatchEvent
        version: v2beta1
      - group: autoscaling
        kind: WatchEvent
        version: v2beta2
      - group: batch
        kind: WatchEvent
        version: v1
      - group: batch
        kind: WatchEvent
        version: v1beta1
      - group: certificates.k8s.io
        kind: WatchEvent
        version: v1
      - group: certificates.k8s.io
        kind: WatchEvent
        version: v1beta1
      - group: coordination.k8s.io
        kind: WatchEvent
        version: v1
      - group: coordination.k8s.io
        kind: WatchEvent
        version: v1beta1
      - group: discovery.k8s.io
        kind: WatchEvent
        version: v1
      - group: discovery.k8s.io
        kind: WatchEvent
        version: v1beta1
      - group: events.k8s.io
        kind: WatchEvent
        version: v1
      - group: events.k8s.io
        kind: WatchEvent
        version: v1beta1
      - group: extensions
        kind: WatchEvent
        version: v1beta1
      - group: flowcontrol.apiserver.k8s.io
        kind: WatchEvent
        version: v1alpha1
      - group: flowcontrol.apiserver.k8s.io
        kind: WatchEvent
        version: v1beta1
      - group: flowcontrol.apiserver.k8s.io
        kind: WatchEvent
        version: v1beta2
      - group: imagepolicy.k8s.io
        kind: WatchEvent
        version: v1alpha1
      - group: internal.apiserver.k8s.io
        kind: WatchEvent
        version: v1alpha1
      - group: networking.k8s.io
        kind: WatchEvent
        version: v1
      - group: networking.k8s.io
        kind: WatchEvent
        version: v1beta1
      - group: node.k8s.io
        kind: WatchEvent
        version: v1
      - group: node.k8s.io
        kind: WatchEvent
        version: v1alpha1
      - group: node.k8s.io
        kind: WatchEvent
        version: v1beta1
      - group: policy
        kind: WatchEvent
        version: v1
      - group: policy
        kind: WatchEvent
        version: v1beta1
      - group: rbac.authorization.k8s.io
        kind: WatchEvent
        version: v1
      - group: rbac.authorization.k8s.io
        kind: WatchEvent
        version: v1alpha1
      - group: rbac.authorization.k8s.io
        kind: WatchEvent
        version: v1beta1
      - group: scheduling.k8s.io
        kind: WatchEvent
        version: v1
      - group: scheduling.k8s.io
        kind: WatchEvent
        version: v1alpha1
      - group: scheduling.k8s.io
        kind: WatchEvent
        version: v1beta1
      - group: storage.k8s.io
        kind: WatchEvent
        version: v1
      - group: storage.k8s.io
        kind: WatchEvent
        version: v1alpha1
      - group: storage.k8s.io
        kind: WatchEvent
        version: v1beta1
    io.k8s.apimachinery.pkg.runtime.RawExtension:
      description: "RawExtension is used to hold extensions in external versions.\n\n\
        To use this, make a field which has RawExtension as its type in your external,\
        \ versioned struct, and Object in your internal struct. You also need to register\
        \ your various plugin types.\n\n// Internal package: type MyAPIObject struct\
        \ {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"\
        myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n\
        }\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\"\
        ,inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA\
        \ struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON\
        \ will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\"\
        :\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\"\
        ,\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the\
        \ serialized data into your external MyAPIObject. That causes the raw JSON to\
        \ be stored, but not unpacked. The next step is to copy (using pkg/conversion)\
        \ into the internal struct. The runtime package's DefaultScheme has conversion\
        \ functions installed which will unpack the JSON stored in RawExtension, turning\
        \ it into the correct object type, and storing it in the Object. (TODO: In the\
        \ case where the object is of an unknown type, a runtime.Unknown object will\
        \ be created and stored.)"
      type: object
    io.k8s.apimachinery.pkg.util.intstr.IntOrString:
      description: IntOrString is a type that can hold an int32 or a string.  When used
        in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner
        type.  This allows you to have, for example, a JSON field that can accept a
        name or number.
      format: int-or-string
      type: string
    io.k8s.apimachinery.pkg.version.Info:
      description: Info contains versioning information. how we'll want to distribute
        that information.
      properties:
        buildDate:
          type: string
        compiler:
          type: string
        gitCommit:
          type: string
        gitTreeState:
          type: string
        gitVersion:
          type: string
        goVersion:
          type: string
        major:
          type: string
        minor:
          type: string
        platform:
          type: string
      required:
      - major
      - minor
      - gitVersion
      - gitCommit
      - gitTreeState
      - buildDate
      - goVersion
      - compiler
      - platform
      type: object
    kraud.FeedList:
      type: array
      items:
        $ref: '#/components/schemas/kraud.Feed'

    kraud.Feed:
      type: object
      required:
        - id
        - name
        - created_at
        - source_url
        - icon_url
      properties:
        id:
          type: string
        name:
          type: string
        created_at:
          type: string
          format: date-time
        icon_url:
          type: string
        apps:
          type: array
          items:
            $ref: '#/components/schemas/kraud.AppOverview'
    
    kraud.CreateFeed:
      type: object
      required:
        - name
        - icon_url
      properties:
        name:
          type: string
        icon_url:
          type: string

    kraud.AppOverview:
      type: object
      required:
        - id
        - feed_id
        - name
        - label
        - version
        - description
        - created_at
      properties:
        id:
          type: string
        feed_id:
          type: string
        version:
          type: integer
          description: incremented version number
        changelog:
          type: string
          description: version changelog
        name:
          type: string
          description: name of the app
        label:
          type: string
          description: label, human readable name of the app
        description:
          type: string
          description: description of the app
        post_launch:
          type: string
          description: post launch description
        created_at:
          type: string
          format: date-time
        icon_url:
          type: string
          description: url to the app icon
        ext_url:
          type: string
          description: extension url if any
        config:
          type: object
          description: app configuration variables
          additionalProperties:
            $ref: '#/components/schemas/kraud.AppTemplateConfig'
    
    kraud.AppVersion:
      type: object
      required:
        - id
        - version
        - changelog
        - created_at
      properties:
        id:
          type: string
        version:
          type: integer
          description: incremented version number
        changelog:
          type: string
          description: version changelog
        created_at:
          type: string
          format: date-time

    kraud.AppVersionList:
      type: array
      items:
        $ref: '#/components/schemas/kraud.AppVersion'
       
    kraud.AppTemplateConfig:
      type: object
      required:
      - kind
      - label
      - description
      - default
      - required
      properties:
        kind:
          type: string
        label:
          type: string
        description:
          type: string
        default: 
          type: string
        required:
          type: boolean
      additionalProperties: true

    kraud.LaunchSettings:
      type: object
      description: LaunchSettings is the settings for launching an app.
      required:
        - project_name
        - config
      properties:
        project_name:
          type: string
          description: The name of the project to launch the app in.
        config:
          additionalProperties:
            type: string

    kraud.LaunchAppResponse:
      type: object
      required:
        - launch_id
      properties:
        launch_id:
          type: string
    
    kraud.WSLaunchLog:
      description: regular log lines
      type: object
      required:
      - log
      properties:
        log:
          type: string

    kraud.WSLaunchMeta:
      description: metadata
      type: object
      properties:
        deployment_aids:
          type: array
          items:
            type: string
        error:
          type: string
    Kraud.CertificateGenerateResponse:
      type: object
      required:
        - cert
        - key
        - ca
      properties:
        cert:
          type: string
        key:
          type: string
        ca:
          type: string
    kraud.SessionInfo:
      type: object
      properties:
        tenants:
          type: array
          items:
            $ref: '#/components/schemas/kraud.SessionTenantInfo'
        user:
          $ref: '#/components/schemas/kraud.SessionUserInfo'
      required:
        - tenants
        - user
    
    kraud.SessionTenantInfo:
      type: object
      properties:
        org:
          type: string
        tenant_id:
          type: string
        user_id:
          type: string
        tel_verified:
          type: boolean
      required:
        - org
        - tenant_id
        - user_id
        - tel_verified

    kraud.SessionUserInfo:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
        user_id:
          type: string
        idp_id:
          type: string
        avatar_url:
          type: string
      required:
        - email
        - name
        - user_id
        - idp_id
        - avatar_url

    kr.CradleState:
      type: object
      properties:
        Pod:
          type: object
          properties:
            CradleStage:
              type: integer
              format: uint32
            Error:
              type: string
            ExitCode:
              type: integer
            IP6:
              type: string
            LastLog:
              type: string
              format: binary
        V:
          description: Vpc View
          type: object

    kr.VmmContainerReport:
      type: object
      properties:
        State:
          type: integer
          format: uint32
        Error:
          type: string
        ExitCode:
          type: integer
        Log:
          type: string
paths:

  /containers/json:
    get:
      summary: "List containers"
      description: |
        Returns a list of containers. For details on the format, see the
        [inspect endpoint](#operation/ContainerInspect).

        Note that it uses a different, smaller representation of a container
        than inspecting a single container. For example, the list of linked
        containers is not propagated .
      operationId: "DockerContainerList"
      parameters:
        - name: "all"
          in: "query"
          description: |
            Return all containers. By default, only running containers are shown.
          schema:
            type: "boolean"
          default: false
        - name: "limit"
          in: "query"
          description: |
            Return this number of most recently created containers, including
            non-running ones.
          schema:
            type: "integer"
        - name: "size"
          in: "query"
          description: |
            Return the size of container as fields `SizeRw` and `SizeRootFs`.
          schema:
            type: "boolean"
          default: false
        - name: "filters"
          in: "query"
          description: |
            Filters to process on the container list, encoded as JSON (a
            `map[string][]string`). For example, `{"status": ["paused"]}` will
            only return paused containers.

            Available filters:

            - `ancestor`=(`<image-name>[:<tag>]`, `<image id>`, or `<image@digest>`)
            - `before`=(`<container id>` or `<container name>`)
            - `expose`=(`<port>[/<proto>]`|`<startport-endport>/[<proto>]`)
            - `exited=<int>` containers with exit code of `<int>`
            - `health`=(`starting`|`healthy`|`unhealthy`|`none`)
            - `id=<ID>` a container's ID
            - `isolation=`(`default`|`process`|`hyperv`) (Windows daemon only)
            - `is-task=`(`true`|`false`)
            - `label=key` or `label="key=value"` of a container label
            - `name=<name>` a container's name
            - `network`=(`<network id>` or `<network name>`)
            - `publish`=(`<port>[/<proto>]`|`<startport-endport>/[<proto>]`)
            - `since`=(`<container id>` or `<container name>`)
            - `status=`(`created`|`restarting`|`running`|`removing`|`paused`|`exited`|`dead`)
            - `volume`=(`<volume name>` or `<mount point destination>`)
          schema:
            type: "string"
      responses:
        200:
          description: "no error"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ContainerSummary"
          examples:
            application/json:
              - Id: "8dfafdbc3a40"
                Names:
                  - "/boring_feynman"
                Image: "ubuntu:latest"
                ImageID: "d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82"
                Command: "echo 1"
                Created: 1367854155
                State: "Exited"
                Status: "Exit 0"
                Ports:
                  - PrivatePort: 2222
                    PublicPort: 3333
                    Type: "tcp"
                Labels:
                  com.example.vendor: "Acme"
                  com.example.license: "GPL"
                  com.example.version: "1.0"
                SizeRw: 12288
                SizeRootFs: 0
                HostConfig:
                  NetworkMode: "default"
                NetworkSettings:
                  Networks:
                    bridge:
                      NetworkID: "7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812"
                      EndpointID: "2cdc4edb1ded3631c81f57966563e5c8525b81121bb3706a9a9a3ae102711f3f"
                      Gateway: "172.17.0.1"
                      IPAddress: "172.17.0.2"
                      IPPrefixLen: 16
                      IPv6Gateway: ""
                      GlobalIPv6Address: ""
                      GlobalIPv6PrefixLen: 0
                      MacAddress: "02:42:ac:11:00:02"
                Mounts:
                  - Name: "fac362...80535"
                    Source: "/data"
                    Destination: "/data"
                    Driver: "local"
                    Mode: "ro,Z"
                    RW: false
                    Propagation: ""
              - Id: "9cd87474be90"
                Names:
                  - "/coolName"
                Image: "ubuntu:latest"
                ImageID: "d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82"
                Command: "echo 222222"
                Created: 1367854155
                State: "Exited"
                Status: "Exit 0"
                Ports: []
                Labels: {}
                SizeRw: 12288
                SizeRootFs: 0
                HostConfig:
                  NetworkMode: "default"
                NetworkSettings:
                  Networks:
                    bridge:
                      NetworkID: "7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812"
                      EndpointID: "88eaed7b37b38c2a3f0c4bc796494fdf51b270c2d22656412a2ca5d559a64d7a"
                      Gateway: "172.17.0.1"
                      IPAddress: "172.17.0.8"
                      IPPrefixLen: 16
                      IPv6Gateway: ""
                      GlobalIPv6Address: ""
                      GlobalIPv6PrefixLen: 0
                      MacAddress: "02:42:ac:11:00:08"
                Mounts: []
              - Id: "3176a2479c92"
                Names:
                  - "/sleepy_dog"
                Image: "ubuntu:latest"
                ImageID: "d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82"
                Command: "echo 3333333333333333"
                Created: 1367854154
                State: "Exited"
                Status: "Exit 0"
                Ports: []
                Labels: {}
                SizeRw: 12288
                SizeRootFs: 0
                HostConfig:
                  NetworkMode: "default"
                NetworkSettings:
                  Networks:
                    bridge:
                      NetworkID: "7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812"
                      EndpointID: "8b27c041c30326d59cd6e6f510d4f8d1d570a228466f956edf7815508f78e30d"
                      Gateway: "172.17.0.1"
                      IPAddress: "172.17.0.6"
                      IPPrefixLen: 16
                      IPv6Gateway: ""
                      GlobalIPv6Address: ""
                      GlobalIPv6PrefixLen: 0
                      MacAddress: "02:42:ac:11:00:06"
                Mounts: []
              - Id: "4cb07b47f9fb"
                Names:
                  - "/running_cat"
                Image: "ubuntu:latest"
                ImageID: "d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82"
                Command: "echo 444444444444444444444444444444444"
                Created: 1367854152
                State: "Exited"
                Status: "Exit 0"
                Ports: []
                Labels: {}
                SizeRw: 12288
                SizeRootFs: 0
                HostConfig:
                  NetworkMode: "default"
                NetworkSettings:
                  Networks:
                    bridge:
                      NetworkID: "7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812"
                      EndpointID: "d91c7b2f0644403d7ef3095985ea0e2370325cd2332ff3a3225c4247328e66e9"
                      Gateway: "172.17.0.1"
                      IPAddress: "172.17.0.5"
                      IPPrefixLen: 16
                      IPv6Gateway: ""
                      GlobalIPv6Address: ""
                      GlobalIPv6PrefixLen: 0
                      MacAddress: "02:42:ac:11:00:05"
                Mounts: []
        400:
          description: "bad parameter"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      tags: ["Container"]
  /containers/create:
    post:
      summary: "Create a container"
      operationId: "DockerContainerCreate"
      consumes:
        - "application/json"
        - "application/octet-stream"
      produces:
        - "application/json"
      parameters:
        - name: "name"
          in: "query"
          description: |
            Assign the specified name to the container. Must match
            `/?[a-zA-Z0-9][a-zA-Z0-9_.-]+`.
          schema:
            type: "string"
          pattern: "^/?[a-zA-Z0-9][a-zA-Z0-9_.-]+$"
      requestBody:
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ContainerConfig"
                  - type: "object"
                    properties:
                      HostConfig:
                        $ref: "#/components/schemas/HostConfig"
                      NetworkingConfig:
                        $ref: "#/components/schemas/NetworkingConfig"
            example:
              Hostname: ""
              Domainname: ""
              User: ""
              AttachStdin: false
              AttachStdout: true
              AttachStderr: true
              Tty: false
              OpenStdin: false
              StdinOnce: false
              Env:
                - "FOO=bar"
                - "BAZ=quux"
              Cmd:
                - "date"
              Entrypoint: ""
              Image: "ubuntu"
              Labels:
                com.example.vendor: "Acme"
                com.example.license: "GPL"
                com.example.version: "1.0"
              Volumes:
                /volumes/data: {}
              WorkingDir: ""
              NetworkDisabled: false
              MacAddress: "12:34:56:78:9a:bc"
              ExposedPorts:
                22/tcp: {}
              StopSignal: "SIGTERM"
              StopTimeout: 10
              HostConfig:
                Binds:
                  - "/tmp:/tmp"
                Links:
                  - "redis3:redis"
                Memory: 0
                MemorySwap: 0
                MemoryReservation: 0
                KernelMemory: 0
                NanoCpus: 500000
                CpuPercent: 80
                CpuShares: 512
                CpuPeriod: 100000
                CpuRealtimePeriod: 1000000
                CpuRealtimeRuntime: 10000
                CpuQuota: 50000
                CpusetCpus: "0,1"
                CpusetMems: "0,1"
                MaximumIOps: 0
                MaximumIOBps: 0
                BlkioWeight: 300
                BlkioWeightDevice:
                  - {}
                BlkioDeviceReadBps:
                  - {}
                BlkioDeviceReadIOps:
                  - {}
                BlkioDeviceWriteBps:
                  - {}
                BlkioDeviceWriteIOps:
                  - {}
                DeviceRequests:
                  - Driver: "nvidia"
                    Count: -1
                    DeviceIDs": ["0", "1", "GPU-fef8089b-4820-abfc-e83e-94318197576e"]
                    Capabilities: [["gpu", "nvidia", "compute"]]
                    Options:
                      property1: "string"
                      property2: "string"
                MemorySwappiness: 60
                OomKillDisable: false
                OomScoreAdj: 500
                PidMode: ""
                PidsLimit: 0
                PortBindings:
                  22/tcp:
                    - HostPort: "11022"
                PublishAllPorts: false
                Privileged: false
                ReadonlyRootfs: false
                Dns:
                  - "8.8.8.8"
                DnsOptions:
                  - ""
                DnsSearch:
                  - ""
                VolumesFrom:
                  - "parent"
                  - "other:ro"
                CapAdd:
                  - "NET_ADMIN"
                CapDrop:
                  - "MKNOD"
                GroupAdd:
                  - "newgroup"
                RestartPolicy:
                  Name: ""
                  MaximumRetryCount: 0
                AutoRemove: true
                NetworkMode: "bridge"
                Devices: []
                Ulimits:
                  - {}
                LogConfig:
                  Type: "json-file"
                  Config: {}
                SecurityOpt: []
                StorageOpt: {}
                CgroupParent: ""
                VolumeDriver: ""
                ShmSize: 67108864
              NetworkingConfig:
                EndpointsConfig:
                  isolated_nw:
                    IPAMConfig:
                      IPv4Address: "172.20.30.33"
                      IPv6Address: "2001:db8:abcd::3033"
                      LinkLocalIPs:
                        - "169.254.34.68"
                        - "fe80::3468"
                    Links:
                      - "container_1"
                      - "container_2"
                    Aliases:
                      - "server_x"
                      - "server_y"

          required: true
      responses:
        201:
          description: "Container created successfully"
          schema:
            schema:
              type: "object"
            title: "ContainerCreateResponse"
            description: "OK response to ContainerCreate operation"
            required: [Id, Warnings]
            properties:
              Id:
                description: "The ID of the created container"
                schema:
                  type: "string"
                x-nullable: false
              Warnings:
                description: "Warnings encountered when creating the container"
                schema:
                  type: "array"
                x-nullable: false
                items:
                  schema:
                    type: "string"
          examples:
            application/json:
              Id: "e90e34656806"
              Warnings: []
        400:
          description: "bad parameter"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        404:
          description: "no such image"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            application/json:
              message: "No such image: c2ada9df5af8"
        409:
          description: "conflict"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      tags: ["Container"]



  /containers/{id}/json:
    get:
      summary: "Inspect a container"
      description: "Return low-level information about a container."
      operationId: "DockerContainerInspect"
      responses:
        200:
          description: "no error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContainerInspectResponse"
        404:
          description: "no such container"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "ID or name of the container"
          schema:
            type: "string"
        - name: "size"
          in: "query"
          schema:
            type: "boolean"
          default: false
          description: "Return the size of container as fields `SizeRw` and `SizeRootFs`"
      tags: ["Container"]

  /containers/{id}/top:
    get:
      summary: "List processes running inside a container"
      description: |
        On Unix systems, this is done by running the `ps` command. This endpoint
        is not supported on Windows.
      operationId: "DockerContainerTop"
      responses:
        200:
          description: "no error"
          schema:
            schema:
              type: "object"
            title: "ContainerTopResponse"
            description: "OK response to ContainerTop operation"
            properties:
              Titles:
                description: "The ps column titles"
                schema:
                  type: "array"
                items:
                  schema:
                    type: "string"
              Processes:
                description: |
                  Each process running in the container, where each is process
                  is an array of values corresponding to the titles.
                schema:
                  type: "array"
                items:
                  schema:
                    type: "array"
                  items:
                    schema:
                      type: "string"
          examples:
            application/json:
              Titles:
                - "UID"
                - "PID"
                - "PPID"
                - "C"
                - "STIME"
                - "TTY"
                - "TIME"
                - "CMD"
              Processes:
                -
                  - "root"
                  - "13642"
                  - "882"
                  - "0"
                  - "17:03"
                  - "pts/0"
                  - "00:00:00"
                  - "/bin/bash"
                -
                  - "root"
                  - "13735"
                  - "13642"
                  - "0"
                  - "17:06"
                  - "pts/0"
                  - "00:00:00"
                  - "sleep 10"
        404:
          description: "no such container"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "ID or name of the container"
          schema:
            type: "string"
        - name: "ps_args"
          in: "query"
          description: "The arguments to pass to `ps`. For example, `aux`"
          schema:
            type: "string"
          default: "-ef"
      tags: ["Container"]

  /containers/{id}/logs:
    get:
      summary: "Get container logs"
      description: |
        Get `stdout` and `stderr` logs from a container.

        Note: This endpoint works only for containers with the `json-file` or
        `journald` logging driver.
      operationId: "DockerContainerLogs"
      responses:
        200:
          description: |
            logs returned as a stream in response body.
            For the stream format, [see the documentation for the attach endpoint](#operation/ContainerAttach).
            Note that unlike the attach endpoint, the logs endpoint does not
            upgrade the connection and does not set Content-Type.
          schema:
            schema:
              type: "string"
            format: "binary"
        404:
          description: "no such container"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "ID or name of the container"
          schema:
            type: "string"
        - name: "follow"
          in: "query"
          description: "Keep connection after returning logs."
          schema:
            type: "boolean"
          default: false
        - name: "stdout"
          in: "query"
          description: "Return logs from `stdout`"
          schema:
            type: "boolean"
          default: false
        - name: "stderr"
          in: "query"
          description: "Return logs from `stderr`"
          schema:
            type: "boolean"
          default: false
        - name: "since"
          in: "query"
          description: "Only return logs since this time, as a UNIX timestamp"
          schema:
            type: "integer"
          default: 0
        - name: "until"
          in: "query"
          description: "Only return logs before this time, as a UNIX timestamp"
          schema:
            type: "integer"
          default: 0
        - name: "timestamps"
          in: "query"
          description: "Add timestamps to every log line"
          schema:
            type: "boolean"
          default: false
        - name: "tail"
          in: "query"
          description: |
            Only return this number of log lines from the end of the logs.
            Specify as an integer or `all` to output all log lines.
          schema:
            type: "string"
          default: "all"
      tags: ["Container"]

  /containers/{id}/changes:
    get:
      summary: "Get changes on a container’s filesystem"
      description: |
        Returns which files in a container's filesystem have been added, deleted,
        or modified. The `Kind` of modification can be one of:

        - `0`: Modified
        - `1`: Added
        - `2`: Deleted
      operationId: "DockerContainerChanges"
      produces: ["application/json"]
      responses:
        200:
          description: "The list of changes"
          schema:
            schema:
              type: "array"
            items:
              schema:
                type: "object"
              x-go-name: "ContainerChangeResponseItem"
              title: "ContainerChangeResponseItem"
              description: "change item in response to ContainerChanges operation"
              required: [Path, Kind]
              properties:
                Path:
                  description: "Path to file that has changed"
                  schema:
                    type: "string"
                  x-nullable: false
                Kind:
                  description: "Kind of change"
                  schema:
                    type: "integer"
                  format: "uint8"
                  enum: [0, 1, 2]
                  x-nullable: false
          examples:
            application/json:
              - Path: "/dev"
                Kind: 0
              - Path: "/dev/kmsg"
                Kind: 1
              - Path: "/test"
                Kind: 1
        404:
          description: "no such container"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "ID or name of the container"
          schema:
            type: "string"
      tags: ["Container"]

  /containers/{id}/export:
    get:
      summary: "Export a container"
      description: "Export the contents of a container as a tarball."
      operationId: "DockerContainerExport"
      produces:
        - "application/octet-stream"
      responses:
        200:
          description: "no error"
        404:
          description: "no such container"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "ID or name of the container"
          schema:
            type: "string"
      tags: ["Container"]

  /containers/{id}/stats:
    get:
      summary: "Get container stats based on resource usage"
      description: |
        This endpoint returns a live stream of a container’s resource usage
        statistics.

        The `precpu_stats` is the CPU statistic of the *previous* read, and is
        used to calculate the CPU usage percentage. It is not an exact copy
        of the `cpu_stats` field.

        If either `precpu_stats.online_cpus` or `cpu_stats.online_cpus` is
        nil then for compatibility with older daemons the length of the
        corresponding `cpu_usage.percpu_usage` array should be used.

        On a cgroup v2 host, the following fields are not set
        * `blkio_stats`: all fields other than `io_service_bytes_recursive`
        * `cpu_stats`: `cpu_usage.percpu_usage`
        * `memory_stats`: `max_usage` and `failcnt`
        Also, `memory_stats.stats` fields are incompatible with cgroup v1.

        To calculate the values shown by the `stats` command of the docker cli tool
        the following formulas can be used:
        * used_memory = `memory_stats.usage - memory_stats.stats.cache`
        * available_memory = `memory_stats.limit`
        * Memory usage % = `(used_memory / available_memory) * 100.0`
        * cpu_delta = `cpu_stats.cpu_usage.total_usage - precpu_stats.cpu_usage.total_usage`
        * system_cpu_delta = `cpu_stats.system_cpu_usage - precpu_stats.system_cpu_usage`
        * number_cpus = `lenght(cpu_stats.cpu_usage.percpu_usage)` or `cpu_stats.online_cpus`
        * CPU usage % = `(cpu_delta / system_cpu_delta) * number_cpus * 100.0`
      operationId: "DockerContainerStats"
      produces: ["application/json"]
      responses:
        200:
          description: "no error"
          schema:
            schema:
              type: "object"
          examples:
            application/json:
              read: "2015-01-08T22:57:31.547920715Z"
              pids_stats:
                current: 3
              networks:
                eth0:
                  rx_bytes: 5338
                  rx_dropped: 0
                  rx_errors: 0
                  rx_packets: 36
                  tx_bytes: 648
                  tx_dropped: 0
                  tx_errors: 0
                  tx_packets: 8
                eth5:
                  rx_bytes: 4641
                  rx_dropped: 0
                  rx_errors: 0
                  rx_packets: 26
                  tx_bytes: 690
                  tx_dropped: 0
                  tx_errors: 0
                  tx_packets: 9
              memory_stats:
                stats:
                  total_pgmajfault: 0
                  cache: 0
                  mapped_file: 0
                  total_inactive_file: 0
                  pgpgout: 414
                  rss: 6537216
                  total_mapped_file: 0
                  writeback: 0
                  unevictable: 0
                  pgpgin: 477
                  total_unevictable: 0
                  pgmajfault: 0
                  total_rss: 6537216
                  total_rss_huge: 6291456
                  total_writeback: 0
                  total_inactive_anon: 0
                  rss_huge: 6291456
                  hierarchical_memory_limit: 67108864
                  total_pgfault: 964
                  total_active_file: 0
                  active_anon: 6537216
                  total_active_anon: 6537216
                  total_pgpgout: 414
                  total_cache: 0
                  inactive_anon: 0
                  active_file: 0
                  pgfault: 964
                  inactive_file: 0
                  total_pgpgin: 477
                max_usage: 6651904
                usage: 6537216
                failcnt: 0
                limit: 67108864
              blkio_stats: {}
              cpu_stats:
                cpu_usage:
                  percpu_usage:
                    - 8646879
                    - 24472255
                    - 36438778
                    - 30657443
                  usage_in_usermode: 50000000
                  total_usage: 100215355
                  usage_in_kernelmode: 30000000
                system_cpu_usage: 739306590000000
                online_cpus: 4
                throttling_data:
                  periods: 0
                  throttled_periods: 0
                  throttled_time: 0
              precpu_stats:
                cpu_usage:
                  percpu_usage:
                    - 8646879
                    - 24350896
                    - 36438778
                    - 30657443
                  usage_in_usermode: 50000000
                  total_usage: 100093996
                  usage_in_kernelmode: 30000000
                system_cpu_usage: 9492140000000
                online_cpus: 4
                throttling_data:
                  periods: 0
                  throttled_periods: 0
                  throttled_time: 0
        404:
          description: "no such container"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "ID or name of the container"
          schema:
            type: "string"
        - name: "stream"
          in: "query"
          description: |
            Stream the output. If false, the stats will be output once and then
            it will disconnect.
          schema:
            type: "boolean"
          default: true
        - name: "one-shot"
          in: "query"
          description: |
            Only get a single stat instead of waiting for 2 cycles. Must be used
            with `stream=false`.
          schema:
            type: "boolean"
          default: false
      tags: ["Container"]

  /containers/{id}/resize:
    post:
      summary: "Resize a container TTY"
      description: "Resize the TTY for a container."
      operationId: "DockerContainerResize"
      consumes:
        - "application/octet-stream"
      produces:
        - "text/plain"
      responses:
        200:
          description: "no error"
        404:
          description: "no such container"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "cannot resize container"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "ID or name of the container"
          schema:
            type: "string"
        - name: "h"
          in: "query"
          description: "Height of the TTY session in characters"
          schema:
            type: "integer"
        - name: "w"
          in: "query"
          description: "Width of the TTY session in characters"
          schema:
            type: "integer"
      tags: ["Container"]

  /containers/{id}/start:
    post:
      summary: "Start a container"
      operationId: "DockerContainerStart"
      responses:
        204:
          description: "no error"
        304:
          description: "container already started"
        404:
          description: "no such container"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "ID or name of the container"
          schema:
            type: "string"
        - name: "detachKeys"
          in: "query"
          description: |
            Override the key sequence for detaching a container. Format is a
            single character `[a-Z]` or `ctrl-<value>` where `<value>` is one
            of: `a-z`, `@`, `^`, `[`, `,` or `_`.
          schema:
            type: "string"
      tags: ["Container"]

  /containers/{id}/stop:
    post:
      summary: "Stop a container"
      operationId: "DockerContainerStop"
      responses:
        204:
          description: "no error"
        304:
          description: "container already stopped"
        404:
          description: "no such container"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "ID or name of the container"
          schema:
            type: "string"
        - name: "t"
          in: "query"
          description: "Number of seconds to wait before killing the container"
          schema:
            type: "integer"
      tags: ["Container"]

  /containers/{id}/restart:
    post:
      summary: "Restart a container"
      operationId: "DockerContainerRestart"
      responses:
        204:
          description: "no error"
        404:
          description: "no such container"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "ID or name of the container"
          schema:
            type: "string"
        - name: "t"
          in: "query"
          description: "Number of seconds to wait before killing the container"
          schema:
            type: "integer"
      tags: ["Container"]

  /containers/{id}/kill:
    post:
      summary: "Kill a container"
      description: |
        Send a POSIX signal to a container, defaulting to killing to the
        container.
      operationId: "DockerContainerKill"
      responses:
        204:
          description: "no error"
        404:
          description: "no such container"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        409:
          description: "container is not running"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            application/json:
              message: "Container d37cde0fe4ad63c3a7252023b2f9800282894247d145cb5933ddf6e52cc03a28 is not running"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "ID or name of the container"
          schema:
            type: "string"
        - name: "signal"
          in: "query"
          description: "Signal to send to the container as an integer or string (e.g. `SIGINT`)"
          schema:
            type: "string"
          default: "SIGKILL"
      tags: ["Container"]

  /containers/{id}/update:
    post:
      summary: "Update a container"
      description: |
        Change various configuration options of a container without having to
        recreate it.
      operationId: "DockerContainerUpdate"
      consumes: ["application/json"]
      produces: ["application/json"]
      responses:
        200:
          description: "The container has been updated."
          schema:
            schema:
              type: "object"
            title: "ContainerUpdateResponse"
            description: "OK response to ContainerUpdate operation"
            properties:
              Warnings:
                schema:
                  type: "array"
                items:
                  schema:
                    type: "string"
        404:
          description: "no such container"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "ID or name of the container"
          schema:
            type: "string"
        - name: "update"
          in: "body"
          required: true
          schema:
            allOf:
              - $ref: "#/components/schemas/Resources"
              - type: "object"
                properties:
                  RestartPolicy:
                    $ref: "#/components/schemas/RestartPolicy"
            example:
              BlkioWeight: 300
              CpuShares: 512
              CpuPeriod: 100000
              CpuQuota: 50000
              CpuRealtimePeriod: 1000000
              CpuRealtimeRuntime: 10000
              CpusetCpus: "0,1"
              CpusetMems: "0"
              Memory: 314572800
              MemorySwap: 514288000
              MemoryReservation: 209715200
              KernelMemory: 52428800
              RestartPolicy:
                MaximumRetryCount: 4
                Name: "on-failure"
      tags: ["Container"]

  /containers/{id}/rename:
    post:
      summary: "Rename a container"
      operationId: "DockerContainerRename"
      responses:
        204:
          description: "no error"
        404:
          description: "no such container"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        409:
          description: "name already in use"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "ID or name of the container"
          schema:
            type: "string"
        - name: "name"
          in: "query"
          required: true
          description: "New name for the container"
          schema:
            type: "string"
      tags: ["Container"]

  /containers/{id}/pause:
    post:
      summary: "Pause a container"
      description: |
        Use the freezer cgroup to suspend all processes in a container.

        Traditionally, when suspending a process the `SIGSTOP` signal is used,
        which is observable by the process being suspended. With the freezer
        cgroup the process is unaware, and unable to capture, that it is being
        suspended, and subsequently resumed.
      operationId: "DockerContainerPause"
      responses:
        204:
          description: "no error"
        404:
          description: "no such container"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "ID or name of the container"
          schema:
            type: "string"
      tags: ["Container"]

  /containers/{id}/unpause:
    post:
      summary: "Unpause a container"
      description: "Resume a container which has been paused."
      operationId: "DockerContainerUnpause"
      responses:
        204:
          description: "no error"
        404:
          description: "no such container"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "ID or name of the container"
          schema:
            type: "string"
      tags: ["Container"]

  /containers/{id}/attach:
    post:
      summary: "Attach to a container"
      description: |
        Attach to a container to read its output or send it input. You can attach
        to the same container multiple times and you can reattach to containers
        that have been detached.

        Either the `stream` or `logs` parameter must be `true` for this endpoint
        to do anything.

        See the [documentation for the `docker attach` command](/engine/reference/commandline/attach/)
        for more details.

        ### Hijacking

        This endpoint hijacks the HTTP connection to transport `stdin`, `stdout`,
        and `stderr` on the same socket.

        This is the response from the daemon for an attach request:

        ```
        HTTP/1.1 200 OK
        Content-Type: application/vnd.docker.raw-stream

        [STREAM]
        ```

        After the headers and two new lines, the TCP connection can now be used
        for raw, bidirectional communication between the client and server.

        To hint potential proxies about connection hijacking, the Docker client
        can also optionally send connection upgrade headers.

        For example, the client sends this request to upgrade the connection:

        ```
        POST /containers/16253994b7c4/attach?stream=1&stdout=1 HTTP/1.1
        Upgrade: tcp
        Connection: Upgrade
        ```

        The Docker daemon will respond with a `101 UPGRADED` response, and will
        similarly follow with the raw stream:

        ```
        HTTP/1.1 101 UPGRADED
        Content-Type: application/vnd.docker.raw-stream
        Connection: Upgrade
        Upgrade: tcp

        [STREAM]
        ```

        ### Stream format

        When the TTY setting is disabled in [`POST /containers/create`](#operation/ContainerCreate),
        the stream over the hijacked connected is multiplexed to separate out
        `stdout` and `stderr`. The stream consists of a series of frames, each
        containing a header and a payload.

        The header contains the information which the stream writes (`stdout` or
        `stderr`). It also contains the size of the associated frame encoded in
        the last four bytes (`uint32`).

        It is encoded on the first eight bytes like this:

        ```go
        header := [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4}
        ```

        `STREAM_TYPE` can be:

        - 0: `stdin` (is written on `stdout`)
        - 1: `stdout`
        - 2: `stderr`

        `SIZE1, SIZE2, SIZE3, SIZE4` are the four bytes of the `uint32` size
        encoded as big endian.

        Following the header is the payload, which is the specified number of
        bytes of `STREAM_TYPE`.

        The simplest way to implement this protocol is the following:

        1. Read 8 bytes.
        2. Choose `stdout` or `stderr` depending on the first byte.
        3. Extract the frame size from the last four bytes.
        4. Read the extracted size and output it on the correct output.
        5. Goto 1.

        ### Stream format when using a TTY

        When the TTY setting is enabled in [`POST /containers/create`](#operation/ContainerCreate),
        the stream is not multiplexed. The data exchanged over the hijacked
        connection is simply the raw data from the process PTY and client's
        `stdin`.

      operationId: "DockerContainerAttach"
      produces:
        - "application/vnd.docker.raw-stream"
      responses:
        101:
          description: "no error, hints proxy about hijacking"
        200:
          description: "no error, no upgrade header found"
        400:
          description: "bad parameter"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        404:
          description: "no such container"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "ID or name of the container"
          schema:
            type: "string"
        - name: "detachKeys"
          in: "query"
          description: |
            Override the key sequence for detaching a container.Format is a single
            character `[a-Z]` or `ctrl-<value>` where `<value>` is one of: `a-z`,
            `@`, `^`, `[`, `,` or `_`.
          schema:
            type: "string"
        - name: "logs"
          in: "query"
          description: |
            Replay previous logs from the container.

            This is useful for attaching to a container that has started and you
            want to output everything since the container started.

            If `stream` is also enabled, once all the previous output has been
            returned, it will seamlessly transition into streaming current
            output.
          schema:
            type: "boolean"
          default: false
        - name: "stream"
          in: "query"
          description: |
            Stream attached streams from the time the request was made onwards.
          schema:
            type: "boolean"
          default: false
        - name: "stdin"
          in: "query"
          description: "Attach to `stdin`"
          schema:
            type: "boolean"
          default: false
        - name: "stdout"
          in: "query"
          description: "Attach to `stdout`"
          schema:
            type: "boolean"
          default: false
        - name: "stderr"
          in: "query"
          description: "Attach to `stderr`"
          schema:
            type: "boolean"
          default: false
      tags: ["Container"]

  /containers/{id}/attach/ws:
    get:
      summary: "Attach to a container via a websocket"
      operationId: "DockerContainerAttachWebsocket"
      responses:
        101:
          description: "no error, hints proxy about hijacking"
        200:
          description: "no error, no upgrade header found"
        400:
          description: "bad parameter"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        404:
          description: "no such container"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "ID or name of the container"
          schema:
            type: "string"
        - name: "detachKeys"
          in: "query"
          description: |
            Override the key sequence for detaching a container.Format is a single
            character `[a-Z]` or `ctrl-<value>` where `<value>` is one of: `a-z`,
            `@`, `^`, `[`, `,`, or `_`.
          schema:
            type: "string"
        - name: "logs"
          in: "query"
          description: "Return logs"
          schema:
            type: "boolean"
          default: false
        - name: "stream"
          in: "query"
          description: "Return stream"
          schema:
            type: "boolean"
          default: false
      tags: ["Container"]

  /containers/{id}/wait:
    post:
      summary: "Wait for a container"
      description: "Block until a container stops, then returns the exit code."
      operationId: "DockerContainerWait"
      produces: ["application/json"]
      responses:
        200:
          description: "The container has exit."
          schema:
            $ref: "#/components/schemas/ContainerWaitResponse"
        400:
          description: "bad parameter"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        404:
          description: "no such container"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "ID or name of the container"
          schema:
            type: "string"
        - name: "condition"
          in: "query"
          description: |
            Wait until a container state reaches the given condition.

            Defaults to `not-running` if omitted or empty.
          schema:
            type: "string"
          enum:
            - "not-running"
            - "next-exit"
            - "removed"
          default: "not-running"
      tags: ["Container"]

  /containers/{id}:
    delete:
      summary: "Remove a container"
      operationId: "DockerContainerDelete"
      responses:
        204:
          description: "no error"
        400:
          description: "bad parameter"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        404:
          description: "no such container"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        409:
          description: "conflict"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            application/json:
              message: |
                You cannot remove a running container: c2ada9df5af8. Stop the
                container before attempting removal or force remove
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "ID or name of the container"
          schema:
            type: "string"
        - name: "v"
          in: "query"
          description: "Remove anonymous volumes associated with the container."
          schema:
            type: "boolean"
          default: false
        - name: "force"
          in: "query"
          description: "If the container is running, kill it before removing it."
          schema:
            type: "boolean"
          default: false
        - name: "link"
          in: "query"
          description: "Remove the specified link associated with the container."
          schema:
            type: "boolean"
          default: false
      tags: ["Container"]

  /containers/{id}/archive:
    head:
      summary: "Get information about files in a container"
      description: |
        A response header `X-Docker-Container-Path-Stat` is returned, containing
        a base64 - encoded JSON object with some filesystem header information
        about the path.
      operationId: "DockerContainerArchiveInfo"
      responses:
        200:
          description: "no error"
          headers:
            X-Docker-Container-Path-Stat:
              schema:
                type: "string"
              description: |
                A base64 - encoded JSON object with some filesystem header
                information about the path
        400:
          description: "Bad parameter"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        404:
          description: "Container or path does not exist"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "Server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "ID or name of the container"
          schema:
            type: "string"
        - name: "path"
          in: "query"
          required: true
          description: "Resource in the container’s filesystem to archive."
          schema:
            type: "string"
      tags: ["Container"]
    get:
      summary: "Get an archive of a filesystem resource in a container"
      description: "Get a tar archive of a resource in the filesystem of container id."
      operationId: "DockerContainerArchive"
      produces: ["application/x-tar"]
      responses:
        200:
          description: "no error"
        400:
          description: "Bad parameter"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        404:
          description: "Container or path does not exist"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "ID or name of the container"
          schema:
            type: "string"
        - name: "path"
          in: "query"
          required: true
          description: "Resource in the container’s filesystem to archive."
          schema:
            type: "string"
      tags: ["Container"]
    put:
      summary: "Extract an archive of files or folders to a directory in a container"
      description: |
        Upload a tar archive to be extracted to a path in the filesystem of container id.
        `path` parameter is asserted to be a directory. If it exists as a file, 400 error
        will be returned with message "not a directory".
      operationId: "DockerPutContainerArchive"
      consumes: ["application/x-tar", "application/octet-stream"]
      responses:
        200:
          description: "The content was extracted successfully"
        400:
          description: "Bad parameter"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            application/json:
              message: "not a directory"
        403:
          description: "Permission denied, the volume or container rootfs is marked as read-only."
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        404:
          description: "No such container or path does not exist inside the container"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "Server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "ID or name of the container"
          schema:
            type: "string"
        - name: "path"
          in: "query"
          required: true
          description: "Path to a directory in the container to extract the archive’s contents into. "
          schema:
            type: "string"
        - name: "noOverwriteDirNonDir"
          in: "query"
          description: |
            If `1`, `true`, or `True` then it will be an error if unpacking the
            given content would cause an existing directory to be replaced with
            a non-directory and vice versa.
          schema:
            type: "string"
        - name: "copyUIDGID"
          in: "query"
          description: |
            If `1`, `true`, then it will copy UID/GID maps to the dest file or
            dir
          schema:
            type: "string"
        - name: "inputStream"
          in: "body"
          required: true
          description: |
            The input stream must be a tar archive compressed with one of the
            following algorithms: `identity` (no compression), `gzip`, `bzip2`,
            or `xz`.
          schema:
            schema:
              type: "string"
            format: "binary"
      tags: ["Container"]

  /containers/prune:
    post:
      summary: "Delete stopped containers"
      produces:
        - "application/json"
      operationId: "DockerContainerPrune"
      parameters:
        - name: "filters"
          in: "query"
          description: |
            Filters to process on the prune list, encoded as JSON (a `map[string][]string`).

            Available filters:
            - `until=<timestamp>` Prune containers created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machine’s time.
            - `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune containers with (or without, in case `label!=...` is used) the specified labels.
          schema:
            type: "string"
      responses:
        200:
          description: "No error"
          schema:
            schema:
              type: "object"
            title: "ContainerPruneResponse"
            properties:
              ContainersDeleted:
                description: "Container IDs that were deleted"
                schema:
                  type: "array"
                items:
                  schema:
                    type: "string"
              SpaceReclaimed:
                description: "Disk space reclaimed in bytes"
                schema:
                  type: "integer"
                format: "int64"
        500:
          description: "Server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      tags: ["Container"]

  /images/json:
    get:
      summary: "List Images"
      description: "Returns a list of images on the server. Note that it uses a different, smaller representation of an image than inspecting a single image."
      operationId: "DockerImageList"
      produces:
        - "application/json"
      responses:
        200:
          description: "Summary image data for the images matching the query"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ImageSummary"
          examples:
            application/json:
              - Id: "sha256:e216a057b1cb1efc11f8a268f37ef62083e70b1b38323ba252e25ac88904a7e8"
                ParentId: ""
                RepoTags:
                  - "ubuntu:12.04"
                  - "ubuntu:precise"
                RepoDigests:
                  - "ubuntu@sha256:992069aee4016783df6345315302fa59681aae51a8eeb2f889dea59290f21787"
                Created: 1474925151
                Size: 103579269
                VirtualSize: 103579269
                SharedSize: 0
                Labels: {}
                Containers: 2
              - Id: "sha256:3e314f95dcace0f5e4fd37b10862fe8398e3c60ed36600bc0ca5fda78b087175"
                ParentId: ""
                RepoTags:
                  - "ubuntu:12.10"
                  - "ubuntu:quantal"
                RepoDigests:
                  - "ubuntu@sha256:002fba3e3255af10be97ea26e476692a7ebed0bb074a9ab960b2e7a1526b15d7"
                  - "ubuntu@sha256:68ea0200f0b90df725d99d823905b04cf844f6039ef60c60bf3e019915017bd3"
                Created: 1403128455
                Size: 172064416
                VirtualSize: 172064416
                SharedSize: 0
                Labels: {}
                Containers: 5
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "all"
          in: "query"
          description: "Show all images. Only images from a final layer (no children) are shown by default."
          schema:
            type: "boolean"
          default: false
        - name: "filters"
          in: "query"
          description: |
            A JSON encoded value of the filters (a `map[string][]string`) to
            process on the images list.

            Available filters:

            - `before`=(`<image-name>[:<tag>]`,  `<image id>` or `<image@digest>`)
            - `dangling=true`
            - `label=key` or `label="key=value"` of an image label
            - `reference`=(`<image-name>[:<tag>]`)
            - `since`=(`<image-name>[:<tag>]`,  `<image id>` or `<image@digest>`)
          schema:
            type: "string"
        - name: "digests"
          in: "query"
          description: "Show digest information as a `RepoDigests` field on each image."
          schema:
            type: "boolean"
          default: false
      tags: ["Image"]

  /build:
    post:
      summary: "Build an image"
      description: |
        Build an image from a tar archive with a `Dockerfile` in it.

        The `Dockerfile` specifies how the image is built from the tar archive. It is typically in the archive's root, but can be at a different path or have a different name by specifying the `dockerfile` parameter. [See the `Dockerfile` reference for more information](/engine/reference/builder/).

        The Docker daemon performs a preliminary validation of the `Dockerfile` before starting the build, and returns an error if the syntax is incorrect. After that, each instruction is run one-by-one until the ID of the new image is output.

        The build is canceled if the client drops the connection by quitting or being killed.
      operationId: "DockerImageBuild"
      consumes:
        - "application/octet-stream"
      produces:
        - "application/json"
      parameters:
        - name: "inputStream"
          in: "body"
          description: "A tar archive compressed with one of the following algorithms: identity (no compression), gzip, bzip2, xz."
          schema:
            schema:
              type: "string"
            format: "binary"
        - name: "dockerfile"
          in: "query"
          description: "Path within the build context to the `Dockerfile`. This is ignored if `remote` is specified and points to an external `Dockerfile`."
          schema:
            type: "string"
          default: "Dockerfile"
        - name: "t"
          in: "query"
          description: "A name and optional tag to apply to the image in the `name:tag` format. If you omit the tag the default `latest` value is assumed. You can provide several `t` parameters."
          schema:
            type: "string"
        - name: "extrahosts"
          in: "query"
          description: "Extra hosts to add to /etc/hosts"
          schema:
            type: "string"
        - name: "remote"
          in: "query"
          description: "A Git repository URI or HTTP/HTTPS context URI. If the URI points to a single text file, the file’s contents are placed into a file called `Dockerfile` and the image is built from that file. If the URI points to a tarball, the file is downloaded by the daemon and the contents therein used as the context for the build. If the URI points to a tarball and the `dockerfile` parameter is also specified, there must be a file with the corresponding path inside the tarball."
          schema:
            type: "string"
        - name: "q"
          in: "query"
          description: "Suppress verbose build output."
          schema:
            type: "boolean"
          default: false
        - name: "nocache"
          in: "query"
          description: "Do not use the cache when building the image."
          schema:
            type: "boolean"
          default: false
        - name: "cachefrom"
          in: "query"
          description: "JSON array of images used for build cache resolution."
          schema:
            type: "string"
        - name: "pull"
          in: "query"
          description: "Attempt to pull the image even if an older image exists locally."
          schema:
            type: "string"
        - name: "rm"
          in: "query"
          description: "Remove intermediate containers after a successful build."
          schema:
            type: "boolean"
          default: true
        - name: "forcerm"
          in: "query"
          description: "Always remove intermediate containers, even upon failure."
          schema:
            type: "boolean"
          default: false
        - name: "memory"
          in: "query"
          description: "Set memory limit for build."
          schema:
            type: "integer"
        - name: "memswap"
          in: "query"
          description: "Total memory (memory + swap). Set as `-1` to disable swap."
          schema:
            type: "integer"
        - name: "cpushares"
          in: "query"
          description: "CPU shares (relative weight)."
          schema:
            type: "integer"
        - name: "cpusetcpus"
          in: "query"
          description: "CPUs in which to allow execution (e.g., `0-3`, `0,1`)."
          schema:
            type: "string"
        - name: "cpuperiod"
          in: "query"
          description: "The length of a CPU period in microseconds."
          schema:
            type: "integer"
        - name: "cpuquota"
          in: "query"
          description: "Microseconds of CPU time that the container can get in a CPU period."
          schema:
            type: "integer"
        - name: "buildargs"
          in: "query"
          description: >
            JSON map of string pairs for build-time variables. Users pass these values at build-time. Docker
            uses the buildargs as the environment context for commands run via the `Dockerfile` RUN
            instruction, or for variable expansion in other `Dockerfile` instructions. This is not meant for
            passing secret values.


            For example, the build arg `FOO=bar` would become `{"FOO":"bar"}` in JSON. This would result in the
            query parameter `buildargs={"FOO":"bar"}`. Note that `{"FOO":"bar"}` should be URI component encoded.


            [Read more about the buildargs instruction.](/engine/reference/builder/#arg)
          schema:
            type: "string"
        - name: "shmsize"
          in: "query"
          description: "Size of `/dev/shm` in bytes. The size must be greater than 0. If omitted the system uses 64MB."
          schema:
            type: "integer"
        - name: "squash"
          in: "query"
          description: "Squash the resulting images layers into a single layer. *(Experimental release only.)*"
          schema:
            type: "boolean"
        - name: "labels"
          in: "query"
          description: "Arbitrary key/value labels to set on the image, as a JSON map of string pairs."
          schema:
            type: "string"
        - name: "networkmode"
          in: "query"
          description: |
            Sets the networking mode for the run commands during build. Supported
            standard values are: `bridge`, `host`, `none`, and `container:<name|id>`.
            Any other value is taken as a custom network's name or ID to which this
            container should connect to.
          schema:
            type: "string"
        - name: "Content-type"
          in: "header"
          schema:
            type: "string"
          enum:
            - "application/x-tar"
          default: "application/x-tar"
        - name: "X-Registry-Config"
          in: "header"
          description: |
            This is a base64-encoded JSON object with auth configurations for multiple registries that a build may refer to.

            The key is a registry URL, and the value is an auth configuration object, [as described in the authentication section](#section/Authentication). For example:

            ```
            {
              "docker.example.com": {
                "username": "janedoe",
                "password": "hunter2"
              },
              "https://index.docker.io/v1/": {
                "username": "mobydock",
                "password": "conta1n3rize14"
              }
            }
            ```

            Only the registry domain name (and port if not the default 443) are required. However, for legacy reasons, the Docker Hub registry must be specified with both a `https://` prefix and a `/v1/` suffix even though Docker will prefer to use the v2 registry API.
          schema:
            type: "string"
        - name: "platform"
          in: "query"
          description: "Platform in the format os[/arch[/variant]]"
          schema:
            type: "string"
          default: ""
        - name: "target"
          in: "query"
          description: "Target build stage"
          schema:
            type: "string"
          default: ""
        - name: "outputs"
          in: "query"
          description: "BuildKit output configuration"
          schema:
            type: "string"
          default: ""
      responses:
        200:
          description: "no error"
        400:
          description: "Bad parameter"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      tags: ["Image"]
  /build/prune:
    post:
      summary: "Delete builder cache"
      produces:
        - "application/json"
      operationId: "DockerBuildPrune"
      parameters:
        - name: "keep-storage"
          in: "query"
          description: "Amount of disk space in bytes to keep for cache"
          schema:
            type: "integer"
          format: "int64"
        - name: "all"
          in: "query"
          schema:
            type: "boolean"
          description: "Remove all types of build cache"
        - name: "filters"
          in: "query"
          schema:
            type: "string"
          description: |
            A JSON encoded value of the filters (a `map[string][]string`) to
            process on the list of build cache objects.

            Available filters:

            - `until=<duration>`: duration relative to daemon's time, during which build cache was not used, in Go's duration format (e.g., '24h')
            - `id=<id>`
            - `parent=<id>`
            - `type=<string>`
            - `description=<string>`
            - `inuse`
            - `shared`
            - `private`
      responses:
        200:
          description: "No error"
          schema:
            schema:
              type: "object"
            title: "BuildPruneResponse"
            properties:
              CachesDeleted:
                schema:
                  type: "array"
                items:
                  description: "ID of build cache object"
                  schema:
                    type: "string"
              SpaceReclaimed:
                description: "Disk space reclaimed in bytes"
                schema:
                  type: "integer"
                format: "int64"
        500:
          description: "Server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      tags: ["Image"]
  /images/create:
    post:
      summary: "Create an image"
      description: "Create an image by either pulling it from a registry or importing it."
      operationId: "DockerImageCreate"
      consumes:
        - "text/plain"
        - "application/octet-stream"
      produces:
        - "application/json"
      responses:
        200:
          description: "no error"
        404:
          description: "repository does not exist or no read access"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "fromImage"
          in: "query"
          description: "Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed."
          schema:
            type: "string"
        - name: "fromSrc"
          in: "query"
          description: "Source to import. The value may be a URL from which the image can be retrieved or `-` to read the image from the request body. This parameter may only be used when importing an image."
          schema:
            type: "string"
        - name: "repo"
          in: "query"
          description: "Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image."
          schema:
            type: "string"
        - name: "tag"
          in: "query"
          description: "Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled."
          schema:
            type: "string"
        - name: "message"
          in: "query"
          description: "Set commit message for imported image."
          schema:
            type: "string"
        - name: "inputImage"
          in: "body"
          description: "Image content if the value `-` has been specified in fromSrc query parameter"
          schema:
            schema:
              type: "string"
          required: false
        - name: "X-Registry-Auth"
          in: "header"
          description: |
            A base64url-encoded auth configuration.

            Refer to the [authentication section](#section/Authentication) for
            details.
          schema:
            type: "string"
        - name: "changes"
          in: "query"
          description: |
            Apply `Dockerfile` instructions to the image that is created,
            for example: `changes=ENV DEBUG=true`.
            Note that `ENV DEBUG=true` should be URI component encoded.

            Supported `Dockerfile` instructions:
            `CMD`|`ENTRYPOINT`|`ENV`|`EXPOSE`|`ONBUILD`|`USER`|`VOLUME`|`WORKDIR`
          schema:
            type: "array"
          items:
            schema:
              type: "string"
        - name: "platform"
          in: "query"
          description: "Platform in the format os[/arch[/variant]]"
          schema:
            type: "string"
          default: ""
      tags: ["Image"]
  /images/{name}/json:
    get:
      summary: "Inspect an image"
      description: "Return low-level information about an image."
      operationId: "DockerImageInspect"
      produces:
        - "application/json"
      responses:
        200:
          description: "No error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageInspect"
        404:
          description: "No such image"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            application/json:
              message: "No such image: someimage (tag: latest)"
        500:
          description: "Server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "name"
          in: "path"
          description: "Image name or id"
          schema:
            type: "string"
          required: true
      tags: ["Image"]
  /images/{name}/history:
    get:
      summary: "Get the history of an image"
      description: "Return parent layers of an image."
      operationId: "DockerImageHistory"
      produces: ["application/json"]
      responses:
        200:
          description: "List of image layers"
          schema:
            schema:
              type: "array"
            items:
              schema:
                type: "object"
              x-go-name: HistoryResponseItem
              title: "HistoryResponseItem"
              description: "individual image layer information in response to ImageHistory operation"
              required: [Id, Created, CreatedBy, Tags, Size, Comment]
              properties:
                Id:
                  schema:
                    type: "string"
                  x-nullable: false
                Created:
                  schema:
                    type: "integer"
                  format: "int64"
                  x-nullable: false
                CreatedBy:
                  schema:
                    type: "string"
                  x-nullable: false
                Tags:
                  schema:
                    type: "array"
                  items:
                    schema:
                      type: "string"
                Size:
                  schema:
                    type: "integer"
                  format: "int64"
                  x-nullable: false
                Comment:
                  schema:
                    type: "string"
                  x-nullable: false
          examples:
            application/json:
              - Id: "3db9c44f45209632d6050b35958829c3a2aa256d81b9a7be45b362ff85c54710"
                Created: 1398108230
                CreatedBy: "/bin/sh -c #(nop) ADD file:eb15dbd63394e063b805a3c32ca7bf0266ef64676d5a6fab4801f2e81e2a5148 in /"
                Tags:
                  - "ubuntu:lucid"
                  - "ubuntu:10.04"
                Size: 182964289
                Comment: ""
              - Id: "6cfa4d1f33fb861d4d114f43b25abd0ac737509268065cdfd69d544a59c85ab8"
                Created: 1398108222
                CreatedBy: "/bin/sh -c #(nop) MAINTAINER Tianon Gravi <admwiggin@gmail.com> - mkimage-debootstrap.sh -i iproute,iputils-ping,ubuntu-minimal -t lucid.tar.xz lucid http://archive.ubuntu.com/ubuntu/"
                Tags: []
                Size: 0
                Comment: ""
              - Id: "511136ea3c5a64f264b78b5433614aec563103b4d4702f3ba7d4d2698e22c158"
                Created: 1371157430
                CreatedBy: ""
                Tags:
                  - "scratch12:latest"
                  - "scratch:latest"
                Size: 0
                Comment: "Imported from -"
        404:
          description: "No such image"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "Server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "name"
          in: "path"
          description: "Image name or ID"
          schema:
            type: "string"
          required: true
      tags: ["Image"]
  /images/{name}/push:
    post:
      summary: "Push an image"
      description: |
        Push an image to a registry.

        If you wish to push an image on to a private registry, that image must
        already have a tag which references the registry. For example,
        `registry.example.com/myimage:latest`.

        The push is cancelled if the HTTP connection is closed.
      operationId: "DockerImagePush"
      consumes:
        - "application/octet-stream"
      responses:
        200:
          description: "No error"
        404:
          description: "No such image"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "Server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "name"
          in: "path"
          description: "Image name or ID."
          schema:
            type: "string"
          required: true
        - name: "tag"
          in: "query"
          description: "The tag to associate with the image on the registry."
          schema:
            type: "string"
        - name: "X-Registry-Auth"
          in: "header"
          description: |
            A base64url-encoded auth configuration.

            Refer to the [authentication section](#section/Authentication) for
            details.
          schema:
            type: "string"
          required: true
      tags: ["Image"]
  /images/{name}/tag:
    post:
      summary: "Tag an image"
      description: "Tag an image so that it becomes part of a repository."
      operationId: "DockerImageTag"
      responses:
        201:
          description: "No error"
        400:
          description: "Bad parameter"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        404:
          description: "No such image"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        409:
          description: "Conflict"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "Server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "name"
          in: "path"
          description: "Image name or ID to tag."
          schema:
            type: "string"
          required: true
        - name: "repo"
          in: "query"
          description: "The repository to tag in. For example, `someuser/someimage`."
          schema:
            type: "string"
        - name: "tag"
          in: "query"
          description: "The name of the new tag."
          schema:
            type: "string"
      tags: ["Image"]
  /images/{name}:
    delete:
      summary: "Remove an image"
      description: |
        Remove an image, along with any untagged parent images that were
        referenced by that image.

        Images can't be removed if they have descendant images, are being
        used by a running container or are being used by a build.
      operationId: "DockerImageDelete"
      produces: ["application/json"]
      responses:
        200:
          description: "The image was deleted successfully"
          schema:
            schema:
              type: "array"
            items:
              $ref: "#/components/schemas/ImageDeleteResponseItem"
          examples:
            application/json:
              - Untagged: "3e2f21a89f"
              - Deleted: "3e2f21a89f"
              - Deleted: "53b4f83ac9"
        404:
          description: "No such image"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        409:
          description: "Conflict"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "Server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "name"
          in: "path"
          description: "Image name or ID"
          schema:
            type: "string"
          required: true
        - name: "force"
          in: "query"
          description: "Remove the image even if it is being used by stopped containers or has other tags"
          schema:
            type: "boolean"
          default: false
        - name: "noprune"
          in: "query"
          description: "Do not delete untagged parent images"
          schema:
            type: "boolean"
          default: false
      tags: ["Image"]
  /images/search:
    get:
      summary: "Search images"
      description: "Search for an image on Docker Hub."
      operationId: "DockerImageSearch"
      produces:
        - "application/json"
      responses:
        200:
          description: "No error"
          schema:
            schema:
              type: "array"
            items:
              schema:
                type: "object"
              title: "ImageSearchResponseItem"
              properties:
                description:
                  schema:
                    type: "string"
                is_official:
                  schema:
                    type: "boolean"
                is_automated:
                  schema:
                    type: "boolean"
                name:
                  schema:
                    type: "string"
                star_count:
                  schema:
                    type: "integer"
          examples:
            application/json:
              - description: ""
                is_official: false
                is_automated: false
                name: "wma55/u1210sshd"
                star_count: 0
              - description: ""
                is_official: false
                is_automated: false
                name: "jdswinbank/sshd"
                star_count: 0
              - description: ""
                is_official: false
                is_automated: false
                name: "vgauthier/sshd"
                star_count: 0
        500:
          description: "Server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "term"
          in: "query"
          description: "Term to search"
          schema:
            type: "string"
          required: true
        - name: "limit"
          in: "query"
          description: "Maximum number of results to return"
          schema:
            type: "integer"
        - name: "filters"
          in: "query"
          description: |
            A JSON encoded value of the filters (a `map[string][]string`) to process on the images list. Available filters:

            - `is-automated=(true|false)`
            - `is-official=(true|false)`
            - `stars=<number>` Matches images that has at least 'number' stars.
          schema:
            type: "string"
      tags: ["Image"]
  /images/prune:
    post:
      summary: "Delete unused images"
      produces:
        - "application/json"
      operationId: "DockerImagePrune"
      parameters:
        - name: "filters"
          in: "query"
          description: |
            Filters to process on the prune list, encoded as JSON (a `map[string][]string`). Available filters:

            - `dangling=<boolean>` When set to `true` (or `1`), prune only
               unused *and* untagged images. When set to `false`
               (or `0`), all unused images are pruned.
            - `until=<string>` Prune images created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machine’s time.
            - `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune images with (or without, in case `label!=...` is used) the specified labels.
          schema:
            type: "string"
      responses:
        200:
          description: "No error"
          schema:
            schema:
              type: "object"
            title: "ImagePruneResponse"
            properties:
              ImagesDeleted:
                description: "Images that were deleted"
                schema:
                  type: "array"
                items:
                  $ref: "#/components/schemas/ImageDeleteResponseItem"
              SpaceReclaimed:
                description: "Disk space reclaimed in bytes"
                schema:
                  type: "integer"
                format: "int64"
        500:
          description: "Server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      tags: ["Image"]
  /auth:
    post:
      summary: "Check auth configuration"
      description: |
        Validate credentials for a registry and, if available, get an identity
        token for accessing the registry without password.
      operationId: "DockerSystemAuth"
      consumes: ["application/json"]
      produces: ["application/json"]
      responses:
        200:
          description: "An identity token was generated successfully."
          schema:
            schema:
              type: "object"
            title: "SystemAuthResponse"
            required: [Status]
            properties:
              Status:
                description: "The status of the authentication"
                schema:
                  type: "string"
                x-nullable: false
              IdentityToken:
                description: "An opaque token used to authenticate a user after a successful login"
                schema:
                  type: "string"
                x-nullable: false
          examples:
            application/json:
              Status: "Login Succeeded"
              IdentityToken: "9cbaf023786cd7..."
        204:
          description: "No error"
        500:
          description: "Server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "authConfig"
          in: "body"
          description: "Authentication to check"
          schema:
            $ref: "#/components/schemas/AuthConfig"
      tags: ["System"]
  /info:
    get:
      summary: "Get system information"
      operationId: "DockerSystemInfo"
      responses:
        200:
          description: "No error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemInfo"
        500:
          description: "Server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      tags: ["System"]
  /docker_version:
    get:
      summary: "Get version"
      description: "Returns the version of Docker that is running and various information about the system that Docker is running on."
      operationId: "DockerSystemVersion"
      produces: ["application/json"]
      responses:
        200:
          description: "no error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemVersion"
        500:
          description: "server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      tags: ["System"]
  /_ping:
    get:
      summary: "Ping"
      description: "This is a dummy endpoint you can use to test if the server is accessible."
      operationId: "DockerSystemPing"
      produces: ["text/plain"]
      responses:
        200:
          description: "no error"
          schema:
            schema:
              type: "string"
            example: "OK"
          headers:
            API-Version:
              schema:
                type: "string"
              description: "Max API Version the server supports"
            Builder-Version:
              schema:
                type: "string"
              description: "Default version of docker image builder"
            Docker-Experimental:
              schema:
                type: "boolean"
              description: "If the server is running with experimental mode enabled"
            Cache-Control:
              schema:
                type: "string"
              default: "no-cache, no-store, must-revalidate"
            Pragma:
              schema:
                type: "string"
              default: "no-cache"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          headers:
            Cache-Control:
              schema:
                type: "string"
              default: "no-cache, no-store, must-revalidate"
            Pragma:
              schema:
                type: "string"
              default: "no-cache"
      tags: ["System"]
    head:
      summary: "Ping"
      description: "This is a dummy endpoint you can use to test if the server is accessible."
      operationId: "DockerSystemPingHead"
      produces: ["text/plain"]
      responses:
        200:
          description: "no error"
          schema:
            schema:
              type: "string"
            example: "(empty)"
          headers:
            API-Version:
              schema:
                type: "string"
              description: "Max API Version the server supports"
            Builder-Version:
              schema:
                type: "string"
              description: "Default version of docker image builder"
            Docker-Experimental:
              schema:
                type: "boolean"
              description: "If the server is running with experimental mode enabled"
            Cache-Control:
              schema:
                type: "string"
              default: "no-cache, no-store, must-revalidate"
            Pragma:
              schema:
                type: "string"
              default: "no-cache"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      tags: ["System"]
  /commit:
    post:
      summary: "Create a new image from a container"
      operationId: "DockerImageCommit"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        201:
          description: "no error"
          schema:
            $ref: "#/components/schemas/IdResponse"
        404:
          description: "no such container"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "containerConfig"
          in: "body"
          description: "The container configuration"
          schema:
            $ref: "#/components/schemas/ContainerConfig"
        - name: "container"
          in: "query"
          description: "The ID or name of the container to commit"
          schema:
            type: "string"
        - name: "repo"
          in: "query"
          description: "Repository name for the created image"
          schema:
            type: "string"
        - name: "tag"
          in: "query"
          description: "Tag name for the create image"
          schema:
            type: "string"
        - name: "comment"
          in: "query"
          description: "Commit message"
          schema:
            type: "string"
        - name: "author"
          in: "query"
          description: "Author of the image (e.g., `John Hannibal Smith <hannibal@a-team.com>`)"
          schema:
            type: "string"
        - name: "pause"
          in: "query"
          description: "Whether to pause the container before committing"
          schema:
            type: "boolean"
          default: true
        - name: "changes"
          in: "query"
          description: "`Dockerfile` instructions to apply while committing"
          schema:
            type: "string"
      tags: ["Image"]
  /events:
    get:
      summary: "Monitor events"
      description: |
        Stream real-time events from the server.

        Various objects within Docker report events when something happens to them.

        Containers report these events: `attach`, `commit`, `copy`, `create`, `destroy`, `detach`, `die`, `exec_create`, `exec_detach`, `exec_start`, `exec_die`, `export`, `health_status`, `kill`, `oom`, `pause`, `rename`, `resize`, `restart`, `start`, `stop`, `top`, `unpause`, `update`, and `prune`

        Images report these events: `delete`, `import`, `load`, `pull`, `push`, `save`, `tag`, `untag`, and `prune`

        Volumes report these events: `create`, `mount`, `unmount`, `destroy`, and `prune`

        Networks report these events: `create`, `connect`, `disconnect`, `destroy`, `update`, `remove`, and `prune`

        The Docker daemon reports these events: `reload`

        Services report these events: `create`, `update`, and `remove`

        Nodes report these events: `create`, `update`, and `remove`

        Secrets report these events: `create`, `update`, and `remove`

        Configs report these events: `create`, `update`, and `remove`

        The Builder reports `prune` events

      operationId: "DockerSystemEvents"
      produces:
        - "application/json"
      responses:
        200:
          description: "no error"
          schema:
            $ref: "#/components/schemas/EventMessage"
        400:
          description: "bad parameter"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "since"
          in: "query"
          description: "Show events created since this timestamp then stream new events."
          schema:
            type: "string"
        - name: "until"
          in: "query"
          description: "Show events created until this timestamp then stop streaming."
          schema:
            type: "string"
        - name: "filters"
          in: "query"
          description: |
            A JSON encoded value of filters (a `map[string][]string`) to process on the event list. Available filters:

            - `config=<string>` config name or ID
            - `container=<string>` container name or ID
            - `daemon=<string>` daemon name or ID
            - `event=<string>` event type
            - `image=<string>` image name or ID
            - `label=<string>` image or container label
            - `network=<string>` network name or ID
            - `node=<string>` node ID
            - `plugin`=<string> plugin name or ID
            - `scope`=<string> local or swarm
            - `secret=<string>` secret name or ID
            - `service=<string>` service name or ID
            - `type=<string>` object to filter by, one of `container`, `image`, `volume`, `network`, `daemon`, `plugin`, `node`, `service`, `secret` or `config`
            - `volume=<string>` volume name
          schema:
            type: "string"
      tags: ["System"]
  /system/df:
    get:
      summary: "Get data usage information"
      operationId: "DockerSystemDataUsage"
      responses:
        200:
          description: "no error"
          schema:
            schema:
              type: "object"
            title: "SystemDataUsageResponse"
            properties:
              LayersSize:
                schema:
                  type: "integer"
                format: "int64"
              Images:
                schema:
                  type: "array"
                items:
                  $ref: "#/components/schemas/ImageSummary"
              Containers:
                schema:
                  type: "array"
                items:
                  $ref: "#/components/schemas/ContainerSummary"
              Volumes:
                schema:
                  type: "array"
                items:
                  $ref: "#/components/schemas/Volume"
              BuildCache:
                schema:
                  type: "array"
                items:
                  $ref: "#/components/schemas/BuildCache"
            example:
              LayersSize: 1092588
              Images:
                -
                  Id: "sha256:2b8fd9751c4c0f5dd266fcae00707e67a2545ef34f9a29354585f93dac906749"
                  ParentId: ""
                  RepoTags:
                    - "busybox:latest"
                  RepoDigests:
                    - "busybox@sha256:a59906e33509d14c036c8678d687bd4eec81ed7c4b8ce907b888c607f6a1e0e6"
                  Created: 1466724217
                  Size: 1092588
                  SharedSize: 0
                  VirtualSize: 1092588
                  Labels: {}
                  Containers: 1
              Containers:
                -
                  Id: "e575172ed11dc01bfce087fb27bee502db149e1a0fad7c296ad300bbff178148"
                  Names:
                    - "/top"
                  Image: "busybox"
                  ImageID: "sha256:2b8fd9751c4c0f5dd266fcae00707e67a2545ef34f9a29354585f93dac906749"
                  Command: "top"
                  Created: 1472592424
                  Ports: []
                  SizeRootFs: 1092588
                  Labels: {}
                  State: "exited"
                  Status: "Exited (0) 56 minutes ago"
                  HostConfig:
                    NetworkMode: "default"
                  NetworkSettings:
                    Networks:
                      bridge:
                        IPAMConfig: null
                        Links: null
                        Aliases: null
                        NetworkID: "d687bc59335f0e5c9ee8193e5612e8aee000c8c62ea170cfb99c098f95899d92"
                        EndpointID: "8ed5115aeaad9abb174f68dcf135b49f11daf597678315231a32ca28441dec6a"
                        Gateway: "172.18.0.1"
                        IPAddress: "172.18.0.2"
                        IPPrefixLen: 16
                        IPv6Gateway: ""
                        GlobalIPv6Address: ""
                        GlobalIPv6PrefixLen: 0
                        MacAddress: "02:42:ac:12:00:02"
                  Mounts: []
              Volumes:
                -
                  Name: "my-volume"
                  Driver: "local"
                  Mountpoint: "/var/lib/docker/volumes/my-volume/_data"
                  Labels: null
                  Scope: "local"
                  Options: null
                  UsageData:
                    Size: 10920104
                    RefCount: 2
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      tags: ["System"]
  /images/{name}/get:
    get:
      summary: "Export an image"
      description: |
        Get a tarball containing all images and metadata for a repository.

        If `name` is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned. If `name` is an image ID, similarly only that image (and its parents) are returned, but with the exclusion of the `repositories` file in the tarball, as there were no image names referenced.

        ### Image tarball format

        An image tarball contains one directory per image layer (named using its long ID), each containing these files:

        - `VERSION`: currently `1.0` - the file format version
        - `json`: detailed layer information, similar to `docker inspect layer_id`
        - `layer.tar`: A tarfile containing the filesystem changes in this layer

        The `layer.tar` file contains `aufs` style `.wh..wh.aufs` files and directories for storing attribute changes and deletions.

        If the tarball defines a repository, the tarball should also include a `repositories` file at the root that contains a list of repository and tag names mapped to layer IDs.

        ```json
        {
          "hello-world": {
            "latest": "565a9d68a73f6706862bfe8409a7f659776d4d60a8d096eb4a3cbce6999cc2a1"
          }
        }
        ```
      operationId: "DockerImageGet"
      produces:
        - "application/x-tar"
      responses:
        200:
          description: "no error"
          schema:
            schema:
              type: "string"
            format: "binary"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "name"
          in: "path"
          description: "Image name or ID"
          schema:
            type: "string"
          required: true
      tags: ["Image"]
  /images/get:
    get:
      summary: "Export several images"
      description: |
        Get a tarball containing all images and metadata for several image
        repositories.

        For each value of the `names` parameter: if it is a specific name and
        tag (e.g. `ubuntu:latest`), then only that image (and its parents) are
        returned; if it is an image ID, similarly only that image (and its parents)
        are returned and there would be no names referenced in the 'repositories'
        file for this image ID.

        For details on the format, see the [export image endpoint](#operation/ImageGet).
      operationId: "DockerImageGetAll"
      produces:
        - "application/x-tar"
      responses:
        200:
          description: "no error"
          schema:
            schema:
              type: "string"
            format: "binary"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "names"
          in: "query"
          description: "Image names to filter by"
          schema:
            type: "array"
            items:
              type: string
          items:
            schema:
              type: "string"
      tags: ["Image"]
  /images/load:
    post:
      summary: "Import images"
      description: |
        Load a set of images and tags into a repository.

        For details on the format, see the [export image endpoint](#operation/ImageGet).
      operationId: "DockerImageLoad"
      consumes:
        - "application/x-tar"
      produces:
        - "application/json"
      responses:
        200:
          description: "no error"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "imagesTarball"
          in: "body"
          description: "Tar archive containing images"
          schema:
            schema:
              type: "string"
            format: "binary"
        - name: "quiet"
          in: "query"
          description: "Suppress progress details during load."
          schema:
            type: "boolean"
          default: false
      tags: ["Image"]
  /containers/{id}/exec:
    post:
      summary: "Create an exec instance"
      description: "Run a command inside a running container."
      operationId: "DockerContainerExec"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        201:
          description: "no error"
          schema:
            $ref: "#/components/schemas/IdResponse"
        404:
          description: "no such container"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        409:
          description: "container is paused"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "Server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "execConfig"
          in: "body"
          description: "Exec configuration"
          schema:
            schema:
              type: "object"
            title: "ExecConfig"
            properties:
              AttachStdin:
                schema:
                  type: "boolean"
                description: "Attach to `stdin` of the exec command."
              AttachStdout:
                schema:
                  type: "boolean"
                description: "Attach to `stdout` of the exec command."
              AttachStderr:
                schema:
                  type: "boolean"
                description: "Attach to `stderr` of the exec command."
              DetachKeys:
                schema:
                  type: "string"
                description: |
                  Override the key sequence for detaching a container. Format is
                  a single character `[a-Z]` or `ctrl-<value>` where `<value>`
                  is one of: `a-z`, `@`, `^`, `[`, `,` or `_`.
              Tty:
                schema:
                  type: "boolean"
                description: "Allocate a pseudo-TTY."
              Env:
                description: |
                  A list of environment variables in the form `["VAR=value", ...]`.
                schema:
                  type: "array"
                items:
                  schema:
                    type: "string"
              Cmd:
                schema:
                  type: "array"
                description: "Command to run, as a string or array of strings."
                items:
                  schema:
                    type: "string"
              Privileged:
                schema:
                  type: "boolean"
                description: "Runs the exec process with extended privileges."
                default: false
              User:
                schema:
                  type: "string"
                description: |
                  The user, and optionally, group to run the exec process inside
                  the container. Format is one of: `user`, `user:group`, `uid`,
                  or `uid:gid`.
              WorkingDir:
                schema:
                  type: "string"
                description: |
                  The working directory for the exec process inside the container.
            example:
              AttachStdin: false
              AttachStdout: true
              AttachStderr: true
              DetachKeys: "ctrl-p,ctrl-q"
              Tty: false
              Cmd:
                - "date"
              Env:
                - "FOO=bar"
                - "BAZ=quux"
          required: true
        - name: "id"
          in: "path"
          description: "ID or name of container"
          schema:
            type: "string"
          required: true
      tags: ["Exec"]
  /exec/{id}/start:
    post:
      summary: "Start an exec instance"
      description: |
        Starts a previously set up exec instance. If detach is true, this endpoint
        returns immediately after starting the command. Otherwise, it sets up an
        interactive session with the command.
      operationId: "DockerExecStart"
      consumes:
        - "application/json"
      produces:
        - "application/vnd.docker.raw-stream"
      responses:
        200:
          description: "No error"
        404:
          description: "No such exec instance"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        409:
          description: "Container is stopped or paused"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "execStartConfig"
          in: "body"
          schema:
            schema:
              type: "object"
            title: "ExecStartConfig"
            properties:
              Detach:
                schema:
                  type: "boolean"
                description: "Detach from the command."
              Tty:
                schema:
                  type: "boolean"
                description: "Allocate a pseudo-TTY."
            example:
              Detach: false
              Tty: false
        - name: "id"
          in: "path"
          description: "Exec instance ID"
          required: true
          schema:
            type: "string"
      tags: ["Exec"]
  /exec/{id}/resize:
    post:
      summary: "Resize an exec instance"
      description: |
        Resize the TTY session used by an exec instance. This endpoint only works
        if `tty` was specified as part of creating and starting the exec instance.
      operationId: "DockerExecResize"
      responses:
        200:
          description: "No error"
        400:
          description: "bad parameter"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        404:
          description: "No such exec instance"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "Server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          description: "Exec instance ID"
          required: true
          schema:
            type: "string"
        - name: "h"
          in: "query"
          description: "Height of the TTY session in characters"
          schema:
            type: "integer"
        - name: "w"
          in: "query"
          description: "Width of the TTY session in characters"
          schema:
            type: "integer"
      tags: ["Exec"]
  /exec/{id}/json:
    get:
      summary: "Inspect an exec instance"
      description: "Return low-level information about an exec instance."
      operationId: "DockerExecInspect"
      produces:
        - "application/json"
      responses:
        200:
          description: "No error"
          schema:
            schema:
              type: "object"
            title: "ExecInspectResponse"
            properties:
              CanRemove:
                schema:
                  type: "boolean"
              DetachKeys:
                schema:
                  type: "string"
              ID:
                schema:
                  type: "string"
              Running:
                schema:
                  type: "boolean"
              ExitCode:
                schema:
                  type: "integer"
              ProcessConfig:
                $ref: "#/components/schemas/ProcessConfig"
              OpenStdin:
                schema:
                  type: "boolean"
              OpenStderr:
                schema:
                  type: "boolean"
              OpenStdout:
                schema:
                  type: "boolean"
              ContainerID:
                schema:
                  type: "string"
              Pid:
                schema:
                  type: "integer"
                description: "The system process ID for the exec process."
          examples:
            application/json:
              CanRemove: false
              ContainerID: "b53ee82b53a40c7dca428523e34f741f3abc51d9f297a14ff874bf761b995126"
              DetachKeys: ""
              ExitCode: 2
              ID: "f33bbfb39f5b142420f4759b2348913bd4a8d1a6d7fd56499cb41a1bb91d7b3b"
              OpenStderr: true
              OpenStdin: true
              OpenStdout: true
              ProcessConfig:
                arguments:
                  - "-c"
                  - "exit 2"
                entrypoint: "sh"
                privileged: false
                tty: true
                user: "1000"
              Running: false
              Pid: 42000
        404:
          description: "No such exec instance"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "Server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          description: "Exec instance ID"
          required: true
          schema:
            type: "string"
      tags: ["Exec"]

  /volumes:
    get:
      summary: "List volumes"
      operationId: "DockerVolumeList"
      produces: ["application/json"]

      responses:
        200:
          description: "Summary volume data that matches the query"
          content:
            application/json:
              title: "VolumeListResponse"
              description: "Volume list response"
              schema:
                type: "object"
                required: [Volumes, Warnings]
                properties:
                  Volumes:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/Volume"
                  Warnings:
                    type: "array"
                    items:
                      type: "string"
                    description: |
                      Warnings that occurred when fetching the list of volumes.
        500:
          description: "Server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "filters"
          in: "query"
          description: |
            JSON encoded value of the filters (a `map[string][]string`) to
            process on the volumes list. Available filters:

            - `dangling=<boolean>` When set to `true` (or `1`), returns all
               volumes that are not in use by a container. When set to `false`
               (or `0`), only volumes that are in use by one or more
               containers are returned.
            - `driver=<volume-driver-name>` Matches volumes based on their driver.
            - `label=<key>` or `label=<key>:<value>` Matches volumes based on
               the presence of a `label` alone or a `label` and a value.
            - `name=<volume-name>` Matches all or part of a volume name.
          schema:
            type: "string"
          format: "json"
      tags: ["Volume"]

  /volumes/create:
    post:
      summary: "Create a volume"
      operationId: "DockerVolumeCreate"
      consumes: ["application/json"]
      produces: ["application/json"]
      responses:
        201:
          description: "The volume was created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Volume"
        500:
          description: "Server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VolumeCreateOptions"
      tags: ["Volume"]

  /volumes/{name}:
    get:
      summary: "Inspect a volume"
      operationId: "DockerVolumeInspect"
      produces: ["application/json"]
      responses:
        200:
          description: "No error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Volume"
        404:
          description: "No such volume"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "Server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "name"
          in: "path"
          required: true
          description: "Volume name or ID"
          schema:
            type: "string"
      tags: ["Volume"]

    delete:
      summary: "Remove a volume"
      description: "Instruct the driver to remove the volume."
      operationId: "DockerVolumeDelete"
      responses:
        204:
          description: "The volume was removed"
        404:
          description: "No such volume or volume driver"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        409:
          description: "Volume is in use and cannot be removed"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "Server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "name"
          in: "path"
          required: true
          description: "Volume name or ID"
          schema:
            type: "string"
        - name: "force"
          in: "query"
          description: "Force the removal of the volume"
          schema:
            type: "boolean"
          default: false
      tags: ["Volume"]
  /volumes/prune:
    post:
      summary: "Delete unused volumes"
      produces:
        - "application/json"
      operationId: "DockerVolumePrune"
      parameters:
        - name: "filters"
          in: "query"
          description: |
            Filters to process on the prune list, encoded as JSON (a `map[string][]string`).

            Available filters:
            - `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune volumes with (or without, in case `label!=...` is used) the specified labels.
          schema:
            type: "string"
      responses:
        200:
          description: "No error"
          schema:
            schema:
              type: "object"
            title: "VolumePruneResponse"
            properties:
              VolumesDeleted:
                description: "Volumes that were deleted"
                schema:
                  type: "array"
                items:
                  schema:
                    type: "string"
              SpaceReclaimed:
                description: "Disk space reclaimed in bytes"
                schema:
                  type: "integer"
                format: "int64"
        500:
          description: "Server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      tags: ["Volume"]
  /networks:
    get:
      summary: "List networks"
      description: |
        Returns a list of networks. For details on the format, see the
        [network inspect endpoint](#operation/NetworkInspect).

        Note that it uses a different, smaller representation of a network than
        inspecting a single network. For example, the list of containers attached
        to the network is not propagated in API versions 1.28 and up.
      operationId: "DockerNetworkList"
      produces:
        - "application/json"
      responses:
        200:
          description: "No error"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Network"
          examples:
            application/json:
              - Name: "bridge"
                Id: "f2de39df4171b0dc801e8002d1d999b77256983dfc63041c0f34030aa3977566"
                Created: "2016-10-19T06:21:00.416543526Z"
                Scope: "local"
                Driver: "bridge"
                EnableIPv6: false
                Internal: false
                Attachable: false
                Ingress: false
                IPAM:
                  Driver: "default"
                  Config:
                    -
                      Subnet: "172.17.0.0/16"
                Options:
                  com.docker.network.bridge.default_bridge: "true"
                  com.docker.network.bridge.enable_icc: "true"
                  com.docker.network.bridge.enable_ip_masquerade: "true"
                  com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
                  com.docker.network.bridge.name: "docker0"
                  com.docker.network.driver.mtu: "1500"
              - Name: "none"
                Id: "e086a3893b05ab69242d3c44e49483a3bbbd3a26b46baa8f61ab797c1088d794"
                Created: "0001-01-01T00:00:00Z"
                Scope: "local"
                Driver: "null"
                EnableIPv6: false
                Internal: false
                Attachable: false
                Ingress: false
                IPAM:
                  Driver: "default"
                  Config: []
                Containers: {}
                Options: {}
              - Name: "host"
                Id: "13e871235c677f196c4e1ecebb9dc733b9b2d2ab589e30c539efeda84a24215e"
                Created: "0001-01-01T00:00:00Z"
                Scope: "local"
                Driver: "host"
                EnableIPv6: false
                Internal: false
                Attachable: false
                Ingress: false
                IPAM:
                  Driver: "default"
                  Config: []
                Containers: {}
                Options: {}
        500:
          description: "Server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "filters"
          in: "query"
          description: |
            JSON encoded value of the filters (a `map[string][]string`) to process
            on the networks list.

            Available filters:

            - `dangling=<boolean>` When set to `true` (or `1`), returns all
               networks that are not in use by a container. When set to `false`
               (or `0`), only networks that are in use by one or more
               containers are returned.
            - `driver=<driver-name>` Matches a network's driver.
            - `id=<network-id>` Matches all or part of a network ID.
            - `label=<key>` or `label=<key>=<value>` of a network label.
            - `name=<network-name>` Matches all or part of a network name.
            - `scope=["swarm"|"global"|"local"]` Filters networks by scope (`swarm`, `global`, or `local`).
            - `type=["custom"|"builtin"]` Filters networks by type. The `custom` keyword returns all user-defined networks.
          schema:
            type: "string"
      tags: ["Network"]

  /networks/{id}:
    get:
      summary: "Inspect a network"
      operationId: "DockerNetworkInspect"
      produces:
        - "application/json"
      responses:
        200:
          description: "No error"
          schema:
            $ref: "#/components/schemas/Network"
        404:
          description: "Network not found"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "Server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          description: "Network ID or name"
          required: true
          schema:
            type: "string"
        - name: "verbose"
          in: "query"
          description: "Detailed inspect output for troubleshooting"
          schema:
            type: "boolean"
          default: false
        - name: "scope"
          in: "query"
          description: "Filter the network by scope (swarm, global, or local)"
          schema:
            type: "string"
      tags: ["Network"]

    delete:
      summary: "Remove a network"
      operationId: "DockerNetworkDelete"
      responses:
        204:
          description: "No error"
        403:
          description: "operation not supported for pre-defined networks"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        404:
          description: "no such network"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "Server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          description: "Network ID or name"
          required: true
          schema:
            type: "string"
      tags: ["Network"]

  /networks/create:
    post:
      summary: "Create a network"
      operationId: "DockerNetworkCreate"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        201:
          description: "No error"
          schema:
            schema:
              type: "object"
            title: "NetworkCreateResponse"
            properties:
              Id:
                description: "The ID of the created network."
                schema:
                  type: "string"
              Warning:
                schema:
                  type: "string"
            example:
              Id: "22be93d5babb089c5aab8dbc369042fad48ff791584ca2da2100db837a1c7c30"
              Warning: ""
        403:
          description: "operation not supported for pre-defined networks"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        404:
          description: "plugin not found"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "Server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "networkConfig"
          in: "body"
          description: "Network configuration"
          required: true
          schema:
            schema:
              type: "object"
            title: "NetworkCreateRequest"
            required: ["Name"]
            properties:
              Name:
                description: "The network's name."
                schema:
                  type: "string"
              CheckDuplicate:
                description: |
                  Check for networks with duplicate names. Since Network is
                  primarily keyed based on a random ID and not on the name, and
                  network name is strictly a user-friendly alias to the network
                  which is uniquely identified using ID, there is no guaranteed
                  way to check for duplicates. CheckDuplicate is there to provide
                  a best effort checking of any networks which has the same name
                  but it is not guaranteed to catch all name collisions.
                schema:
                  type: "boolean"
              Driver:
                description: "Name of the network driver plugin to use."
                schema:
                  type: "string"
                default: "bridge"
              Internal:
                description: "Restrict external access to the network."
                schema:
                  type: "boolean"
              Attachable:
                description: |
                  Globally scoped network is manually attachable by regular
                  containers from workers in swarm mode.
                schema:
                  type: "boolean"
              Ingress:
                description: |
                  Ingress network is the network which provides the routing-mesh
                  in swarm mode.
                schema:
                  type: "boolean"
              IPAM:
                description: "Optional custom IP scheme for the network."
                $ref: "#/components/schemas/IPAM"
              EnableIPv6:
                description: "Enable IPv6 on the network."
                schema:
                  type: "boolean"
              Options:
                description: "Network specific options to be used by the drivers."
                schema:
                  type: "object"
                additionalProperties:
                  schema:
                    type: "string"
              Labels:
                description: "User-defined key/value metadata."
                schema:
                  type: "object"
                additionalProperties:
                  schema:
                    type: "string"
            example:
              Name: "isolated_nw"
              CheckDuplicate: false
              Driver: "bridge"
              EnableIPv6: true
              IPAM:
                Driver: "default"
                Config:
                  - Subnet: "172.20.0.0/16"
                    IPRange: "172.20.10.0/24"
                    Gateway: "172.20.10.11"
                  - Subnet: "2001:db8:abcd::/64"
                    Gateway: "2001:db8:abcd::1011"
                Options:
                  foo: "bar"
              Internal: true
              Attachable: false
              Ingress: false
              Options:
                com.docker.network.bridge.default_bridge: "true"
                com.docker.network.bridge.enable_icc: "true"
                com.docker.network.bridge.enable_ip_masquerade: "true"
                com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
                com.docker.network.bridge.name: "docker0"
                com.docker.network.driver.mtu: "1500"
              Labels:
                com.example.some-label: "some-value"
                com.example.some-other-label: "some-other-value"
      tags: ["Network"]

  /networks/{id}/connect:
    post:
      summary: "Connect a container to a network"
      operationId: "DockerNetworkConnect"
      consumes:
        - "application/json"
      responses:
        200:
          description: "No error"
        403:
          description: "Operation not supported for swarm scoped networks"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        404:
          description: "Network or container not found"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "Server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          description: "Network ID or name"
          required: true
          schema:
            type: "string"
        - name: "container"
          in: "body"
          required: true
          schema:
            schema:
              type: "object"
            title: "NetworkDisconnectRequest"
            properties:
              Container:
                schema:
                  type: "string"
                description: "The ID or name of the container to connect to the network."
              EndpointConfig:
                $ref: "#/components/schemas/EndpointSettings"
            example:
              Container: "3613f73ba0e4"
              EndpointConfig:
                IPAMConfig:
                  IPv4Address: "172.24.56.89"
                  IPv6Address: "2001:db8::5689"
      tags: ["Network"]

  /networks/{id}/disconnect:
    post:
      summary: "Disconnect a container from a network"
      operationId: "DockerNetworkDisconnect"
      consumes:
        - "application/json"
      responses:
        200:
          description: "No error"
        403:
          description: "Operation not supported for swarm scoped networks"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        404:
          description: "Network or container not found"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "Server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          description: "Network ID or name"
          required: true
          schema:
            type: "string"
        - name: "container"
          in: "body"
          required: true
          schema:
            schema:
              type: "object"
            title: "NetworkConnectRequest"
            properties:
              Container:
                schema:
                  type: "string"
                description: |
                  The ID or name of the container to disconnect from the network.
              Force:
                schema:
                  type: "boolean"
                description: |
                  Force the container to disconnect from the network.
      tags: ["Network"]
  /networks/prune:
    post:
      summary: "Delete unused networks"
      produces:
        - "application/json"
      operationId: "DockerNetworkPrune"
      parameters:
        - name: "filters"
          in: "query"
          description: |
            Filters to process on the prune list, encoded as JSON (a `map[string][]string`).

            Available filters:
            - `until=<timestamp>` Prune networks created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machine’s time.
            - `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune networks with (or without, in case `label!=...` is used) the specified labels.
          schema:
            type: "string"
      responses:
        200:
          description: "No error"
          schema:
            schema:
              type: "object"
            title: "NetworkPruneResponse"
            properties:
              NetworksDeleted:
                description: "Networks that were deleted"
                schema:
                  type: "array"
                items:
                  schema:
                    type: "string"
        500:
          description: "Server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      tags: ["Network"]
  /plugins:
    get:
      summary: "List plugins"
      operationId: "DockerPluginList"
      description: "Returns information about installed plugins."
      produces: ["application/json"]
      responses:
        200:
          description: "No error"
          schema:
            schema:
              type: "array"
            items:
              $ref: "#/components/schemas/Plugin"
        500:
          description: "Server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "filters"
          in: "query"
          schema:
            type: "string"
          description: |
            A JSON encoded value of the filters (a `map[string][]string`) to
            process on the plugin list.

            Available filters:

            - `capability=<capability name>`
            - `enable=<true>|<false>`
      tags: ["Plugin"]

  /plugins/privileges:
    get:
      summary: "Get plugin privileges"
      operationId: "DockerGetPluginPrivileges"
      responses:
        200:
          description: "no error"
          schema:
            schema:
              type: "array"
            items:
              $ref: "#/components/schemas/PluginPrivilege"
            example:
              - Name: "network"
                Description: ""
                Value:
                  - "host"
              - Name: "mount"
                Description: ""
                Value:
                  - "/data"
              - Name: "device"
                Description: ""
                Value:
                  - "/dev/cpu_dma_latency"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "remote"
          in: "query"
          description: |
            The name of the plugin. The `:latest` tag is optional, and is the
            default if omitted.
          required: true
          schema:
            type: "string"
      tags:
        - "Plugin"

  /plugins/pull:
    post:
      summary: "Install a plugin"
      operationId: "DockerPluginPull"
      description: |
        Pulls and installs a plugin. After the plugin is installed, it can be
        enabled using the [`POST /plugins/{name}/enable` endpoint](#operation/PostPluginsEnable).
      produces:
        - "application/json"
      responses:
        204:
          description: "no error"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "remote"
          in: "query"
          description: |
            Remote reference for plugin to install.

            The `:latest` tag is optional, and is used as the default if omitted.
          required: true
          schema:
            type: "string"
        - name: "name"
          in: "query"
          description: |
            Local name for the pulled plugin.

            The `:latest` tag is optional, and is used as the default if omitted.
          required: false
          schema:
            type: "string"
        - name: "X-Registry-Auth"
          in: "header"
          description: |
            A base64url-encoded auth configuration to use when pulling a plugin
            from a registry.

            Refer to the [authentication section](#section/Authentication) for
            details.
          schema:
            type: "string"
        - name: "body"
          in: "body"
          schema:
            schema:
              type: "array"
            items:
              $ref: "#/components/schemas/PluginPrivilege"
            example:
              - Name: "network"
                Description: ""
                Value:
                  - "host"
              - Name: "mount"
                Description: ""
                Value:
                  - "/data"
              - Name: "device"
                Description: ""
                Value:
                  - "/dev/cpu_dma_latency"
      tags: ["Plugin"]
  /plugins/{name}/json:
    get:
      summary: "Inspect a plugin"
      operationId: "DockerPluginInspect"
      responses:
        200:
          description: "no error"
          schema:
            $ref: "#/components/schemas/Plugin"
        404:
          description: "plugin is not installed"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "name"
          in: "path"
          description: |
            The name of the plugin. The `:latest` tag is optional, and is the
            default if omitted.
          required: true
          schema:
            type: "string"
      tags: ["Plugin"]
  /plugins/{name}:
    delete:
      summary: "Remove a plugin"
      operationId: "DockerPluginDelete"
      responses:
        200:
          description: "no error"
          schema:
            $ref: "#/components/schemas/Plugin"
        404:
          description: "plugin is not installed"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "name"
          in: "path"
          description: |
            The name of the plugin. The `:latest` tag is optional, and is the
            default if omitted.
          required: true
          schema:
            type: "string"
        - name: "force"
          in: "query"
          description: |
            Disable the plugin before removing. This may result in issues if the
            plugin is in use by a container.
          schema:
            type: "boolean"
          default: false
      tags: ["Plugin"]
  /plugins/{name}/enable:
    post:
      summary: "Enable a plugin"
      operationId: "DockerPluginEnable"
      responses:
        200:
          description: "no error"
        404:
          description: "plugin is not installed"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "name"
          in: "path"
          description: |
            The name of the plugin. The `:latest` tag is optional, and is the
            default if omitted.
          required: true
          schema:
            type: "string"
        - name: "timeout"
          in: "query"
          description: "Set the HTTP client timeout (in seconds)"
          schema:
            type: "integer"
          default: 0
      tags: ["Plugin"]
  /plugins/{name}/disable:
    post:
      summary: "Disable a plugin"
      operationId: "DockerPluginDisable"
      responses:
        200:
          description: "no error"
        404:
          description: "plugin is not installed"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "name"
          in: "path"
          description: |
            The name of the plugin. The `:latest` tag is optional, and is the
            default if omitted.
          required: true
          schema:
            type: "string"
      tags: ["Plugin"]
  /plugins/{name}/upgrade:
    post:
      summary: "Upgrade a plugin"
      operationId: "DockerPluginUpgrade"
      responses:
        204:
          description: "no error"
        404:
          description: "plugin not installed"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "name"
          in: "path"
          description: |
            The name of the plugin. The `:latest` tag is optional, and is the
            default if omitted.
          required: true
          schema:
            type: "string"
        - name: "remote"
          in: "query"
          description: |
            Remote reference to upgrade to.

            The `:latest` tag is optional, and is used as the default if omitted.
          required: true
          schema:
            type: "string"
        - name: "X-Registry-Auth"
          in: "header"
          description: |
            A base64url-encoded auth configuration to use when pulling a plugin
            from a registry.

            Refer to the [authentication section](#section/Authentication) for
            details.
          schema:
            type: "string"
        - name: "body"
          in: "body"
          schema:
            schema:
              type: "array"
            items:
              $ref: "#/components/schemas/PluginPrivilege"
            example:
              - Name: "network"
                Description: ""
                Value:
                  - "host"
              - Name: "mount"
                Description: ""
                Value:
                  - "/data"
              - Name: "device"
                Description: ""
                Value:
                  - "/dev/cpu_dma_latency"
      tags: ["Plugin"]
  /plugins/create:
    post:
      summary: "Create a plugin"
      operationId: "DockerPluginCreate"
      consumes:
        - "application/x-tar"
      responses:
        204:
          description: "no error"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "name"
          in: "query"
          description: |
            The name of the plugin. The `:latest` tag is optional, and is the
            default if omitted.
          required: true
          schema:
            type: "string"
        - name: "tarContext"
          in: "body"
          description: "Path to tar containing plugin rootfs and manifest"
          schema:
            schema:
              type: "string"
            format: "binary"
      tags: ["Plugin"]
  /plugins/{name}/push:
    post:
      summary: "Push a plugin"
      operationId: "DockerPluginPush"
      description: |
        Push a plugin to the registry.
      parameters:
        - name: "name"
          in: "path"
          description: |
            The name of the plugin. The `:latest` tag is optional, and is the
            default if omitted.
          required: true
          schema:
            type: "string"
      responses:
        200:
          description: "no error"
        404:
          description: "plugin not installed"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      tags: ["Plugin"]
  /plugins/{name}/set:
    post:
      summary: "Configure a plugin"
      operationId: "DockerPluginSet"
      consumes:
        - "application/json"
      parameters:
        - name: "name"
          in: "path"
          description: |
            The name of the plugin. The `:latest` tag is optional, and is the
            default if omitted.
          required: true
          schema:
            type: "string"
        - name: "body"
          in: "body"
          schema:
            schema:
              type: "array"
            items:
              schema:
                type: "string"
            example: ["DEBUG=1"]
      responses:
        204:
          description: "No error"
        404:
          description: "Plugin not installed"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "Server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      tags: ["Plugin"]
  /nodes:
    get:
      summary: "List nodes"
      operationId: "DockerNodeList"
      responses:
        200:
          description: "no error"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Node"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        503:
          description: "node is not part of a swarm"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "filters"
          in: "query"
          description: |
            Filters to process on the nodes list, encoded as JSON (a `map[string][]string`).

            Available filters:
            - `id=<node id>`
            - `label=<engine label>`
            - `membership=`(`accepted`|`pending`)`
            - `name=<node name>`
            - `node.label=<node label>`
            - `role=`(`manager`|`worker`)`
          schema:
            type: "string"
      tags: ["Node"]
  /nodes/{id}:
    get:
      summary: "Inspect a node"
      operationId: "DockerNodeInspect"
      responses:
        200:
          description: "no error"
          schema:
            $ref: "#/components/schemas/Node"
        404:
          description: "no such node"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        503:
          description: "node is not part of a swarm"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          description: "The ID or name of the node"
          schema:
            type: "string"
          required: true
      tags: ["Node"]
    delete:
      summary: "Delete a node"
      operationId: "DockerNodeDelete"
      responses:
        200:
          description: "no error"
        404:
          description: "no such node"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        503:
          description: "node is not part of a swarm"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          description: "The ID or name of the node"
          schema:
            type: "string"
          required: true
        - name: "force"
          in: "query"
          description: "Force remove a node from the swarm"
          default: false
          schema:
            type: "boolean"
      tags: ["Node"]
  /nodes/{id}/update:
    post:
      summary: "Update a node"
      operationId: "DockerNodeUpdate"
      responses:
        200:
          description: "no error"
        400:
          description: "bad parameter"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        404:
          description: "no such node"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        503:
          description: "node is not part of a swarm"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          description: "The ID of the node"
          schema:
            type: "string"
          required: true
        - name: "body"
          in: "body"
          schema:
            $ref: "#/components/schemas/NodeSpec"
        - name: "version"
          in: "query"
          description: |
            The version number of the node object being updated. This is required
            to avoid conflicting writes.
          schema:
            type: "integer"
          format: "int64"
          required: true
      tags: ["Node"]
  /swarm:
    get:
      summary: "Inspect swarm"
      operationId: "DockerSwarmInspect"
      responses:
        200:
          description: "no error"
          schema:
            $ref: "#/components/schemas/Swarm"
        404:
          description: "no such swarm"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        503:
          description: "node is not part of a swarm"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      tags: ["Swarm"]
  /swarm/init:
    post:
      summary: "Initialize a new swarm"
      operationId: "DockerSwarmInit"
      produces:
        - "application/json"
        - "text/plain"
      responses:
        200:
          description: "no error"
          schema:
            description: "The node ID"
            schema:
              type: "string"
            example: "7v2t30z9blmxuhnyo6s4cpenp"
        400:
          description: "bad parameter"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        503:
          description: "node is already part of a swarm"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            schema:
              type: "object"
            title: "SwarmInitRequest"
            properties:
              ListenAddr:
                description: |
                  Listen address used for inter-manager communication, as well
                  as determining the networking interface used for the VXLAN
                  Tunnel Endpoint (VTEP). This can either be an address/port
                  combination in the form `192.168.1.1:4567`, or an interface
                  followed by a port number, like `eth0:4567`. If the port number
                  is omitted, the default swarm listening port is used.
                schema:
                  type: "string"
              AdvertiseAddr:
                description: |
                  Externally reachable address advertised to other nodes. This
                  can either be an address/port combination in the form
                  `192.168.1.1:4567`, or an interface followed by a port number,
                  like `eth0:4567`. If the port number is omitted, the port
                  number from the listen address is used. If `AdvertiseAddr` is
                  not specified, it will be automatically detected when possible.
                schema:
                  type: "string"
              DataPathAddr:
                description: |
                  Address or interface to use for data path traffic (format:
                  `<ip|interface>`), for example,  `192.168.1.1`, or an interface,
                  like `eth0`. If `DataPathAddr` is unspecified, the same address
                  as `AdvertiseAddr` is used.

                  The `DataPathAddr` specifies the address that global scope
                  network drivers will publish towards other  nodes in order to
                  reach the containers running on this node. Using this parameter
                  it is possible to separate the container data traffic from the
                  management traffic of the cluster.
                schema:
                  type: "string"
              DataPathPort:
                description: |
                  DataPathPort specifies the data path port number for data traffic.
                  Acceptable port range is 1024 to 49151.
                  if no port is set or is set to 0, default port 4789 will be used.
                schema:
                  type: "integer"
                format: "uint32"
              DefaultAddrPool:
                description: |
                  Default Address Pool specifies default subnet pools for global
                  scope networks.
                schema:
                  type: "array"
                items:
                  schema:
                    type: "string"
                  example: ["10.10.0.0/16", "20.20.0.0/16"]
              ForceNewCluster:
                description: "Force creation of a new swarm."
                schema:
                  type: "boolean"
              SubnetSize:
                description: |
                  SubnetSize specifies the subnet size of the networks created
                  from the default subnet pool.
                schema:
                  type: "integer"
                format: "uint32"
              Spec:
                $ref: "#/components/schemas/SwarmSpec"
            example:
              ListenAddr: "0.0.0.0:2377"
              AdvertiseAddr: "192.168.1.1:2377"
              DataPathPort: 4789
              DefaultAddrPool: ["10.10.0.0/8", "20.20.0.0/8"]
              SubnetSize: 24
              ForceNewCluster: false
              Spec:
                Orchestration: {}
                Raft: {}
                Dispatcher: {}
                CAConfig: {}
                EncryptionConfig:
                  AutoLockManagers: false
      tags: ["Swarm"]
  /swarm/join:
    post:
      summary: "Join an existing swarm"
      operationId: "DockerSwarmJoin"
      responses:
        200:
          description: "no error"
        400:
          description: "bad parameter"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        503:
          description: "node is already part of a swarm"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            schema:
              type: "object"
            title: "SwarmJoinRequest"
            properties:
              ListenAddr:
                description: |
                  Listen address used for inter-manager communication if the node
                  gets promoted to manager, as well as determining the networking
                  interface used for the VXLAN Tunnel Endpoint (VTEP).
                schema:
                  type: "string"
              AdvertiseAddr:
                description: |
                  Externally reachable address advertised to other nodes. This
                  can either be an address/port combination in the form
                  `192.168.1.1:4567`, or an interface followed by a port number,
                  like `eth0:4567`. If the port number is omitted, the port
                  number from the listen address is used. If `AdvertiseAddr` is
                  not specified, it will be automatically detected when possible.
                schema:
                  type: "string"
              DataPathAddr:
                description: |
                  Address or interface to use for data path traffic (format:
                  `<ip|interface>`), for example,  `192.168.1.1`, or an interface,
                  like `eth0`. If `DataPathAddr` is unspecified, the same addres
                  as `AdvertiseAddr` is used.

                  The `DataPathAddr` specifies the address that global scope
                  network drivers will publish towards other nodes in order to
                  reach the containers running on this node. Using this parameter
                  it is possible to separate the container data traffic from the
                  management traffic of the cluster.

                schema:
                  type: "string"
              RemoteAddrs:
                description: |
                  Addresses of manager nodes already participating in the swarm.
                schema:
                  type: "array"
                items:
                  schema:
                    type: "string"
              JoinToken:
                description: "Secret token for joining this swarm."
                schema:
                  type: "string"
            example:
              ListenAddr: "0.0.0.0:2377"
              AdvertiseAddr: "192.168.1.1:2377"
              RemoteAddrs:
                - "node1:2377"
              JoinToken: "SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-7p73s1dx5in4tatdymyhg9hu2"
      tags: ["Swarm"]
  /swarm/leave:
    post:
      summary: "Leave a swarm"
      operationId: "DockerSwarmLeave"
      responses:
        200:
          description: "no error"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        503:
          description: "node is not part of a swarm"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "force"
          description: |
            Force leave swarm, even if this is the last manager or that it will
            break the cluster.
          in: "query"
          schema:
            type: "boolean"
          default: false
      tags: ["Swarm"]
  /swarm/update:
    post:
      summary: "Update a swarm"
      operationId: "DockerSwarmUpdate"
      responses:
        200:
          description: "no error"
        400:
          description: "bad parameter"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        503:
          description: "node is not part of a swarm"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/components/schemas/SwarmSpec"
        - name: "version"
          in: "query"
          description: |
            The version number of the swarm object being updated. This is
            required to avoid conflicting writes.
          schema:
            type: "integer"
          format: "int64"
          required: true
        - name: "rotateWorkerToken"
          in: "query"
          description: "Rotate the worker join token."
          schema:
            type: "boolean"
          default: false
        - name: "rotateManagerToken"
          in: "query"
          description: "Rotate the manager join token."
          schema:
            type: "boolean"
          default: false
        - name: "rotateManagerUnlockKey"
          in: "query"
          description: "Rotate the manager unlock key."
          schema:
            type: "boolean"
          default: false
      tags: ["Swarm"]
  /swarm/unlockkey:
    get:
      summary: "Get the unlock key"
      operationId: "DockerSwarmUnlockkey"
      consumes:
        - "application/json"
      responses:
        200:
          description: "no error"
          schema:
            schema:
              type: "object"
            title: "UnlockKeyResponse"
            properties:
              UnlockKey:
                description: "The swarm's unlock key."
                schema:
                  type: "string"
            example:
              UnlockKey: "SWMKEY-1-7c37Cc8654o6p38HnroywCi19pllOnGtbdZEgtKxZu8"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        503:
          description: "node is not part of a swarm"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      tags: ["Swarm"]
  /swarm/unlock:
    post:
      summary: "Unlock a locked manager"
      operationId: "DockerSwarmUnlock"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            schema:
              type: "object"
            title: "SwarmUnlockRequest"
            properties:
              UnlockKey:
                description: "The swarm's unlock key."
                schema:
                  type: "string"
            example:
              UnlockKey: "SWMKEY-1-7c37Cc8654o6p38HnroywCi19pllOnGtbdZEgtKxZu8"
      responses:
        200:
          description: "no error"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        503:
          description: "node is not part of a swarm"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      tags: ["Swarm"]
  /services:
    get:
      summary: "List services"
      operationId: "DockerServiceList"
      responses:
        200:
          description: "no error"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Service"
        500:
          description: "server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        503:
          description: "node is not part of a swarm"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "filters"
          in: "query"
          schema:
            type: "string"
          description: |
            A JSON encoded value of the filters (a `map[string][]string`) to
            process on the services list.

            Available filters:

            - `id=<service id>`
            - `label=<service label>`
            - `mode=["replicated"|"global"]`
            - `name=<service name>`
        - name: "status"
          in: "query"
          schema:
            type: "boolean"
          description: |
            Include service status, with count of running and desired tasks.
      tags: ["Service"]
  /services/create:
    post:
      summary: "Create a service"
      operationId: "DockerServiceCreate"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        201:
          description: "no error"
          schema:
            schema:
              type: "object"
            title: "ServiceCreateResponse"
            properties:
              ID:
                description: "The ID of the created service."
                schema:
                  type: "string"
              Warning:
                description: "Optional warning message"
                schema:
                  type: "string"
            example:
              ID: "ak7w3gjqoa3kuz8xcpnyy0pvl"
              Warning: "unable to pin image doesnotexist:latest to digest: image library/doesnotexist:latest not found"
        400:
          description: "bad parameter"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        403:
          description: "network is not eligible for services"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        409:
          description: "name conflicts with an existing service"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        503:
          description: "node is not part of a swarm"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "X-Registry-Auth"
          in: "header"
          description: |
            A base64url-encoded auth configuration for pulling from private
            registries.

            Refer to the [authentication section](#section/Authentication) for
            details.
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ServiceSpec"
                - type: "object"
                  example:
                    Name: "web"
                    TaskTemplate:
                      ContainerSpec:
                        Image: "nginx:alpine"
                        Mounts:
                          -
                            ReadOnly: true
                            Source: "web-data"
                            Target: "/usr/share/nginx/html"
                            Type: "volume"
                            VolumeOptions:
                              DriverConfig: {}
                              Labels:
                                com.example.something: "something-value"
                        Hosts: ["10.10.10.10 host1", "ABCD:EF01:2345:6789:ABCD:EF01:2345:6789 host2"]
                        User: "33"
                        DNSConfig:
                          Nameservers: ["8.8.8.8"]
                          Search: ["example.org"]
                          Options: ["timeout:3"]
                        Secrets:
                          -
                            File:
                              Name: "www.example.org.key"
                              UID: "33"
                              GID: "33"
                              Mode: 384
                            SecretID: "fpjqlhnwb19zds35k8wn80lq9"
                            SecretName: "example_org_domain_key"
                      LogDriver:
                        Name: "json-file"
                        Options:
                          max-file: "3"
                          max-size: "10M"
                      Placement: {}
                      Resources:
                        Limits:
                          MemoryBytes: 104857600
                        Reservations: {}
                      RestartPolicy:
                        Condition: "on-failure"
                        Delay: 10000000000
                        MaxAttempts: 10
                    Mode:
                      Replicated:
                        Replicas: 4
                    UpdateConfig:
                      Parallelism: 2
                      Delay: 1000000000
                      FailureAction: "pause"
                      Monitor: 15000000000
                      MaxFailureRatio: 0.15
                    RollbackConfig:
                      Parallelism: 1
                      Delay: 1000000000
                      FailureAction: "pause"
                      Monitor: 15000000000
                      MaxFailureRatio: 0.15
                    EndpointSpec:
                      Ports:
                        -
                          Protocol: "tcp"
                          PublishedPort: 8080
                          TargetPort: 80
                    Labels:
                      foo: "bar"
      tags: ["Service"]
  /services/{id}:
    get:
      summary: "Inspect a service"
      operationId: "DockerServiceInspect"
      responses:
        200:
          description: "no error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Service"
        404:
          description: "no such service"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        503:
          description: "node is not part of a swarm"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          description: "ID or name of service."
          required: true
          schema:
            type: "string"
        - name: "insertDefaults"
          in: "query"
          description: "Fill empty fields with default values."
          schema:
            type: "boolean"
          default: false
      tags: ["Service"]
    delete:
      summary: "Delete a service"
      operationId: "DockerServiceDelete"
      responses:
        200:
          description: "no error"
        404:
          description: "no such service"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        503:
          description: "node is not part of a swarm"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          description: "ID or name of service."
          required: true
          schema:
            type: "string"
      tags: ["Service"]
  /services/{id}/update:
    post:
      summary: "Update a service"
      operationId: "DockerServiceUpdate"
      consumes: ["application/json"]
      produces: ["application/json"]
      responses:
        200:
          description: "no error"
          schema:
            $ref: "#/components/schemas/ServiceUpdateResponse"
        400:
          description: "bad parameter"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        404:
          description: "no such service"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        503:
          description: "node is not part of a swarm"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          description: "ID or name of service."
          required: true
          schema:
            type: "string"
        - name: "body"
          in: "body"
          required: true
          schema:
            allOf:
              - $ref: "#/components/schemas/ServiceSpec"
              - type: "object"
                example:
                  Name: "top"
                  TaskTemplate:
                    ContainerSpec:
                      Image: "busybox"
                      Args:
                        - "top"
                    Resources:
                      Limits: {}
                      Reservations: {}
                    RestartPolicy:
                      Condition: "any"
                      MaxAttempts: 0
                    Placement: {}
                    ForceUpdate: 0
                  Mode:
                    Replicated:
                      Replicas: 1
                  UpdateConfig:
                    Parallelism: 2
                    Delay: 1000000000
                    FailureAction: "pause"
                    Monitor: 15000000000
                    MaxFailureRatio: 0.15
                  RollbackConfig:
                    Parallelism: 1
                    Delay: 1000000000
                    FailureAction: "pause"
                    Monitor: 15000000000
                    MaxFailureRatio: 0.15
                  EndpointSpec:
                    Mode: "vip"

        - name: "version"
          in: "query"
          description: |
            The version number of the service object being updated. This is
            required to avoid conflicting writes.
            This version number should be the value as currently set on the
            service *before* the update. You can find the current version by
            calling `GET /services/{id}`
          required: true
          schema:
            type: "integer"
        - name: "registryAuthFrom"
          in: "query"
          description: |
            If the `X-Registry-Auth` header is not specified, this parameter
            indicates where to find registry authorization credentials.
          schema:
            type: "string"
          enum: ["spec", "previous-spec"]
          default: "spec"
        - name: "rollback"
          in: "query"
          description: |
            Set to this parameter to `previous` to cause a server-side rollback
            to the previous service spec. The supplied spec will be ignored in
            this case.
          schema:
            type: "string"
        - name: "X-Registry-Auth"
          in: "header"
          description: |
            A base64url-encoded auth configuration for pulling from private
            registries.

            Refer to the [authentication section](#section/Authentication) for
            details.
          schema:
            type: "string"

      tags: ["Service"]
  /services/{id}/logs:
    get:
      summary: "Get service logs"
      description: |
        Get `stdout` and `stderr` logs from a service. See also
        [`/containers/{id}/logs`](#operation/ContainerLogs).

        **Note**: This endpoint works only for services with the `local`,
        `json-file` or `journald` logging drivers.
      operationId: "DockerServiceLogs"
      responses:
        200:
          description: "logs returned as a stream in response body"
          schema:
            schema:
              type: "string"
            format: "binary"
        404:
          description: "no such service"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            application/json:
              message: "No such service: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        503:
          description: "node is not part of a swarm"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "ID or name of the service"
          schema:
            type: "string"
        - name: "details"
          in: "query"
          description: "Show service context and extra details provided to logs."
          schema:
            type: "boolean"
          default: false
        - name: "follow"
          in: "query"
          description: "Keep connection after returning logs."
          schema:
            type: "boolean"
          default: false
        - name: "websocket"
          in: "query"
          description: "Upgrade to websocket"
          schema:
            type: "boolean"
          default: false
        - name: "stdout"
          in: "query"
          description: "Return logs from `stdout`"
          schema:
            type: "boolean"
          default: false
        - name: "stderr"
          in: "query"
          description: "Return logs from `stderr`"
          schema:
            type: "boolean"
          default: false
        - name: "since"
          in: "query"
          description: "Only return logs since this time, as a UNIX timestamp"
          schema:
            type: "integer"
          default: 0
        - name: "timestamps"
          in: "query"
          description: "Add timestamps to every log line"
          schema:
            type: "boolean"
          default: false
        - name: "tail"
          in: "query"
          description: |
            Only return this number of log lines from the end of the logs.
            Specify as an integer or `all` to output all log lines.
          schema:
            type: "string"
          default: "all"
      tags: ["Service"]
  /tasks:
    get:
      summary: "List tasks"
      operationId: "DockerTaskList"
      produces:
        - "application/json"
      responses:
        200:
          description: "no error"
          schema:
            schema:
              type: "array"
            items:
              $ref: "#/components/schemas/Task"
            example:
              - ID: "0kzzo1i0y4jz6027t0k7aezc7"
                Version:
                  Index: 71
                CreatedAt: "2016-06-07T21:07:31.171892745Z"
                UpdatedAt: "2016-06-07T21:07:31.376370513Z"
                Spec:
                  ContainerSpec:
                    Image: "redis"
                  Resources:
                    Limits: {}
                    Reservations: {}
                  RestartPolicy:
                    Condition: "any"
                    MaxAttempts: 0
                  Placement: {}
                ServiceID: "9mnpnzenvg8p8tdbtq4wvbkcz"
                Slot: 1
                NodeID: "60gvrl6tm78dmak4yl7srz94v"
                Status:
                  Timestamp: "2016-06-07T21:07:31.290032978Z"
                  State: "running"
                  Message: "started"
                  ContainerStatus:
                    ContainerID: "e5d62702a1b48d01c3e02ca1e0212a250801fa8d67caca0b6f35919ebc12f035"
                    PID: 677
                DesiredState: "running"
                NetworksAttachments:
                  - Network:
                      ID: "4qvuz4ko70xaltuqbt8956gd1"
                      Version:
                        Index: 18
                      CreatedAt: "2016-06-07T20:31:11.912919752Z"
                      UpdatedAt: "2016-06-07T21:07:29.955277358Z"
                      Spec:
                        Name: "ingress"
                        Labels:
                          com.docker.swarm.internal: "true"
                        DriverConfiguration: {}
                        IPAMOptions:
                          Driver: {}
                          Configs:
                            - Subnet: "10.255.0.0/16"
                              Gateway: "10.255.0.1"
                      DriverState:
                        Name: "overlay"
                        Options:
                          com.docker.network.driver.overlay.vxlanid_list: "256"
                      IPAMOptions:
                        Driver:
                          Name: "default"
                        Configs:
                          - Subnet: "10.255.0.0/16"
                            Gateway: "10.255.0.1"
                    Addresses:
                      - "10.255.0.10/16"
              - ID: "1yljwbmlr8er2waf8orvqpwms"
                Version:
                  Index: 30
                CreatedAt: "2016-06-07T21:07:30.019104782Z"
                UpdatedAt: "2016-06-07T21:07:30.231958098Z"
                Name: "hopeful_cori"
                Spec:
                  ContainerSpec:
                    Image: "redis"
                  Resources:
                    Limits: {}
                    Reservations: {}
                  RestartPolicy:
                    Condition: "any"
                    MaxAttempts: 0
                  Placement: {}
                ServiceID: "9mnpnzenvg8p8tdbtq4wvbkcz"
                Slot: 1
                NodeID: "60gvrl6tm78dmak4yl7srz94v"
                Status:
                  Timestamp: "2016-06-07T21:07:30.202183143Z"
                  State: "shutdown"
                  Message: "shutdown"
                  ContainerStatus:
                    ContainerID: "1cf8d63d18e79668b0004a4be4c6ee58cddfad2dae29506d8781581d0688a213"
                DesiredState: "shutdown"
                NetworksAttachments:
                  - Network:
                      ID: "4qvuz4ko70xaltuqbt8956gd1"
                      Version:
                        Index: 18
                      CreatedAt: "2016-06-07T20:31:11.912919752Z"
                      UpdatedAt: "2016-06-07T21:07:29.955277358Z"
                      Spec:
                        Name: "ingress"
                        Labels:
                          com.docker.swarm.internal: "true"
                        DriverConfiguration: {}
                        IPAMOptions:
                          Driver: {}
                          Configs:
                            - Subnet: "10.255.0.0/16"
                              Gateway: "10.255.0.1"
                      DriverState:
                        Name: "overlay"
                        Options:
                          com.docker.network.driver.overlay.vxlanid_list: "256"
                      IPAMOptions:
                        Driver:
                          Name: "default"
                        Configs:
                          - Subnet: "10.255.0.0/16"
                            Gateway: "10.255.0.1"
                    Addresses:
                      - "10.255.0.5/16"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        503:
          description: "node is not part of a swarm"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "filters"
          in: "query"
          schema:
            type: "string"
          description: |
            A JSON encoded value of the filters (a `map[string][]string`) to
            process on the tasks list.

            Available filters:

            - `desired-state=(running | shutdown | accepted)`
            - `id=<task id>`
            - `label=key` or `label="key=value"`
            - `name=<task name>`
            - `node=<node id or name>`
            - `service=<service name>`
      tags: ["Task"]
  /tasks/{id}:
    get:
      summary: "Inspect a task"
      operationId: "DockerTaskInspect"
      produces:
        - "application/json"
      responses:
        200:
          description: "no error"
          schema:
            $ref: "#/components/schemas/Task"
        404:
          description: "no such task"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        503:
          description: "node is not part of a swarm"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the task"
          required: true
          schema:
            type: "string"
      tags: ["Task"]
  /tasks/{id}/logs:
    get:
      summary: "Get task logs"
      description: |
        Get `stdout` and `stderr` logs from a task.
        See also [`/containers/{id}/logs`](#operation/ContainerLogs).

        **Note**: This endpoint works only for services with the `local`,
        `json-file` or `journald` logging drivers.
      operationId: "DockerTaskLogs"
      responses:
        200:
          description: "logs returned as a stream in response body"
          schema:
            schema:
              type: "string"
            format: "binary"
        404:
          description: "no such task"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            application/json:
              message: "No such task: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        503:
          description: "node is not part of a swarm"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "ID of the task"
          schema:
            type: "string"
        - name: "details"
          in: "query"
          description: "Show task context and extra details provided to logs."
          schema:
            type: "boolean"
          default: false
        - name: "follow"
          in: "query"
          description: "Keep connection after returning logs."
          schema:
            type: "boolean"
          default: false
        - name: "stdout"
          in: "query"
          description: "Return logs from `stdout`"
          schema:
            type: "boolean"
          default: false
        - name: "stderr"
          in: "query"
          description: "Return logs from `stderr`"
          schema:
            type: "boolean"
          default: false
        - name: "since"
          in: "query"
          description: "Only return logs since this time, as a UNIX timestamp"
          schema:
            type: "integer"
          default: 0
        - name: "timestamps"
          in: "query"
          description: "Add timestamps to every log line"
          schema:
            type: "boolean"
          default: false
        - name: "tail"
          in: "query"
          description: |
            Only return this number of log lines from the end of the logs.
            Specify as an integer or `all` to output all log lines.
          schema:
            type: "string"
          default: "all"
      tags: ["Task"]
  /secrets:
    get:
      summary: "List secrets"
      operationId: "DockerSecretList"
      produces:
        - "application/json"
      responses:
        200:
          description: "no error"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Secret"
                  example:
                    - ID: "blt1owaxmitz71s9v5zh81zun"
                      Version:
                        Index: 85
                      CreatedAt: "2017-07-20T13:55:28.678958722Z"
                      UpdatedAt: "2017-07-20T13:55:28.678958722Z"
                      Spec:
                        Name: "mysql-passwd"
                        Labels:
                          some.label: "some.value"
                        Driver:
                          Name: "secret-bucket"
                          Options:
                            OptionA: "value for driver option A"
                            OptionB: "value for driver option B"
                    - ID: "ktnbjxoalbkvbvedmg1urrz8h"
                      Version:
                        Index: 11
                      CreatedAt: "2016-11-05T01:20:17.327670065Z"
                      UpdatedAt: "2016-11-05T01:20:17.327670065Z"
                      Spec:
                        Name: "app-dev.crt"
                        Labels:
                          foo: "bar"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        503:
          description: "node is not part of a swarm"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "filters"
          in: "query"
          schema:
            type: "string"
          description: |
            A JSON encoded value of the filters (a `map[string][]string`) to
            process on the secrets list.

            Available filters:

            - `id=<secret id>`
            - `label=<key> or label=<key>=value`
            - `name=<secret name>`
            - `names=<secret name>`
      tags: ["Secret"]
  /secrets/create:
    post:
      summary: "Create a secret"
      operationId: "DockerSecretCreate"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        201:
          description: "no error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdResponse"
        409:
          description: "name conflicts with an existing object"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        503:
          description: "node is not part of a swarm"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      requestBody:
          content:
            application/json:
              schema:
                allOf:
                - $ref: "#/components/schemas/SecretSpec"
                - type: "object"
                  example:
                    Name: "app-key.crt"
                    Labels:
                      foo: "bar"
                    Data: "VEhJUyBJUyBOT1QgQSBSRUFMIENFUlRJRklDQVRFCg=="
                    Driver:
                      Name: "secret-bucket"
                      Options:
                        OptionA: "value for driver option A"
                        OptionB: "value for driver option B"
      tags: ["Secret"]
  /secrets/{id}:
    get:
      summary: "Inspect a secret"
      operationId: "DockerSecretInspect"
      produces:
        - "application/json"
      responses:
        200:
          description: "no error"
          schema:
            $ref: "#/components/schemas/Secret"
          examples:
            application/json:
              ID: "ktnbjxoalbkvbvedmg1urrz8h"
              Version:
                Index: 11
              CreatedAt: "2016-11-05T01:20:17.327670065Z"
              UpdatedAt: "2016-11-05T01:20:17.327670065Z"
              Spec:
                Name: "app-dev.crt"
                Labels:
                  foo: "bar"
                Driver:
                  Name: "secret-bucket"
                  Options:
                    OptionA: "value for driver option A"
                    OptionB: "value for driver option B"

        404:
          description: "secret not found"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        503:
          description: "node is not part of a swarm"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
          description: "ID of the secret"
      tags: ["Secret"]
    delete:
      summary: "Delete a secret"
      operationId: "DockerSecretDelete"
      produces:
        - "application/json"
      responses:
        204:
          description: "no error"
        404:
          description: "secret not found"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        503:
          description: "node is not part of a swarm"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
          description: "ID of the secret"
      tags: ["Secret"]
  /secrets/{id}/update:
    post:
      summary: "Update a Secret"
      operationId: "DockerSecretUpdate"
      responses:
        200:
          description: "no error"
        400:
          description: "bad parameter"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        404:
          description: "no such secret"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        503:
          description: "node is not part of a swarm"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          description: "The ID or name of the secret"
          schema:
            type: "string"
          required: true
        - name: "body"
          in: "body"
          schema:
            $ref: "#/components/schemas/SecretSpec"
          description: |
            The spec of the secret to update. Currently, only the Labels field
            can be updated. All other fields must remain unchanged from the
            [SecretInspect endpoint](#operation/SecretInspect) response values.
        - name: "version"
          in: "query"
          description: |
            The version number of the secret object being updated. This is
            required to avoid conflicting writes.
          schema:
            type: "integer"
          format: "int64"
          required: true
      tags: ["Secret"]
  /configs:
    get:
      summary: "List configs"
      operationId: "DockerConfigList"
      produces:
        - "application/json"
      responses:
        200:
          description: "no error"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Config"
                  example:
                    - ID: "ktnbjxoalbkvbvedmg1urrz8h"
                      Version:
                        Index: 11
                      CreatedAt: "2016-11-05T01:20:17.327670065Z"
                      UpdatedAt: "2016-11-05T01:20:17.327670065Z"
                      Spec:
                        Name: "server.conf"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        503:
          description: "node is not part of a swarm"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "filters"
          in: "query"
          schema:
            type: "string"
          description: |
            A JSON encoded value of the filters (a `map[string][]string`) to
            process on the configs list.

            Available filters:

            - `id=<config id>`
            - `label=<key> or label=<key>=value`
            - `name=<config name>`
            - `names=<config name>`
      tags: ["Config"]
  /configs/create:
    post:
      summary: "Create a config"
      operationId: "DockerConfigCreate"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        201:
          description: "no error"
          schema:
            $ref: "#/components/schemas/IdResponse"
        409:
          description: "name conflicts with an existing object"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        503:
          description: "node is not part of a swarm"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      requestBody:
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ConfigSpec"
                  - type: "object"
                    example:
                      Name: "server.conf"
                      Labels:
                        foo: "bar"
                      Data: "VEhJUyBJUyBOT1QgQSBSRUFMIENFUlRJRklDQVRFCg=="
      tags: ["Config"]
  /configs/{id}:
    get:
      summary: "Inspect a config"
      operationId: "DockerConfigInspect"
      produces:
        - "application/json"
      responses:
        200:
          description: "no error"
          schema:
            $ref: "#/components/schemas/Config"
          examples:
            application/json:
              ID: "ktnbjxoalbkvbvedmg1urrz8h"
              Version:
                Index: 11
              CreatedAt: "2016-11-05T01:20:17.327670065Z"
              UpdatedAt: "2016-11-05T01:20:17.327670065Z"
              Spec:
                Name: "app-dev.crt"
        404:
          description: "config not found"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        503:
          description: "node is not part of a swarm"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
          description: "ID of the config"
      tags: ["Config"]
    delete:
      summary: "Delete a config"
      operationId: "DockerConfigDelete"
      produces:
        - "application/json"
      responses:
        204:
          description: "no error"
        404:
          description: "config not found"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        503:
          description: "node is not part of a swarm"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
          description: "ID of the config"
      tags: ["Config"]
  /configs/{id}/update:
    post:
      summary: "Update a Config"
      operationId: "DockerConfigUpdate"
      responses:
        200:
          description: "no error"
        400:
          description: "bad parameter"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        404:
          description: "no such config"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        503:
          description: "node is not part of a swarm"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      requestBody:
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ConfigSpec"
                  - type: "object"
                    example:
                      Name: "server.conf"
                      Labels:
                        foo: "bar"
                      Data: "VEhJUyBJUyBOT1QgQSBSRUFMIENFUlRJRklDQVRFCg=="
      parameters:
        - name: "id"
          in: "path"
          description: "The ID or name of the config"
          schema:
            type: "string"
          required: true
        - name: "body"
          in: "body"
          schema:
            $ref: "#/components/schemas/ConfigSpec"
          description: |
            The spec of the config to update. Currently, only the Labels field
            can be updated. All other fields must remain unchanged from the
            [ConfigInspect endpoint](#operation/ConfigInspect) response values.
        - name: "version"
          in: "query"
          description: |
            The version number of the config object being updated. This is
            required to avoid conflicting writes.
          schema:
            type: "integer"
          format: "int64"
          required: true
      tags: ["Config"]
  /distribution/{name}/json:
    get:
      summary: "Get image information from the registry"
      description: |
        Return image digest and platform information by contacting the registry.
      operationId: "DockerDistributionInspect"
      produces:
        - "application/json"
      responses:
        200:
          description: "descriptor and platform information"
          schema:
            $ref: "#/components/schemas/DistributionInspect"
        401:
          description: "Failed authentication or no image found"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            application/json:
              message: "No such image: someimage (tag: latest)"
        500:
          description: "Server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "name"
          in: "path"
          description: "Image name or id"
          schema:
            type: "string"
          required: true
      tags: ["Distribution"]
  /session:
    post:
      summary: "Initialize interactive session"
      description: |
        Start a new interactive session with a server. Session allows server to
        call back to the client for advanced capabilities.

        ### Hijacking

        This endpoint hijacks the HTTP connection to HTTP2 transport that allows
        the client to expose gPRC services on that connection.

        For example, the client sends this request to upgrade the connection:

        ```
        POST /session HTTP/1.1
        Upgrade: h2c
        Connection: Upgrade
        ```

        The Docker daemon responds with a `101 UPGRADED` response follow with
        the raw stream:

        ```
        HTTP/1.1 101 UPGRADED
        Connection: Upgrade
        Upgrade: h2c
        ```
      operationId: "DockerSession"
      produces:
        - "application/vnd.docker.raw-stream"
      responses:
        101:
          description: "no error, hijacking successful"
        400:
          description: "bad parameter"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      tags: ["Session"]




  /services/{id}/archive:
    head:
      summary: "Get information about files in a container"
      description: |
        A response header `X-Docker-Container-Path-Stat` is returned, containing
        a base64 - encoded JSON object with some filesystem header information
        about the path.
      operationId: "DockerServiceArchiveInfo"
      responses:
        200:
          description: "no error"
          headers:
            X-Docker-Container-Path-Stat:
              schema:
                type: "string"
              description: |
                A base64 - encoded JSON object with some filesystem header
                information about the path
        400:
          description: "Bad parameter"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        404:
          description: "Container or path does not exist"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "Server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "ID or name of the container"
          schema:
            type: "string"
        - name: "path"
          in: "query"
          required: true
          description: "Resource in the container’s filesystem to archive."
          schema:
            type: "string"
      tags: ["Container"]
    get:
      summary: "Get an archive of a filesystem resource in a container"
      description: "Get a tar archive of a resource in the filesystem of container id."
      operationId: "DockerServiceArchive"
      produces: ["application/x-tar"]
      responses:
        200:
          description: "no error"
        400:
          description: "Bad parameter"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
        404:
          description: "Container or path does not exist"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/components/schemas/ErrorResponse"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "ID or name of the container"
          schema:
            type: "string"
        - name: "path"
          in: "query"
          required: true
          description: "Resource in the container’s filesystem to archive."
          schema:
            type: "string"


  /apis/apps/v1:
    get:
      operationId: "getAppsV1APIResources"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"


  /apis/apps/v1/namespaces/{namespace}/deployments:
    get:
      operationId: listDeployments
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: fieldSelector
          in: query
          schema:
            type: string
        - name: labelSelector
          in: query
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.DeploymentList"
    post:
      operationId: createDeployment
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/components/schemas/k8s.Deployment'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/components/schemas/k8s.Deployment'
        '401':
          description: Unauthorized


  /apis/apps/v1/namespaces/{namespace}/deployments/{name}:
    get:
      operationId: getDeployment
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.Deployment"
    patch:
      operationId: patchDeployment
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/components/schemas/k8s.Deployment'
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.Deployment"
    delete:
      operationId: deleteDeployment
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: "OK"




  /apis/authorization.k8s.io/v1:
    get:
      operationId: "getAuthorizationV1APIResources"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"




  /apis/authorization.k8s.io/v1/selfsubjectaccessreviews:
    post:
      operationID: selfsubjectaccessreviews
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/components/schemas/k8s.SelfSubjectAccessReview'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/components/schemas/k8s.SelfSubjectAccessReview'




  /apis/certificates.k8s.io/v1:
    get:
      operationId: "getCertificatesV1APIResources"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"


  /apis/certificates.k8s.io/v1/certificatesigningrequests:
    get:
      operationId: listCertificateSigningRequests
      parameters:
        - name: fieldSelector
          in: query
          schema:
            type: string
        - name: labelSelector
          in: query
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.CertificateSigningRequestList"
    post:
      operationId: createCertificateSigningRequest
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/components/schemas/k8s.CertificateSigningRequest'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/components/schemas/k8s.CertificateSigningRequest'
        '401':
          description: Unauthorized


  /apis/certificates.k8s.io/v1/certificatesigningrequests/{name}:
    get:
      operationId: getCertificateSigningRequest
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.CertificateSigningRequest"
    patch:
      operationId: patchCertificateSigningRequest
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/components/schemas/k8s.CertificateSigningRequest'
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.CertificateSigningRequest"
    delete:
      operationId: deleteCertificateSigningRequest
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: "OK"


  /apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/approval:
    put:
      operationId: approveCertificateSigningRequest
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.CertificateSigningRequest"


  /:
    get:
      operationId: "getIndex"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Index"

  /version:
    get:
      operationId: "getCodeVersion"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CodeVersionInfo"

  /openapi/v2:
    get:
      operationId: "getOpenapi"
      responses:
        200:
          description: "OK"

  /api:
    get:
      operationId: "getCoreAPIVersions"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIVersions"

  /api/v1:
    get:
      operationId: "getCoreV1APIResources"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"

  /apis:
    get:
      operationId: "getAPIVersions"
      responses:
        401:
          description: "Unauthorized"
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroupList"


  /api/v1/namespaces/{namespace}/pods/{pod}/log:
    get:
      operationId: getPodLog
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: pod
          in: path
          required: true
          schema:
            type: string
        - name: container
          in: query
          required: false
          schema:
            type: string
        - name: follow
          in: query
          required: false
          schema:
            type: boolean
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.Pod"


  /api/v1/namespaces/{namespace}/pods/{pod}:
    get:
      operationId: getPod
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: pod
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.Pod"
    patch:
      operationId: patchPod
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: pod
          in: path
          required: true
          schema:
            type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/components/schemas/k8s.Pod'
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.Pod"
    delete:
      operationId: deletePod
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: pod
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: "OK"


  /api/v1/namespaces/{namespace}/pods:
    get:
      operationId: listPods
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: fieldSelector
          in: query
          schema:
            type: string
        - name: labelSelector
          in: query
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.PodList"
    post:
      operationId: createPod
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/components/schemas/k8s.Pod'
        - in: query
          name: fieldManager
          uniqueItems: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/components/schemas/k8s.Pod'
        '201':
          description: Created
          schema:
            $ref: '#/components/schemas/k8s.Pod'
        '202':
          description: Accepted
          schema:
            $ref: '#/components/schemas/k8s.Pod'
        '401':
          description: Unauthorized

  /api/v1/pods:
    get:
      operationId: listPodsAllNamespaces
      parameters:
        - name: fieldSelector
          in: query
          schema:
            type: string
        - name: labelSelector
          in: query
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.PodList"

  /api/v1/services:
    get:
      operationId: listServicesAllNamespaces
      parameters:
        - name: fieldSelector
          in: query
          schema:
            type: string
        - name: labelSelector
          in: query
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.ServiceList"

  /api/v1/namespaces/{namespace}/services:
    get:
      operationId: listServices
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: fieldSelector
          in: query
          schema:
            type: string
        - name: labelSelector
          in: query
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.ServiceList"
    post:
      operationId: createService
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/components/schemas/k8s.Service'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/components/schemas/k8s.Service'
        '201':
          description: Created
          schema:
            $ref: '#/components/schemas/k8s.Service'
        '202':
          description: Accepted
          schema:
            $ref: '#/components/schemas/k8s.Service'
        '401':
          description: Unauthorized


  /api/v1/namespaces/{namespace}/services/{service}:
    get:
      operationId: getService
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: service
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.Service"
    patch:
      operationId: patchService
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: service
          in: path
          required: true
          schema:
            type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/components/schemas/k8s.Service'
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.Service"
    delete:
      operationId: deleteService
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: service
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: "OK"







  /api/v1/namespaces/{namespace}/persistentvolumeclaims:
    get:
      operationId: listPersistentVolumeClaims
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: fieldSelector
          in: query
          schema:
            type: string
        - name: labelSelector
          in: query
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.PersistentVolumeClaimList"
    post:
      operationId: createPersistentVolumeClaim
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/components/schemas/k8s.PersistentVolumeClaim'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/components/schemas/k8s.PersistentVolumeClaim'
        '201':
          description: Created
          schema:
            $ref: '#/components/schemas/k8s.PersistentVolumeClaim'
        '202':
          description: Accepted
          schema:
            $ref: '#/components/schemas/k8s.PersistentVolumeClaim'
        '401':
          description: Unauthorized






  /api/v1/namespaces/{namespace}/persistentvolumeclaims/{persistentvolumeclaim}:
    get:
      operationId: getPersistentVolumeClaim
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: persistentvolumeclaim
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.PersistentVolumeClaim"
    patch:
      operationId: patchPersistentVolumeClaim
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: persistentvolumeclaim
          in: path
          required: true
          schema:
            type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/components/schemas/k8s.PersistentVolumeClaim'
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.PersistentVolumeClaim"
    delete:
      operationId: deletePersistentVolumeClaim
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: persistentvolumeclaim
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: "OK"





















  /api/v1/images:
    get:
      operationId: listImages
      parameters:
        - name: fieldSelector
          in: query
          schema:
            type: string
        - name: labelSelector
          in: query
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.ImageList"
    post:
      operationId: createImage
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/components/schemas/k8s.Image'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/components/schemas/k8s.Image'
        '201':
          description: Created
          schema:
            $ref: '#/components/schemas/k8s.Image'
        '202':
          description: Accepted
          schema:
            $ref: '#/components/schemas/k8s.Image'
        '401':
          description: Unauthorized

  /api/v1/images/{name}:
    get:
      operationId: getImage
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.Image"
    patch:
      operationId: patchImage
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/components/schemas/k8s.Image'
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.Image"
    delete:
      operationId: deleteImage
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: "OK"




  /api/v1/nodes:
    get:
      operationId: listNodes
      parameters:
        - name: fieldSelector
          in: query
          schema:
            type: string
        - name: labelSelector
          in: query
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.NodeList"
  /api/v1/nodes/{name}:
    get:
      operationId: getNode
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.Node"









  /api/v1/namespaces:
    get:
      operationId: listNamespaces
      parameters:
        - name: fieldSelector
          in: query
          schema:
            type: string
        - name: labelSelector
          in: query
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.NamespaceList"
    post:
      operationId: createNamespace
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/components/schemas/k8s.Namespace'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/components/schemas/k8s.Namespace'
        '401':
          description: Unauthorized

  /api/v1/namespaces/{name}:
    get:
      operationId: getNamespace
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.Namespace"
    patch:
      operationId: patchNamespace
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/components/schemas/k8s.Namespace'
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.Namespace"
    delete:
      operationId: deleteNamespace
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: recursive
          in: query
          required: false
          schema:
            type: boolean
        - name: immediate
          in: query
          required: false
          schema:
            type: boolean
      responses:
        204:
          description: "OK"









  /api/v1/serviceaccounts:
    get:
      operationId: listServiceAccounts
      parameters:
        - name: fieldSelector
          in: query
          schema:
            type: string
        - name: labelSelector
          in: query
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.ServiceAccountList"
    post:
      operationId: createServiceAccount
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/components/schemas/k8s.ServiceAccount'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/components/schemas/k8s.ServiceAccount'
        '401':
          description: Unauthorized

  /api/v1/serviceaccounts/{name}:
    get:
      operationId: getServiceAccount
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.ServiceAccount"
    patch:
      operationId: patchServiceAccount
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/components/schemas/k8s.ServiceAccount'
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.ServiceAccount"
    delete:
      operationId: deleteServiceAccount
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: "OK"













  /api/v1/namespaces/{namespace}/configmaps:
    get:
      operationId: listConfigMaps
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: fieldSelector
          in: query
          schema:
            type: string
        - name: labelSelector
          in: query
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.ConfigMapList"
    post:
      operationId: createConfigMap
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/components/schemas/k8s.ConfigMap'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/components/schemas/k8s.ConfigMap'
        '401':
          description: Unauthorized


  /api/v1/namespaces/{namespace}/configmaps/{name}:
    get:
      operationId: getConfigMap
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.ConfigMap"
    patch:
      operationId: patchConfigMap
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/components/schemas/k8s.ConfigMap'
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.ConfigMap"
    delete:
      operationId: deleteConfigMap
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: "OK"








  /api/v1/namespaces/{namespace}/secrets:
    get:
      operationId: listSecrets
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: fieldSelector
          in: query
          schema:
            type: string
        - name: labelSelector
          in: query
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.SecretList"
    post:
      operationId: createSecret
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/components/schemas/k8s.Secret'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/components/schemas/k8s.Secret'
        '401':
          description: Unauthorized


  /api/v1/namespaces/{namespace}/secrets/{name}:
    get:
      operationId: getSecret
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.Secret"
    patch:
      operationId: patchSecret
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/components/schemas/k8s.Secret'
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.Secret"
    put:
      operationId: replaceSecret
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/components/schemas/k8s.Secret'
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.Secret"
    delete:
      operationId: deleteSecret
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: "OK"


  /api/v1/endpoints:
    get:
      operationId: listEndpointsAllNamespaces
      parameters:
        - name: fieldSelector
          in: query
          schema:
            type: string
        - name: labelSelector
          in: query
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.EndpointsList"

  /api/v1/namespaces/{namespace}/endpoints:
    get:
      operationId: listEndpoints
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: fieldSelector
          in: query
          schema:
            type: string
        - name: labelSelector
          in: query
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.EndpointsList"

  /api/v1/namespaces/{namespace}/endpoints/{name}:
    get:
      operationId: getEndpoints
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.Endpoints"



  /apis/events.k8s.io/v1:
    get:
      operationId: "getEventsV1APIResources"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"



  /api/v1/namespaces/{namespace}/events:
    get:
      operationId: listNamespacesEvents
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: fieldSelector
          in: query
          schema:
            type: string
        - name: labelSelector
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
        - name: continue
          in: query
          schema:
            type: string
        - name: watch
          in: query
          schema:
            type: boolean
        - name: timeoutSeconds
          in: query
          schema:
            type: integer
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.EventList"


  /apis/networking.k8s.io:
    get:
      operationId: "getNetworkingAPIResources"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"

  /apis/networking.k8s.io/v1:
    get:
      operationId: "getNetworkingV1APIResources"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"



  /api/v1/namespaces/kube-system/endpoints/default-http-backend:
    get:
      operationId: getDefaultHttpBackend
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.IngressRuleHttpPathBackend"

  /api/v1/namespaces/kube-system/services/default-http-backend:
    get:
      operationId: getDefaultHttpBackendService
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": '#/components/schemas/k8s.Service'


  /apis/networking.k8s.io/v1/ingressclasses:
    get:
      operationId: listIngressClasses
      parameters:
        - name: fieldSelector
          in: query
          schema:
            type: string
        - name: labelSelector
          in: query
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.IngressClassList"

  /apis/networking.k8s.io/v1/ingressclasses/{name}:
    get:
      operationId: getIngressClass
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.IngressClass"



  /apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses:
    get:
      operationId: listIngresses
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: fieldSelector
          in: query
          schema:
            type: string
        - name: labelSelector
          in: query
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.IngressList"
    post:
      operationId: createIngress
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/components/schemas/k8s.Ingress'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/components/schemas/k8s.Ingress'
        '201':
          description: Created
          schema:
            $ref: '#/components/schemas/k8s.Ingress'
        '202':
          description: Accepted
          schema:
            $ref: '#/components/schemas/k8s.Ingress'
        '401':
          description: Unauthorized




  /apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}:
    get:
      operationId: getIngress
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.Ingress"
    patch:
      operationId: patchIngress
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/components/schemas/k8s.Ingress'
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.Ingress"
    delete:
      operationId: deleteIngress
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: "OK"



  /apis/storage.k8s.io/v1:
    get:
      operationId: "getStorageV1APIResources"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"


  /apis/storage.k8s.io/v1/storageclasses:
    get:
      operationId: listStorageClasses
      parameters:
        - name: fieldSelector
          in: query
          schema:
            type: string
        - name: labelSelector
          in: query
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.StorageClassList"

  /apis/storage.k8s.io/v1/storageclasses/{name}:
    get:
      operationId: getStorageClass
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.StorageClass"

  /apis/kraudcloud.com/v1:
    get:
      operationId: "getKraudcloudV1APIResources"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"

  /apis/kraudcloud.com/v1/users:
    get:
      operationId: listUsers
      parameters:
        - name: fieldSelector
          in: query
          schema:
            type: string
        - name: labelSelector
          in: query
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.UserList"

    post:
      operationId: createUser
      requestBody:
        description: "User to create"
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/k8s.UserSpec"
      responses:
        201:
          description: "Created"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.User"

  /apis/kraudcloud.com/v1/users/{name}:
    get:
      operationId: getUser
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.User"

    delete:
      operationId: deleteUser
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: "OK, user deleted"
        404:
          description: "User not found"

  /apis/kraudcloud.com/v1/users/{user_id}/invite/{code}:
    get:
      operationId: getInviteCode
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: code
          in: path
          required: true
          schema:
            type: string
      responses:
        302:
          description: Valid code, redirecting to signup
        404:
          description: Code not found (or expired)

  /apis/kraudcloud.com/v1/users/{user_id}/credentials/rotate:
    post:
      operationId: rotateUserDefaultCredentials
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/zip:
              schema:
                type: string
                format: binary

  /apis/kraudcloud.com/v1/users/{user_id}/credentials/{name}/rotate:
    post:
      operationId: rotateUserCredentials
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/zip:
              type: string
              format: binary

  /apis/kraudcloud.com/v1/users/{user_id}/token/{name}/rotate:
    post:
      operationId: rotateUserApiToken
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            text/plain:
              type: string

  /sh/setup/{name}:
    post:
      operationId: rotateUserCredentialsSh
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            text/x-shellscript:
              type: string

  /apis/kraudcloud.com/v1/users/me:
    put:
      operationId: getUserMe
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/k8s.User"

  /apis/kraudcloud.com/v1/sessions/logout:
    delete:
      operationId: deleteSession
      responses:
        204:
          description: "OK, user logged out"
        401:
          description: "Invalid session"
        400:
          description: "Bad request"
        500:
          description: "Unexpected internal error"
  /apis/kraudcloud.com/v1/tenant/tel/verify/{tel}/validate/{code}:
    post:
      operationId: validateTelCode
      parameters:
        - name: code
          in: path
          required: true
          schema:
            type: string
        - name: tel
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
        404:
          description: Code not found (or expired)

  /apis/kraudcloud.com/v1/tenant/tel/verify/{tel}/send:
    post:
      operationId: sendTelCode
      parameters:
        - name: tel
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
        400:
          description: Invalid phone number
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - captcha_token
              properties:
                captcha_token:
                  type: string

  /apis/kraudcloud.com/v1/sessions/whoami:
    get:
      operationId: whoami
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/kraud.SessionInfo"


  /apis/kraudcloud.com/v1/sessions/authorize:
    get:
      operationId: authorizeSession
      parameters:
        - name: route_id
          in: query
          description: "ingress route id"
          example: "deadbeef-1234-5678-90ab-cdef01234567"
          required: true
          schema:
            type: string
        - name: return_to
          description: "URL to redirect to after successful login, allows fully transparent authentication"
          example: "https://example.com/admin/hello"
          in: query
          schema:
            type: string
      responses:
        302:
          description: Redirect to ingress with the right payload
  /apis/kraudcloud.com/v1/feeds:
    get:
      operationId: getFeeds
      description: Get available feeds
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/kraud.FeedList"
    
    post:
      operationId: createFeed
      description: Create a new feed
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/kraud.CreateFeed"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/kraud.Feed"

  /apis/kraudcloud.com/v1/feeds/{feed_id}/apps:
    get:
      operationId: getFeedApps
      description: Get apps from a feed
      parameters:
        - name: feed_id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/kraud.Feed"

  /apis/kraudcloud.com/v1/feeds/{feed_id}/app:
    put:
      operationId: putFeedApps
      description: Update app from a feed
      parameters:
        - name: feed_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - template
                - changelog
              properties:
                template:
                  type: string
                  format: binary
                changelog:
                  type: string
      responses:
        201:
          description: Created

  /apis/kraudcloud.com/v1/feeds/{feed_id}/versions/{app_name}:
    get:
      operationId: getFeedAppVersions
      description: Get app versions from a feed
      parameters:
        - name: feed_id
          in: path
          required: true
          schema:
            type: string
        - name: app_name
          in: path
          required: true
          schema:
            type: string
        - name: tail
          in: query
          required: false
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/kraud.AppVersionList"

  /apis/kraudcloud.com/v1/feeds/{feed_id}/apps/{app_id}/template:
    get:
      operationId: getFeedAppTemplate
      parameters:
        - name: feed_id
          in: path
          required: true
          description: feed uuid
          schema:
            type: string
        - name: app_id
          in: path
          required: true
          description: app uuid
          schema:
            type: string
        - name: deployment
          in: query
          required: false
          description: Get template interpolated for a specific deployment
          schema:
            type: string
        - name: namespace
          in: query
          required: false
          description: Get template interpolated for a specific namespace
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/kraud.AppOverview"

  /apis/kraudcloud.com/v1/feeds/{feed_id}/apps/{app_id}/launch:
    post:
      operationId: launchApp
      parameters:
        - name: feed_id
          in: path
          required: true
          description: feed uuid
          schema:
            type: string
        - name: app_id
          in: path
          required: true
          description: app uuid
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/kraud.LaunchSettings"
      responses:
        200:
          description: "OK. Launch in progress"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/kraud.LaunchAppResponse"
    
  /apis/kraudcloud.com/v1/launch/{launch_id}/attach:
    get:
      operationId: attachLaunch
      parameters:
        - name: launch_id
          in: path
          required: true
          description: launch uuid
          schema:
            type: string
      responses:
        101:
          description: "Websocket upgrade"
          content:
            application/json:
              schema:
                type: object
                oneOf:
                  - "$ref": "#/components/schemas/kraud.WSLaunchLog"
                  - "$ref": "#/components/schemas/kraud.WSLaunchMeta"
  /apis/certificates.kraudcloud.com/v1/{namespace}/{ca}/create:
    post:
      operationId: generateCert
      description: Generate a certificate
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: ca
          in: path
          required: true
          schema:
            type: string
        - name: algo
          in: query
          schema:
            type: string
        - name: bits
          in: query
          schema:
            type: integer
        - name: dns
          in: query
          schema:
            type: array
            items:
              type: string

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Kraud.CertificateGenerateResponse'
            application/zip:
              schema:
                type: string
                format: binary
  /apis/kr.vmm/v1/pod/{id}/cradle.yeet.json:
    get:
      operationId: vmmCradleState
      description: cradle attaches to this via yeet
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        101:
          description: Upgraded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/kr.CradleState'

  /apis/kr.vmm/v1/container/{id}/report.json:
    post:
      operationId: vmmReportContainerState
      description: cradle sets persisted state here (lastlog)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref:  '#/components/schemas/kr.VmmContainerReport'
      responses:
        201:
          description: OK


  /apis/kr.vmm/v1/pods/{id}/launch.json:
    get:
      operationId: getVmmLaunchSpec
      description: Get pod spec for vmm2
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object


  /apis/kr.vmm/v1/layer/{id}:
    get:
      operationId: downloadLayer
      description: download a layer
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
