components:
    schemas:
        Address:
            description: Address represents an IPv4 or IPv6 IP address.
            properties:
                Addr:
                    description: IP address.
                    type: string
                PrefixLen:
                    description: Mask length of the IP address.
                    type: integer
            type: object
        AuthConfig:
            example:
                password: xxxx
                serveraddress: https://index.docker.io/v1/
                username: hannibal
            properties:
                email:
                    type: string
                password:
                    type: string
                serveraddress:
                    type: string
                username:
                    type: string
            type: object
        Base:
            description: fields set in every object returned by the api
            properties:
                apiVersion:
                    description: 'always the literal: v1'
                    example: v1
                    type: string
                kind:
                    description: the name of the schema
                    example: APIVersions
                    type: string
            required:
                - apiVersion
                - kind
            type: object
        BillingAddress:
            properties:
                address:
                    type: string
                city:
                    type: string
                company_name:
                    type: string
                country:
                    type: string
                    x-go-type: CountryCode
                email:
                    format: email
                    type: string
                    x-go-type: string
                state:
                    type: string
                vat_number:
                    type: string
                    x-go-type: VATNumber
                zip:
                    type: string
            required:
                - company_name
                - email
                - address
                - city
                - country
                - zip
                - state
            type: object
        BillingAddressWithContracts:
            properties:
                address:
                    $ref: '#/components/schemas/BillingAddress'
                contracts:
                    items:
                        $ref: '#/components/schemas/BillingContract'
                    type: array
            type: object
        BillingContract:
            properties:
                amount:
                    format: uint64
                    type: integer
                currency:
                    type: string
                name:
                    type: string
            required:
                - name
                - currency
                - amount
            type: object
        BuildCache:
            properties:
                CreatedAt:
                    description: |
                        Date and time at which the build cache was created in
                        [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
                    example: "2016-08-18T10:44:24.496525531Z"
                    format: dateTime
                    type: string
                Description:
                    type: string
                ID:
                    type: string
                InUse:
                    type: boolean
                LastUsedAt:
                    description: |
                        Date and time at which the build cache was last used in
                        [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
                    example: "2017-08-09T07:09:37.632105588Z"
                    format: dateTime
                    type: string
                    x-nullable: true
                Parent:
                    type: string
                Shared:
                    type: boolean
                Size:
                    description: |
                        Amount of disk space used by the build cache (in bytes).
                    type: integer
                Type:
                    type: string
                UsageCount:
                    type: integer
            type: object
        BuildInfo:
            properties:
                aux:
                    $ref: '#/components/schemas/ImageID'
                error:
                    type: string
                errorDetail:
                    $ref: '#/components/schemas/ErrorDetail'
                id:
                    type: string
                progress:
                    type: string
                progressDetail:
                    $ref: '#/components/schemas/ProgressDetail'
                status:
                    type: string
                stream:
                    type: string
            type: object
        ClusterInfo:
            description: |
                ClusterInfo represents information about the swarm as is returned by the
                "/info" endpoint. Join-tokens are not included.
            properties:
                CreatedAt:
                    description: |
                        Date and time at which the swarm was initialised in
                        [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
                    example: "2016-08-18T10:44:24.496525531Z"
                    format: dateTime
                    type: string
                DataPathPort:
                    default: 4789
                    description: |
                        DataPathPort specifies the data path port number for data traffic.
                        Acceptable port range is 1024 to 49151.
                        If no port is set or is set to 0, the default port (4789) is used.
                    example: 4789
                    format: uint32
                    type: integer
                DefaultAddrPool:
                    description: |
                        Default Address Pool specifies default subnet pools for global scope
                        networks.
                    items:
                        example:
                            - 10.10.0.0/16
                            - 20.20.0.0/16
                        format: CIDR
                        type: string
                    type: array
                ID:
                    description: The ID of the swarm.
                    example: abajmipo7b4xz5ip2nrla6b11
                    type: string
                RootRotationInProgress:
                    description: |
                        Whether there is currently a root CA rotation in progress for the swarm
                    example: false
                    type: boolean
                Spec:
                    $ref: '#/components/schemas/SwarmSpec'
                SubnetSize:
                    default: 24
                    description: |
                        SubnetSize specifies the subnet size of the networks created from the
                        default subnet pool.
                    example: 24
                    format: uint32
                    maximum: 29
                    type: integer
                TLSInfo:
                    $ref: '#/components/schemas/TLSInfo'
                UpdatedAt:
                    description: |
                        Date and time at which the swarm was last updated in
                        [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
                    example: "2017-08-09T07:09:37.632105588Z"
                    format: dateTime
                    type: string
                Version:
                    $ref: '#/components/schemas/ObjectVersion'
            type: object
            x-nullable: true
        CodeVersionInfo:
            properties:
                buildDate:
                    type: string
                compiler:
                    type: string
                gitCommit:
                    type: string
                gitTreeState:
                    type: string
                gitVersion:
                    type: string
                goVersion:
                    type: string
                major:
                    type: string
                minor:
                    type: string
                platform:
                    type: string
            required:
                - major
                - minor
                - gitVersion
                - gitCommit
                - gitTreeState
                - buildDate
                - goVersion
                - compiler
                - platform
            type: object
        Commit:
            description: |
                Commit holds the Git-commit (SHA1) that a binary was built from, as
                reported in the version-string of external tools, such as `containerd`,
                or `runC`.
            properties:
                Expected:
                    description: |
                        Commit ID of external tool expected by dockerd as set at build time.
                    example: 2d41c047c83e09a6d61d464906feb2a2f3c52aa4
                    type: string
                ID:
                    description: Actual commit ID of external tool.
                    example: cfb82a876ecc11b5ca0977d1733adbe58599088a
                    type: string
            type: object
        Config:
            properties:
                CreatedAt:
                    format: dateTime
                    type: string
                ID:
                    type: string
                Spec:
                    $ref: '#/components/schemas/ConfigSpec'
                UpdatedAt:
                    format: dateTime
                    type: string
                Version:
                    $ref: '#/components/schemas/ObjectVersion'
            type: object
        ConfigSpec:
            properties:
                Data:
                    description: |
                        Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-5))
                        config data.
                    type: string
                Labels:
                    additionalProperties:
                        type: string
                    description: User-defined key/value metadata.
                    type: object
                Name:
                    description: User-defined name of the config.
                    type: string
                Templating:
                    $ref: '#/components/schemas/Driver'
                    description: |
                        Templating driver, if applicable

                        Templating controls whether and how to evaluate the config payload as
                        a template. If no driver is set, no templating is used.
            type: object
        ContainerConfig:
            description: |
                Configuration for a container that is portable between hosts.
            properties:
                ArgsEscaped:
                    default: false
                    description: Command is already escaped (Windows only)
                    example: false
                    type: boolean
                    x-nullable: true
                AttachStderr:
                    default: true
                    description: Whether to attach to `stderr`.
                    type: boolean
                AttachStdin:
                    default: false
                    description: Whether to attach to `stdin`.
                    type: boolean
                AttachStdout:
                    default: true
                    description: Whether to attach to `stdout`.
                    type: boolean
                Cmd:
                    description: |
                        Command to run specified as a string or an array of strings.
                    example:
                        - /bin/sh
                    items:
                        type: string
                    type: array
                Domainname:
                    description: |
                        The domain name to use for the container.
                    type: string
                Entrypoint:
                    description: |
                        The entry point for the container as a string or an array of strings.

                        If the array consists of exactly one empty string (`[""]`) then the
                        entry point is reset to system default (i.e., the entry point used by
                        docker when there is no `ENTRYPOINT` instruction in the `Dockerfile`).
                    example: []
                    items:
                        type: string
                    type: array
                Env:
                    description: |
                        A list of environment variables to set inside the container in the
                        form `["VAR=value", ...]`. A variable without `=` is removed from the
                        environment, rather than to have an empty value.
                    example:
                        - PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
                    items:
                        type: string
                    type: array
                ExposedPorts:
                    additionalProperties:
                        default: {}
                        enum:
                            - {}
                        type: object
                    description: |
                        An object mapping ports to an empty object in the form:

                        `{"<port>/<tcp|udp|sctp>": {}}`
                    example:
                        80/tcp: {}
                        443/tcp: {}
                    type: object
                    x-nullable: true
                Healthcheck:
                    $ref: '#/components/schemas/HealthConfig'
                Hostname:
                    description: |
                        The hostname to use for the container, as a valid RFC 1123 hostname.
                    example: 439f4e91bd1d
                    type: string
                Image:
                    description: |
                        The name (or reference) of the image to use when creating the container,
                        or which was used when the container was created.
                    example: example-image:1.0
                    type: string
                Labels:
                    additionalProperties:
                        type: string
                    description: User-defined key/value metadata.
                    example:
                        com.example.some-label: some-value
                        com.example.some-other-label: some-other-value
                    type: object
                MacAddress:
                    description: MAC address of the container.
                    type: string
                    x-nullable: true
                NetworkDisabled:
                    description: Disable networking for the container.
                    type: boolean
                    x-nullable: true
                OnBuild:
                    description: |
                        `ONBUILD` metadata that were defined in the image's `Dockerfile`.
                    example: []
                    items:
                        type: string
                    type: array
                    x-nullable: true
                OpenStdin:
                    default: false
                    description: Open `stdin`
                    type: boolean
                Shell:
                    description: |
                        Shell for when `RUN`, `CMD`, and `ENTRYPOINT` uses a shell.
                    example:
                        - /bin/sh
                        - -c
                    items:
                        type: string
                    type: array
                    x-nullable: true
                StdinOnce:
                    default: false
                    description: Close `stdin` after one attached client disconnects
                    type: boolean
                StopSignal:
                    description: |
                        Signal to stop a container as a string or unsigned integer.
                    example: SIGTERM
                    type: string
                    x-nullable: true
                StopTimeout:
                    default: 10
                    description: Timeout to stop a container in seconds.
                    type: integer
                    x-nullable: true
                Tty:
                    default: false
                    description: |
                        Attach standard streams to a TTY, including `stdin` if it is not closed.
                    type: boolean
                User:
                    description: The user that commands are run as inside the container.
                    type: string
                Volumes:
                    additionalProperties:
                        default: {}
                        enum:
                            - {}
                        type: object
                    description: |
                        An object mapping mount point paths inside the container to empty
                        objects.
                    type: object
                WorkingDir:
                    description: The working directory for commands to run in.
                    example: /public/
                    type: string
            type: object
        ContainerInspectResponse:
            properties:
                AppArmorProfile:
                    type: string
                Args:
                    description: The arguments to the command being run
                    items:
                        type: string
                    type: array
                Config:
                    $ref: '#/components/schemas/ContainerConfig'
                Created:
                    description: The time the container was created
                    type: string
                Driver:
                    type: string
                ExecIDs:
                    description: IDs of exec instances that are running in the container.
                    items:
                        type: string
                    type: array
                    x-nullable: true
                GraphDriver:
                    $ref: '#/components/schemas/GraphDriverData'
                HostConfig:
                    $ref: '#/components/schemas/HostConfig'
                HostnamePath:
                    type: string
                HostsPath:
                    type: string
                Id:
                    description: The ID of the container
                    type: string
                Image:
                    description: The container's image ID
                    type: string
                LogPath:
                    type: string
                MountLabel:
                    type: string
                Mounts:
                    items:
                        $ref: '#/components/schemas/MountPoint'
                    type: array
                Name:
                    type: string
                NetworkSettings:
                    $ref: '#/components/schemas/NetworkSettings'
                Path:
                    description: The path to the command being run
                    type: string
                Platform:
                    type: string
                ProcessLabel:
                    type: string
                ResolvConfPath:
                    type: string
                RestartCount:
                    type: integer
                SizeRootFs:
                    description: The total size of all the files in this container.
                    format: int64
                    type: integer
                SizeRw:
                    description: |
                        The size of files that have been created or changed by this
                        container.
                    format: int64
                    type: integer
                State:
                    $ref: '#/components/schemas/ContainerState'
                    x-nullable: true
            type: object
        ContainerState:
            description: |
                ContainerState stores container's running state. It's part of ContainerJSONBase
                and will be returned by the "inspect" command.
            properties:
                Dead:
                    example: false
                    type: boolean
                Error:
                    type: string
                ExitCode:
                    description: The last exit code of this container
                    example: 0
                    type: integer
                FinishedAt:
                    description: The time when this container last exited.
                    example: "2020-01-06T09:07:59.461876391Z"
                    type: string
                Health:
                    $ref: '#/components/schemas/Health'
                    x-nullable: true
                OOMKilled:
                    description: |
                        Whether this container has been killed because it ran out of memory.
                    example: false
                    type: boolean
                Paused:
                    description: Whether this container is paused.
                    example: false
                    type: boolean
                Pid:
                    description: The process ID of this container
                    example: 1234
                    type: integer
                Restarting:
                    description: Whether this container is restarting.
                    example: false
                    type: boolean
                Running:
                    description: |
                        Whether this container is running.

                        Note that a running container can be _paused_. The `Running` and `Paused`
                        booleans are not mutually exclusive:

                        When pausing a container (on Linux), the freezer cgroup is used to suspend
                        all processes in the container. Freezing the process requires the process to
                        be running. As a result, paused containers are both `Running` _and_ `Paused`.

                        Use the `Status` field instead to determine if a container's state is "running".
                    example: true
                    type: boolean
                StartedAt:
                    description: The time when this container was last started.
                    example: "2020-01-06T09:06:59.461876391Z"
                    type: string
                Status:
                    description: |
                        String representation of the container state. Can be one of "created",
                        "running", "paused", "restarting", "removing", "exited", or "dead".
                    enum:
                        - created
                        - running
                        - paused
                        - restarting
                        - removing
                        - exited
                        - dead
                    example: running
                    type: string
            type: object
        ContainerSummary:
            properties:
                Command:
                    description: Command to run when starting the container
                    type: string
                Created:
                    description: When the container was created
                    format: int64
                    type: integer
                HostConfig:
                    properties:
                        NetworkMode:
                            type: string
                    type: object
                Id:
                    description: The ID of this container
                    type: string
                    x-go-name: ID
                Image:
                    description: The name of the image used when creating this container
                    type: string
                ImageID:
                    description: The ID of the image that this container was created from
                    type: string
                Labels:
                    additionalProperties:
                        type: string
                    description: User-defined key/value metadata.
                    type: object
                Mounts:
                    items:
                        $ref: '#/components/schemas/MountPoint'
                    type: array
                Names:
                    description: The names that this container has been given
                    items:
                        type: string
                    type: array
                NetworkSettings:
                    description: A summary of the container's network settings
                    properties:
                        Networks:
                            additionalProperties:
                                $ref: '#/components/schemas/EndpointSettings'
                            type: object
                    type: object
                Ports:
                    description: The ports exposed by this container
                    items:
                        $ref: '#/components/schemas/Port'
                    type: array
                SizeRootFs:
                    description: The total size of all the files in this container
                    format: int64
                    type: integer
                SizeRw:
                    description: The size of files that have been created or changed by this container
                    format: int64
                    type: integer
                State:
                    description: The state of this container (e.g. `Exited`)
                    type: string
                Status:
                    description: Additional human-readable status of this container (e.g. `Exit 0`)
                    type: string
            type: object
        ContainerWaitExitError:
            description: container waiting error, if any
            properties:
                Message:
                    description: Details of an error
                    type: string
            type: object
            x-go-name: ContainerWaitOKBodyError
        ContainerWaitResponse:
            description: OK response to ContainerWait operation
            properties:
                Error:
                    $ref: '#/components/schemas/ContainerWaitExitError'
                StatusCode:
                    description: Exit code of the container
                    type: integer
                    x-nullable: false
            required:
                - StatusCode
                - Error
            title: ContainerWaitResponse
            type: object
            x-go-name: ContainerWaitOKBody
        CreateImageInfo:
            properties:
                error:
                    type: string
                id:
                    type: string
                progress:
                    type: string
                progressDetail:
                    $ref: '#/components/schemas/ProgressDetail'
                status:
                    type: string
            type: object
        DeviceMapping:
            description: A device mapping between the host and container
            example:
                CgroupPermissions: mrw
                PathInContainer: /dev/deviceName
                PathOnHost: /dev/deviceName
            properties:
                CgroupPermissions:
                    type: string
                PathInContainer:
                    type: string
                PathOnHost:
                    type: string
            type: object
        DeviceRequest:
            description: A request for devices to be sent to device drivers
            properties:
                Capabilities:
                    description: |
                        A list of capabilities; an OR list of AND lists of capabilities.
                    example:
                        - - gpu
                          - nvidia
                          - compute
                    items:
                        items:
                            type: string
                        type: array
                    type: array
                Count:
                    example: -1
                    type: integer
                DeviceIDs:
                    example:
                        - "0"
                        - "1"
                        - GPU-fef8089b-4820-abfc-e83e-94318197576e
                    items:
                        type: string
                    type: array
                Driver:
                    example: nvidia
                    type: string
                Options:
                    additionalProperties:
                        type: string
                    description: |
                        Driver-specific options, specified as a key/value pairs. These options
                        are passed directly to the driver.
                    type: object
            type: object
        DistributionInspect:
            description: |
                Describes the result obtained from contacting the registry to retrieve
                image metadata.
            properties:
                Descriptor:
                    $ref: '#/components/schemas/OCIDescriptor'
                Platforms:
                    description: |
                        An array containing all platforms supported by the image.
                    items:
                        $ref: '#/components/schemas/OCIPlatform'
                    type: array
            required:
                - Descriptor
                - Platforms
            title: DistributionInspectResponse
            type: object
            x-go-name: DistributionInspect
        Driver:
            description: Driver represents a driver (network, logging, secrets).
            properties:
                Name:
                    description: Name of the driver.
                    example: some-driver
                    type: string
                    x-nullable: false
                Options:
                    additionalProperties:
                        type: string
                    description: Key/value map of driver-specific options.
                    example:
                        OptionA: value for driver-specific option A
                        OptionB: value for driver-specific option B
                    type: object
                    x-nullable: false
            required:
                - Name
            type: object
        EndpointIPAMConfig:
            description: |
                EndpointIPAMConfig represents an endpoint's IPAM configuration.
            properties:
                IPv4Address:
                    example: 172.20.30.33
                    type: string
                IPv6Address:
                    example: 2001:db8:abcd::3033
                    type: string
                LinkLocalIPs:
                    example:
                        - 169.254.34.68
                        - fe80::3468
                    items:
                        type: string
                    type: array
            type: object
            x-nullable: true
        EndpointPortConfig:
            properties:
                Name:
                    type: string
                Protocol:
                    enum:
                        - tcp
                        - udp
                        - sctp
                    type: string
                PublishMode:
                    default: ingress
                    description: |
                        The mode in which port is published.

                        <p><br /></p>

                        - "ingress" makes the target port accessible on every node,
                          regardless of whether there is a task for the service running on
                          that node or not.
                        - "host" bypasses the routing mesh and publish the port directly on
                          the swarm node where that service is running.
                    enum:
                        - ingress
                        - host
                    example: ingress
                    type: string
                PublishedPort:
                    description: The port on the swarm hosts.
                    type: integer
                TargetPort:
                    description: The port inside the container.
                    type: integer
            type: object
        EndpointSettings:
            description: Configuration for a network endpoint.
            properties:
                Aliases:
                    example:
                        - server_x
                        - server_y
                    items:
                        type: string
                    type: array
                DriverOpts:
                    additionalProperties:
                        type: string
                    description: |
                        DriverOpts is a mapping of driver options and values. These options
                        are passed directly to the driver and are driver specific.
                    example:
                        com.example.some-label: some-value
                        com.example.some-other-label: some-other-value
                    type: object
                    x-nullable: true
                EndpointID:
                    description: |
                        Unique ID for the service endpoint in a Sandbox.
                    example: b88f5b905aabf2893f3cbc4ee42d1ea7980bbc0a92e2c8922b1e1795298afb0b
                    type: string
                Gateway:
                    description: |
                        Gateway address for this network.
                    example: 172.17.0.1
                    type: string
                GlobalIPv6Address:
                    description: |
                        Global IPv6 address.
                    example: 2001:db8::5689
                    type: string
                GlobalIPv6PrefixLen:
                    description: |
                        Mask length of the global IPv6 address.
                    example: 64
                    format: int64
                    type: integer
                IPAMConfig:
                    $ref: '#/components/schemas/EndpointIPAMConfig'
                IPAddress:
                    description: |
                        IPv4 address.
                    example: 172.17.0.4
                    type: string
                IPPrefixLen:
                    description: |
                        Mask length of the IPv4 address.
                    example: 16
                    type: integer
                IPv6Gateway:
                    description: |
                        IPv6 gateway address.
                    example: 2001:db8:2::100
                    type: string
                Links:
                    example:
                        - container_1
                        - container_2
                    items:
                        type: string
                    type: array
                MacAddress:
                    description: |
                        MAC address for the endpoint on this network.
                    example: 02:42:ac:11:00:04
                    type: string
                NetworkID:
                    description: |
                        Unique ID of the network.
                    example: 08754567f1f40222263eab4102e1c733ae697e8e354aa9cd6e18d7402835292a
                    type: string
            type: object
        EndpointSpec:
            description: Properties that can be configured to access and load balance a service.
            properties:
                Mode:
                    default: vip
                    description: |
                        The mode of resolution to use for internal load balancing between tasks.
                    enum:
                        - vip
                        - dnsrr
                    type: string
                Ports:
                    description: |
                        List of exposed ports that this service is accessible on from the
                        outside. Ports can only be provided if `vip` resolution mode is used.
                    items:
                        $ref: '#/components/schemas/EndpointPortConfig'
                    type: array
            type: object
        EngineDescription:
            description: EngineDescription provides information about an engine.
            properties:
                EngineVersion:
                    example: 17.06.0
                    type: string
                Labels:
                    additionalProperties:
                        type: string
                    example:
                        foo: bar
                    type: object
                Plugins:
                    example:
                        - Name: awslogs
                          Type: Log
                        - Name: fluentd
                          Type: Log
                        - Name: gcplogs
                          Type: Log
                        - Name: gelf
                          Type: Log
                        - Name: journald
                          Type: Log
                        - Name: json-file
                          Type: Log
                        - Name: logentries
                          Type: Log
                        - Name: splunk
                          Type: Log
                        - Name: syslog
                          Type: Log
                        - Name: bridge
                          Type: Network
                        - Name: host
                          Type: Network
                        - Name: ipvlan
                          Type: Network
                        - Name: macvlan
                          Type: Network
                        - Name: "null"
                          Type: Network
                        - Name: overlay
                          Type: Network
                        - Name: local
                          Type: Volume
                        - Name: localhost:5000/vieux/sshfs:latest
                          Type: Volume
                        - Name: vieux/sshfs:latest
                          Type: Volume
                    items:
                        properties:
                            Name:
                                type: string
                            Type:
                                type: string
                        type: object
                    type: array
            type: object
        ErrorDetail:
            properties:
                code:
                    type: integer
                message:
                    type: string
            type: object
        ErrorResponse:
            description: Represents an error.
            example:
                message: Something went wrong.
            properties:
                message:
                    description: The error message.
                    type: string
                    x-nullable: false
            required:
                - message
            type: object
        EventActor:
            description: |
                Actor describes something that generates events, like a container, network,
                or a volume.
            properties:
                Attributes:
                    additionalProperties:
                        type: string
                    description: |
                        Various key/value attributes of the object, depending on its type.
                    example:
                        com.example.some-label: some-label-value
                        image: alpine:latest
                        name: my-container
                    type: object
                ID:
                    description: The ID of the object emitting the event
                    example: ede54ee1afda366ab42f824e8a5ffd195155d853ceaec74a927f249ea270c743
                    type: string
            type: object
        EventMessage:
            description: |
                EventMessage represents the information an event contains.
            properties:
                Action:
                    description: The type of event
                    example: create
                    type: string
                Actor:
                    $ref: '#/components/schemas/EventActor'
                Type:
                    description: The type of object emitting the event
                    enum:
                        - builder
                        - config
                        - container
                        - daemon
                        - image
                        - network
                        - node
                        - plugin
                        - secret
                        - service
                        - volume
                    example: container
                    type: string
                scope:
                    description: |
                        Scope of the event. Engine events are `local` scope. Cluster (Swarm)
                        events are `swarm` scope.
                    enum:
                        - local
                        - swarm
                    type: string
                time:
                    description: Timestamp of event
                    example: 1629574695
                    format: int64
                    type: integer
                timeNano:
                    description: Timestamp of event, with nanosecond accuracy
                    example: 1629574695515050031
                    format: int64
                    type: integer
            title: SystemEventsResponse
            type: object
        GenericResources:
            description: |
                User-defined resources can be either Integer resources (e.g, `SSD=3`) or
                String resources (e.g, `GPU=UUID1`).
            example:
                - DiscreteResourceSpec:
                    Kind: SSD
                    Value: 3
                - NamedResourceSpec:
                    Kind: GPU
                    Value: UUID1
                - NamedResourceSpec:
                    Kind: GPU
                    Value: UUID2
            items:
                properties:
                    DiscreteResourceSpec:
                        properties:
                            Kind:
                                type: string
                            Value:
                                format: int64
                                type: integer
                        type: object
                    NamedResourceSpec:
                        properties:
                            Kind:
                                type: string
                            Value:
                                type: string
                        type: object
                type: object
            type: array
        GraphDriverData:
            description: |
                Information about the storage driver used to store the container's and
                image's filesystem.
            properties:
                Data:
                    additionalProperties:
                        type: string
                    description: |
                        Low-level storage metadata, provided as key/value pairs.

                        This information is driver-specific, and depends on the storage-driver
                        in use, and should be used for informational purposes only.
                    example:
                        MergedDir: /var/lib/docker/overlay2/ef749362d13333e65fc95c572eb525abbe0052e16e086cb64bc3b98ae9aa6d74/merged
                        UpperDir: /var/lib/docker/overlay2/ef749362d13333e65fc95c572eb525abbe0052e16e086cb64bc3b98ae9aa6d74/diff
                        WorkDir: /var/lib/docker/overlay2/ef749362d13333e65fc95c572eb525abbe0052e16e086cb64bc3b98ae9aa6d74/work
                    type: object
                    x-nullable: false
                Name:
                    description: Name of the storage driver.
                    example: overlay2
                    type: string
                    x-nullable: false
            required:
                - Name
                - Data
            type: object
        Health:
            description: |
                Health stores information about the container's healthcheck results.
            properties:
                FailingStreak:
                    description: FailingStreak is the number of consecutive failures
                    example: 0
                    type: integer
                Log:
                    description: |
                        Log contains the last few results (oldest first)
                    items:
                        $ref: '#/components/schemas/HealthcheckResult'
                        x-nullable: true
                    type: array
                Status:
                    description: |
                        Status is one of `none`, `starting`, `healthy` or `unhealthy`

                        - "none"      Indicates there is no healthcheck
                        - "starting"  Starting indicates that the container is not yet ready
                        - "healthy"   Healthy indicates that the container is running correctly
                        - "unhealthy" Unhealthy indicates that the container has a problem
                    enum:
                        - none
                        - starting
                        - healthy
                        - unhealthy
                    example: healthy
                    type: string
            type: object
            x-nullable: true
        HealthConfig:
            description: A test to perform to check that the container is healthy.
            properties:
                Interval:
                    description: |
                        The time to wait between checks in nanoseconds. It should be 0 or at
                        least 1000000 (1 ms). 0 means inherit.
                    type: integer
                Retries:
                    description: |
                        The number of consecutive failures needed to consider a container as
                        unhealthy. 0 means inherit.
                    type: integer
                StartPeriod:
                    description: |
                        Start period for the container to initialize before starting
                        health-retries countdown in nanoseconds. It should be 0 or at least
                        1000000 (1 ms). 0 means inherit.
                    type: integer
                Test:
                    description: |
                        The test to perform. Possible values are:

                        - `[]` inherit healthcheck from image or parent image
                        - `["NONE"]` disable healthcheck
                        - `["CMD", args...]` exec arguments directly
                        - `["CMD-SHELL", command]` run command with system's default shell
                    items:
                        type: string
                    type: array
                Timeout:
                    description: |
                        The time to wait before considering the check to have hung. It should
                        be 0 or at least 1000000 (1 ms). 0 means inherit.
                    type: integer
            type: object
        HealthcheckResult:
            description: |
                HealthcheckResult stores information about a single run of a healthcheck probe
            properties:
                End:
                    description: |
                        Date and time at which this check ended in
                        [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
                    example: "2020-01-04T10:45:21.364524523Z"
                    format: dateTime
                    type: string
                ExitCode:
                    description: |
                        ExitCode meanings:

                        - `0` healthy
                        - `1` unhealthy
                        - `2` reserved (considered unhealthy)
                        - other values: error running probe
                    example: 0
                    type: integer
                Output:
                    description: Output from last check
                    type: string
                Start:
                    description: |
                        Date and time at which this check started in
                        [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
                    example: "2020-01-04T10:44:24.496525531Z"
                    format: date-time
                    type: string
            type: object
        HostConfig:
            allOf:
                - $ref: '#/components/schemas/Resources'
                - properties:
                    AutoRemove:
                        description: |
                            Automatically remove the container when the container's process
                            exits. This has no effect if `RestartPolicy` is set.
                        type: boolean
                    Binds:
                        description: |
                            A list of volume bindings for this container. Each volume binding
                            is a string in one of these forms:

                            - `host-src:container-dest[:options]` to bind-mount a host path
                              into the container. Both `host-src`, and `container-dest` must
                              be an _absolute_ path.
                            - `volume-name:container-dest[:options]` to bind-mount a volume
                              managed by a volume driver into the container. `container-dest`
                              must be an _absolute_ path.

                            `options` is an optional, comma-delimited list of:

                            - `nocopy` disables automatic copying of data from the container
                              path to the volume. The `nocopy` flag only applies to named volumes.
                            - `[ro|rw]` mounts a volume read-only or read-write, respectively.
                              If omitted or set to `rw`, volumes are mounted read-write.
                            - `[z|Z]` applies SELinux labels to allow or deny multiple containers
                              to read and write to the same volume.
                                - `z`: a _shared_ content label is applied to the content. This
                                  label indicates that multiple containers can share the volume
                                  content, for both reading and writing.
                                - `Z`: a _private unshared_ label is applied to the content.
                                  This label indicates that only the current container can use
                                  a private volume. Labeling systems such as SELinux require
                                  proper labels to be placed on volume content that is mounted
                                  into a container. Without a label, the security system can
                                  prevent a container's processes from using the content. By
                                  default, the labels set by the host operating system are not
                                  modified.
                            - `[[r]shared|[r]slave|[r]private]` specifies mount
                              [propagation behavior](https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt).
                              This only applies to bind-mounted volumes, not internal volumes
                              or named volumes. Mount propagation requires the source mount
                              point (the location where the source directory is mounted in the
                              host operating system) to have the correct propagation properties.
                              For shared volumes, the source mount point must be set to `shared`.
                              For slave volumes, the mount must be set to either `shared` or
                              `slave`.
                        items:
                            type: string
                        type: array
                    CapAdd:
                        description: |
                            A list of kernel capabilities to add to the container. Conflicts
                            with option 'Capabilities'.
                        items:
                            type: string
                        type: array
                    CapDrop:
                        description: |
                            A list of kernel capabilities to drop from the container. Conflicts
                            with option 'Capabilities'.
                        items:
                            type: string
                        type: array
                    Cgroup:
                        description: Cgroup to use for the container.
                        type: string
                    CgroupnsMode:
                        description: |
                            cgroup namespace mode for the container. Possible values are:

                            - `"private"`: the container runs in its own private cgroup namespace
                            - `"host"`: use the host system's cgroup namespace

                            If not specified, the daemon default is used, which can either be `"private"`
                            or `"host"`, depending on daemon version, kernel support and configuration.
                        enum:
                            - private
                            - host
                        type: string
                    ConsoleSize:
                        description: |
                            Initial console size, as an `[height, width]` array. (Windows only)
                        items:
                            minimum: 0
                            type: integer
                        maxItems: 2
                        minItems: 2
                        type: array
                    ContainerIDFile:
                        description: Path to a file where the container ID is written
                        type: string
                    Dns:
                        description: A list of DNS servers for the container to use.
                        items:
                            type: string
                        type: array
                    DnsOptions:
                        description: A list of DNS options.
                        items:
                            type: string
                        type: array
                    DnsSearch:
                        description: A list of DNS search domains.
                        items:
                            type: string
                        type: array
                    ExtraHosts:
                        description: |
                            A list of hostnames/IP mappings to add to the container's `/etc/hosts`
                            file. Specified in the form `["hostname:IP"]`.
                        items:
                            type: string
                        type: array
                    GroupAdd:
                        description: |
                            A list of additional groups that the container process will run as.
                        items:
                            type: string
                        type: array
                    IpcMode:
                        description: |
                            IPC sharing mode for the container. Possible values are:

                            - `"none"`: own private IPC namespace, with /dev/shm not mounted
                            - `"private"`: own private IPC namespace
                            - `"shareable"`: own private IPC namespace, with a possibility to share it with other containers
                            - `"container:<name|id>"`: join another (shareable) container's IPC namespace
                            - `"host"`: use the host system's IPC namespace

                            If not specified, daemon default is used, which can either be `"private"`
                            or `"shareable"`, depending on daemon version and configuration.
                        type: string
                    Isolation:
                        description: |
                            Isolation technology of the container. (Windows only)
                        enum:
                            - default
                            - process
                            - hyperv
                        type: string
                    Links:
                        description: |
                            A list of links for the container in the form `container_name:alias`.
                        items:
                            type: string
                        type: array
                    LogConfig:
                        description: The logging configuration for this container
                        properties:
                            Config:
                                additionalProperties:
                                    type: string
                                type: object
                            Type:
                                enum:
                                    - json-file
                                    - syslog
                                    - journald
                                    - gelf
                                    - fluentd
                                    - awslogs
                                    - splunk
                                    - etwlogs
                                    - none
                                type: string
                        type: object
                    MaskedPaths:
                        description: |
                            The list of paths to be masked inside the container (this overrides
                            the default set of paths).
                        items:
                            type: string
                        type: array
                    Mounts:
                        description: |
                            Specification for mounts to be added to the container.
                        items:
                            $ref: '#/components/schemas/Mount'
                        type: array
                    NetworkMode:
                        description: |
                            Network mode to use for this container. Supported standard values
                            are: `bridge`, `host`, `none`, and `container:<name|id>`. Any
                            other value is taken as a custom network's name to which this
                            container should connect to.
                        type: string
                    OomScoreAdj:
                        description: |
                            An integer value containing the score given to the container in
                            order to tune OOM killer preferences.
                        example: 500
                        type: integer
                    PidMode:
                        description: |
                            Set the PID (Process) Namespace mode for the container. It can be
                            either:

                            - `"container:<name|id>"`: joins another container's PID namespace
                            - `"host"`: use the host's PID namespace inside the container
                        type: string
                    PortBindings:
                        $ref: '#/components/schemas/PortMap'
                    Privileged:
                        description: Gives the container full access to the host.
                        type: boolean
                    PublishAllPorts:
                        description: |
                            Allocates an ephemeral host port for all of a container's
                            exposed ports.

                            Ports are de-allocated when the container stops and allocated when
                            the container starts. The allocated port might be changed when
                            restarting the container.

                            The port is selected from the ephemeral port range that depends on
                            the kernel. For example, on Linux the range is defined by
                            `/proc/sys/net/ipv4/ip_local_port_range`.
                        type: boolean
                    ReadonlyPaths:
                        description: |
                            The list of paths to be set as read-only inside the container
                            (this overrides the default set of paths).
                        items:
                            type: string
                        type: array
                    ReadonlyRootfs:
                        description: Mount the container's root filesystem as read only.
                        type: boolean
                    RestartPolicy:
                        $ref: '#/components/schemas/RestartPolicy'
                    Runtime:
                        description: Runtime to use with this container.
                        type: string
                    SecurityOpt:
                        description: |
                            A list of string values to customize labels for MLS systems, such
                            as SELinux.
                        items:
                            type: string
                        type: array
                    ShmSize:
                        description: |
                            Size of `/dev/shm` in bytes. If omitted, the system uses 64MB.
                        minimum: 0
                        type: integer
                    StorageOpt:
                        additionalProperties:
                            type: string
                        description: |
                            Storage driver options for this container, in the form `{"size": "120G"}`.
                        type: object
                    Sysctls:
                        additionalProperties:
                            type: string
                        description: |
                            A list of kernel parameters (sysctls) to set in the container.
                            For example:

                            ```
                            {"net.ipv4.ip_forward": "1"}
                            ```
                        type: object
                    Tmpfs:
                        additionalProperties:
                            type: string
                        description: |
                            A map of container directories which should be replaced by tmpfs
                            mounts, and their corresponding mount options. For example:

                            ```
                            { "/run": "rw,noexec,nosuid,size=65536k" }
                            ```
                        type: object
                    UTSMode:
                        description: UTS namespace to use for the container.
                        type: string
                    UsernsMode:
                        description: |
                            Sets the usernamespace mode for the container when usernamespace
                            remapping option is enabled.
                        type: string
                    VolumeDriver:
                        description: Driver that this container uses to mount volumes.
                        type: string
                    VolumesFrom:
                        description: |
                            A list of volumes to inherit from another container, specified in
                            the form `<container name>[:<ro|rw>]`.
                        items:
                            type: string
                        type: array
                  type: object
            description: Container configuration that depends on the host we are running on
        IPAM:
            properties:
                Config:
                    description: |
                        List of IPAM configuration options, specified as a map:

                        ```
                        {"Subnet": <CIDR>, "IPRange": <CIDR>, "Gateway": <IP address>, "AuxAddress": <device_name:IP address>}
                        ```
                    items:
                        $ref: '#/components/schemas/IPAMConfig'
                    type: array
                Driver:
                    default: default
                    description: Name of the IPAM driver to use.
                    type: string
                Options:
                    additionalProperties:
                        type: string
                    description: Driver-specific options, specified as a map.
                    type: object
            type: object
        IPAMConfig:
            properties:
                AuxiliaryAddresses:
                    additionalProperties:
                        type: string
                    type: object
                Gateway:
                    type: string
                IPRange:
                    type: string
                Subnet:
                    type: string
            type: object
        IdResponse:
            description: Response to an API call that returns just an Id
            properties:
                Id:
                    description: The id of the newly created object.
                    type: string
                    x-nullable: false
            required:
                - Id
            type: object
        ImageDeleteResponseItem:
            properties:
                Deleted:
                    description: The image ID of an image that was deleted
                    type: string
                Untagged:
                    description: The image ID of an image that was untagged
                    type: string
            type: object
        ImageID:
            description: Image ID or Digest
            example:
                ID: sha256:85f05633ddc1c50679be2b16a0479ab6f7637f8884e0cfe0f4d20e1ebb3d6e7c
            properties:
                ID:
                    type: string
            type: object
        ImageInspect:
            description: |
                Information about an image in the local image cache.
            properties:
                Architecture:
                    description: |
                        Hardware CPU architecture that the image runs on.
                    example: arm
                    type: string
                    x-nullable: false
                Author:
                    description: |
                        Name of the author that was specified when committing the image, or as
                        specified through MAINTAINER (deprecated) in the Dockerfile.
                    example: ""
                    type: string
                    x-nullable: false
                Comment:
                    description: |
                        Optional message that was set when committing or importing the image.
                    example: ""
                    type: string
                    x-nullable: false
                Config:
                    $ref: '#/components/schemas/ContainerConfig'
                Container:
                    description: |
                        The ID of the container that was used to create the image.

                        Depending on how the image was created, this field may be empty.
                    example: 65974bc86f1770ae4bff79f651ebdbce166ae9aada632ee3fa9af3a264911735
                    type: string
                    x-nullable: false
                ContainerConfig:
                    $ref: '#/components/schemas/ContainerConfig'
                Created:
                    description: |
                        Date and time at which the image was created, formatted in
                        [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
                    example: "2022-02-04T21:20:12.497794809Z"
                    type: string
                    x-nullable: false
                DockerVersion:
                    description: |
                        The version of Docker that was used to build the image.

                        Depending on how the image was created, this field may be empty.
                    example: 20.10.7
                    type: string
                    x-nullable: false
                GraphDriver:
                    $ref: '#/components/schemas/GraphDriverData'
                Id:
                    description: |
                        ID is the content-addressable ID of an image.

                        This identified is a content-addressable digest calculated from the
                        image's configuration (which includes the digests of layers used by
                        the image).

                        Note that this digest differs from the `RepoDigests` below, which
                        holds digests of image manifests that reference the image.
                    example: sha256:ec3f0931a6e6b6855d76b2d7b0be30e81860baccd891b2e243280bf1cd8ad710
                    type: string
                    x-nullable: false
                Metadata:
                    description: |
                        Additional metadata of the image in the local cache. This information
                        is local to the daemon, and not part of the image itself.
                    properties:
                        LastTagTime:
                            description: |
                                Date and time at which the image was last tagged in
                                [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.

                                This information is only available if the image was tagged locally,
                                and omitted otherwise.
                            example: "2022-02-28T14:40:02.623929178Z"
                            format: dateTime
                            type: string
                            x-nullable: true
                    type: object
                Os:
                    description: |
                        Operating System the image is built to run on.
                    example: linux
                    type: string
                    x-nullable: false
                OsVersion:
                    description: |
                        Operating System version the image is built to run on (especially
                        for Windows).
                    example: ""
                    type: string
                    x-nullable: true
                Parent:
                    description: |
                        ID of the parent image.

                        Depending on how the image was created, this field may be empty and
                        is only set for images that were built/created locally. This field
                        is empty if the image was pulled from an image registry.
                    example: ""
                    type: string
                    x-nullable: false
                RepoDigests:
                    description: |
                        List of content-addressable digests of locally available image manifests
                        that the image is referenced from. Multiple manifests can refer to the
                        same image.

                        These digests are usually only available if the image was either pulled
                        from a registry, or if the image was pushed to a registry, which is when
                        the manifest is generated and its digest calculated.
                    example:
                        - example@sha256:afcc7f1ac1b49db317a7196c902e61c6c3c4607d63599ee1a82d702d249a0ccb
                        - internal.registry.example.com:5000/example@sha256:b69959407d21e8a062e0416bf13405bb2b71ed7a84dde4158ebafacfa06f5578
                    items:
                        type: string
                    type: array
                RepoTags:
                    description: |
                        List of image names/tags in the local image cache that reference this
                        image.

                        Multiple image tags can refer to the same imagem and this list may be
                        empty if no tags reference the image, in which case the image is
                        "untagged", in which case it can still be referenced by its ID.
                    example:
                        - example:1.0
                        - example:latest
                        - example:stable
                        - internal.registry.example.com:5000/example:1.0
                    items:
                        type: string
                    type: array
                RootFS:
                    description: |
                        Information about the image's RootFS, including the layer IDs.
                    properties:
                        Layers:
                            example:
                                - sha256:1834950e52ce4d5a88a1bbd131c537f4d0e56d10ff0dd69e66be3b7dfa9df7e6
                                - sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef
                            items:
                                type: string
                            type: array
                        Type:
                            example: layers
                            type: string
                            x-nullable: false
                    required:
                        - Type
                    type: object
                Size:
                    description: |
                        Total size of the image including all layers it is composed of.
                    example: 1239828
                    format: int64
                    type: integer
                    x-nullable: false
                Variant:
                    description: |
                        CPU architecture variant (presently ARM-only).
                    example: v7
                    type: string
                    x-nullable: true
                VirtualSize:
                    description: |
                        Total size of the image including all layers it is composed of.

                        In versions of Docker before v1.10, this field was calculated from
                        the image itself and all of its parent images. Docker v1.10 and up
                        store images self-contained, and no longer use a parent-chain, making
                        this field an equivalent of the Size field.

                        This field is kept for backward compatibility, but may be removed in
                        a future version of the API.
                    example: 1239828
                    format: int64
                    type: integer
                    x-nullable: false
            type: object
        ImageSummary:
            properties:
                Containers:
                    type: integer
                    x-nullable: false
                Created:
                    type: integer
                    x-nullable: false
                Id:
                    type: string
                    x-nullable: false
                Labels:
                    additionalProperties:
                        type: string
                    type: object
                    x-nullable: false
                ParentId:
                    type: string
                    x-nullable: false
                RepoDigests:
                    items:
                        type: string
                    type: array
                    x-nullable: false
                RepoTags:
                    items:
                        type: string
                    type: array
                    x-nullable: false
                SharedSize:
                    type: integer
                    x-nullable: false
                Size:
                    type: integer
                    x-nullable: false
                VirtualSize:
                    type: integer
                    x-nullable: false
            required:
                - Id
                - ParentId
                - RepoTags
                - RepoDigests
                - Created
                - Size
                - SharedSize
                - VirtualSize
                - Labels
                - Containers
            type: object
        Index:
            properties:
                paths:
                    items:
                        type: string
                    type: array
            required:
                - paths
            type: object
        IndexInfo:
            description: IndexInfo contains information about a registry.
            properties:
                Mirrors:
                    description: |
                        List of mirrors, expressed as URIs.
                    example:
                        - https://hub-mirror.corp.example.com:5000/
                        - https://registry-2.docker.io/
                        - https://registry-3.docker.io/
                    items:
                        type: string
                    type: array
                Name:
                    description: |
                        Name of the registry, such as "docker.io".
                    example: docker.io
                    type: string
                Official:
                    description: |
                        Indicates whether this is an official registry (i.e., Docker Hub / docker.io)
                    example: true
                    type: boolean
                Secure:
                    description: |
                        Indicates if the registry is part of the list of insecure
                        registries.

                        If `false`, the registry is insecure. Insecure registries accept
                        un-encrypted (HTTP) and/or untrusted (HTTPS with certificates from
                        unknown CAs) communication.

                        > **Warning**: Insecure registries can be useful when running a local
                        > registry. However, because its use creates security vulnerabilities
                        > it should ONLY be enabled for testing purposes. For increased
                        > security, users should add their CA to their system's list of
                        > trusted CAs instead of enabling this option.
                    example: true
                    type: boolean
            type: object
            x-nullable: true
        JoinTokens:
            description: |
                JoinTokens contains the tokens workers and managers need to join the swarm.
            properties:
                Manager:
                    description: |
                        The token managers can use to join the swarm.
                    example: SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-7p73s1dx5in4tatdymyhg9hu2
                    type: string
                Worker:
                    description: |
                        The token workers can use to join the swarm.
                    example: SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-1awxwuwd3z9j1z3puu7rcgdbx
                    type: string
            type: object
        Kraud.CertificateGenerateResponse:
            properties:
                ca:
                    type: string
                cert:
                    type: string
                key:
                    type: string
            required:
                - cert
                - key
                - ca
            type: object
        Kraud.Container:
            properties:
                AID:
                    type: string
                Command:
                    items:
                        type: string
                    type: array
                Entrypoint:
                    items:
                        type: string
                    type: array
                Env:
                    additionalProperties:
                        type: string
                    type: object
                ID:
                    type: string
                ImageName:
                    type: string
                Name:
                    type: string
                Tty:
                    type: boolean
                VolumeMounts:
                    items:
                        $ref: '#/components/schemas/Kraud.VolumeMount'
                    type: array
            required:
                - AID
                - Name
                - ImageName
                - Entrypoint
                - Command
                - Env
                - Tty
                - VolumeMounts
            type: object
        Kraud.CreateImageResponse:
            properties:
                created:
                    $ref: '#/components/schemas/Kraud.ImageName'
                renamed:
                    items:
                        $ref: '#/components/schemas/Kraud.ImageName'
                    type: array
            type: object
        Kraud.Deployment:
            properties:
                AID:
                    type: string
                App:
                    properties:
                        Config:
                            type: string
                        ID:
                            type: string
                    required:
                        - ID
                        - Config
                    type: object
                ID:
                    type: string
                Name:
                    type: string
                Namespace:
                    type: string
                Pods:
                    items:
                        $ref: '#/components/schemas/Kraud.Pod'
                    type: array
            required:
                - ID
                - AID
                - Name
                - Namespace
                - Pods
            type: object
        Kraud.DeploymentList:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/Kraud.Deployment'
                    type: array
            required:
                - items
            type: object
        Kraud.Domain:
            properties:
                CreatedAt:
                    format: date-time
                    type: string
                ID:
                    type: string
                IngressID:
                    type: string
                Name:
                    type: string
            required:
                - ID
                - Name
                - CreatedAt
                - IngressID
            type: object
        Kraud.DomainCreate:
            properties:
                IngressID:
                    description: Ingress ID, will use the default ingress if not specified
                    type: string
                Name:
                    type: string
            required:
                - Name
            type: object
        Kraud.DomainList:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/Kraud.Domain'
                    type: array
            required:
                - items
            type: object
        Kraud.Image:
            description: Image is a docker image for a specific architecture
            properties:
                Config:
                    type: string
                ID:
                    type: string
                Layers:
                    items:
                        $ref: '#/components/schemas/Kraud.LayerReference'
                    type: array
                OciID:
                    type: string
                Size:
                    format: uint64
                    type: integer
            required:
                - ID
                - Size
                - OciID
                - Config
                - Layers
            type: object
        Kraud.ImageName:
            description: Image is a named docker image
            properties:
                AID:
                    type: string
                Amd64:
                    $ref: '#/components/schemas/Kraud.Image'
                ID:
                    type: string
                Ref:
                    type: string
            required:
                - ID
                - AID
                - Ref
            type: object
        Kraud.ImageNameList:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/Kraud.ImageName'
                    type: array
            required:
                - items
            type: object
        Kraud.Layer:
            description: Layer is a docker image layer
            properties:
                ID:
                    type: string
                OciID:
                    type: string
                lost:
                    type: boolean
                refcount:
                    type: integer
                sha256:
                    type: string
                size:
                    format: uint64
                    type: integer
            required:
                - ID
                - size
                - sha256
                - OciID
                - refcount
                - lost
            type: object
        Kraud.LayerList:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/Kraud.Layer'
                    type: array
            required:
                - items
            type: object
        Kraud.LayerReference:
            properties:
                ID:
                    type: string
                OciID:
                    type: string
            type: object
        Kraud.Pod:
            properties:
                AID:
                    type: string
                Architecture:
                    type: string
                Containers:
                    items:
                        $ref: '#/components/schemas/Kraud.Container'
                    type: array
                Cpu:
                    type: string
                DeleteOnDeschedule:
                    type: boolean
                ID:
                    type: string
                Mem:
                    type: string
                Name:
                    type: string
                Namespace:
                    type: string
                Replicas:
                    type: integer
                Res:
                    additionalProperties:
                        type: string
                    type: object
                RestartPolicy:
                    type: string
                Status:
                    $ref: '#/components/schemas/Kraud.PodStatus'
                Zone:
                    type: string
            required:
                - AID
                - Name
                - Namespace
                - Architecture
                - Cpu
                - Mem
                - Zone
                - RestartPolicy
                - DeleteOnDeschedule
                - Containers
                - Volumes
                - Replicas
            type: object
        Kraud.PodList:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/Kraud.Pod'
                    type: array
            required:
                - items
            type: object
        Kraud.PodStatus:
            properties:
                Display:
                    type: string
                Healthy:
                    type: boolean
            required:
                - Display
                - Healthy
            type: object
        Kraud.TenantInfo:
            properties:
                id:
                    type: string
                org:
                    type: string
            required:
                - id
                - org
            type: object
        Kraud.UserRole:
            properties:
                description:
                    type: string
                id:
                    type: string
                name:
                    type: string
                scopes:
                    items:
                        type: string
                    type: array
                    x-go-type: Scopes
            required:
                - name
                - description
                - scopes
            type: object
        Kraud.UserRoleList:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/Kraud.UserRole'
                    type: array
            required:
                - items
            type: object
        Kraud.Volume:
            properties:
                AID:
                    type: string
                Class:
                    type: string
                DeletionLock:
                    type: string
                ExpiresAt:
                    format: date-time
                    type: string
                ID:
                    type: string
                IOPS:
                    type: integer
                Name:
                    type: string
                Size:
                    type: integer
                Version:
                    type: string
                Zone:
                    type: string
            required:
                - AID
                - Name
                - Size
                - Class
            type: object
        Kraud.VolumeList:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/Kraud.Volume'
                    type: array
            required:
                - items
            type: object
        Kraud.VolumeMount:
            properties:
                AID:
                    type: string
                MountPath:
                    type: string
                ReadOnly:
                    type: boolean
                SubPath:
                    type: string
            required:
                - AID
                - MountPath
            type: object
        Limit:
            description: |
                An object describing a limit on resources which can be requested by a task.
            properties:
                MemoryBytes:
                    example: 8272408576
                    format: int64
                    type: integer
                NanoCPUs:
                    example: 4000000000
                    format: int64
                    type: integer
                Pids:
                    default: 0
                    description: |
                        Limits the maximum number of PIDs in the container. Set `0` for unlimited.
                    example: 100
                    format: int64
                    type: integer
            type: object
        LocalNodeState:
            default: ""
            description: Current local status of this node.
            enum:
                - ""
                - inactive
                - pending
                - active
                - error
                - locked
            example: active
            type: string
        ManagerStatus:
            description: |
                ManagerStatus represents the status of a manager.

                It provides the current status of a node's manager component, if the node
                is a manager.
            properties:
                Addr:
                    description: |
                        The IP address and port at which the manager is reachable.
                    example: 10.0.0.46:2377
                    type: string
                Leader:
                    default: false
                    example: true
                    type: boolean
                Reachability:
                    $ref: '#/components/schemas/Reachability'
            type: object
            x-nullable: true
        Mount:
            properties:
                BindOptions:
                    description: Optional configuration for the `bind` type.
                    properties:
                        NonRecursive:
                            default: false
                            description: Disable recursive bind mount.
                            type: boolean
                        Propagation:
                            description: A propagation mode with the value `[r]private`, `[r]shared`, or `[r]slave`.
                            enum:
                                - private
                                - rprivate
                                - shared
                                - rshared
                                - slave
                                - rslave
                            type: string
                    type: object
                Consistency:
                    description: 'The consistency requirement for the mount: `default`, `consistent`, `cached`, or `delegated`.'
                    type: string
                ReadOnly:
                    description: Whether the mount should be read-only.
                    type: boolean
                Source:
                    description: Mount source (e.g. a volume name, a host path).
                    type: string
                Target:
                    description: Container path.
                    type: string
                TmpfsOptions:
                    description: Optional configuration for the `tmpfs` type.
                    properties:
                        Mode:
                            description: The permission mode for the tmpfs mount in an integer.
                            type: integer
                        SizeBytes:
                            description: The size for the tmpfs mount in bytes.
                            format: int64
                            type: integer
                    type: object
                Type:
                    description: |
                        The mount type. Available types:

                        - `bind` Mounts a file or directory from the host into the container. Must exist prior to creating the container.
                        - `volume` Creates a volume with the given name and options (or uses a pre-existing volume with the same name and options). These are **not** removed when the container is removed.
                        - `tmpfs` Create a tmpfs with the given options. The mount source cannot be specified for tmpfs.
                        - `npipe` Mounts a named pipe from the host into the container. Must exist prior to creating the container.
                    enum:
                        - bind
                        - volume
                        - tmpfs
                        - npipe
                    type: string
                VolumeOptions:
                    description: Optional configuration for the `volume` type.
                    properties:
                        DriverConfig:
                            description: Map of driver specific options
                            properties:
                                Name:
                                    description: Name of the driver to use to create the volume.
                                    type: string
                                Options:
                                    additionalProperties:
                                        type: string
                                    description: key/value map of driver specific options.
                                    type: object
                            type: object
                        Labels:
                            additionalProperties:
                                type: string
                            description: User-defined key/value metadata.
                            type: object
                        NoCopy:
                            default: false
                            description: Populate volume with data from the target.
                            type: boolean
                    type: object
            type: object
        MountPoint:
            description: |
                MountPoint represents a mount point configuration inside the container.
                This is used for reporting the mountpoints in use by a container.
            properties:
                Destination:
                    description: |
                        Destination is the path relative to the container root (`/`) where
                        the `Source` is mounted inside the container.
                    example: /usr/share/nginx/html/
                    type: string
                Driver:
                    description: |
                        Driver is the volume driver used to create the volume (if it is a volume).
                    example: local
                    type: string
                Mode:
                    description: |
                        Mode is a comma separated list of options supplied by the user when
                        creating the bind/volume mount.

                        The default is platform-specific (`"z"` on Linux, empty on Windows).
                    example: z
                    type: string
                Name:
                    description: |
                        Name is the name reference to the underlying data defined by `Source`
                        e.g., the volume name.
                    example: myvolume
                    type: string
                Propagation:
                    description: |
                        Propagation describes how mounts are propagated from the host into the
                        mount point, and vice-versa. Refer to the [Linux kernel documentation](https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt)
                        for details. This field is not used on Windows.
                    example: ""
                    type: string
                RW:
                    description: |
                        Whether the mount is mounted writable (read-write).
                    example: true
                    type: boolean
                Source:
                    description: |
                        Source location of the mount.

                        For volumes, this contains the storage location of the volume (within
                        `/var/lib/docker/volumes/`). For bind-mounts, and `npipe`, this contains
                        the source (host) part of the bind-mount. For `tmpfs` mount points, this
                        field is empty.
                    example: /var/lib/docker/volumes/myvolume/_data
                    type: string
                Type:
                    description: |
                        The mount type:

                        - `bind` a mount of a file or directory from the host into the container.
                        - `volume` a docker volume with the given `Name`.
                        - `tmpfs` a `tmpfs`.
                        - `npipe` a named pipe from the host into the container.
                    enum:
                        - bind
                        - volume
                        - tmpfs
                        - npipe
                    example: volume
                    type: string
            type: object
        Network:
            example:
                Attachable: false
                Containers:
                    19a4d5d687db25203351ed79d478946f861258f018fe384f229f2efa4b23513c:
                        EndpointID: 628cadb8bcb92de107b2a1e516cbffe463e321f548feb37697cce00ad694f21a
                        IPv4Address: 172.19.0.2/16
                        IPv6Address: ""
                        MacAddress: 02:42:ac:13:00:02
                        Name: test
                Created: "2016-10-19T04:33:30.360899459Z"
                Driver: bridge
                EnableIPv6: false
                IPAM:
                    Config:
                        - Gateway: 172.19.0.1
                          Subnet: 172.19.0.0/16
                    Driver: default
                    Options:
                        foo: bar
                Id: 7d86d31b1478e7cca9ebed7e73aa0fdeec46c5ca29497431d3007d2d9e15ed99
                Ingress: false
                Internal: false
                Labels:
                    com.example.some-label: some-value
                    com.example.some-other-label: some-other-value
                Name: net01
                Options:
                    com.docker.network.bridge.default_bridge: "true"
                    com.docker.network.bridge.enable_icc: "true"
                    com.docker.network.bridge.enable_ip_masquerade: "true"
                    com.docker.network.bridge.host_binding_ipv4: 0.0.0.0
                    com.docker.network.bridge.name: docker0
                    com.docker.network.driver.mtu: "1500"
                Scope: local
            properties:
                Attachable:
                    type: boolean
                Containers:
                    additionalProperties:
                        $ref: '#/components/schemas/NetworkContainer'
                    type: object
                Created:
                    format: dateTime
                    type: string
                Driver:
                    type: string
                EnableIPv6:
                    type: boolean
                IPAM:
                    $ref: '#/components/schemas/IPAM'
                Id:
                    type: string
                Ingress:
                    type: boolean
                Internal:
                    type: boolean
                Labels:
                    additionalProperties:
                        type: string
                    type: object
                Name:
                    type: string
                Options:
                    additionalProperties:
                        type: string
                    type: object
                Scope:
                    type: string
            type: object
        NetworkAttachmentConfig:
            description: |
                Specifies how a service should be attached to a particular network.
            properties:
                Aliases:
                    description: |
                        Discoverable alternate names for the service on this network.
                    items:
                        type: string
                    type: array
                DriverOpts:
                    additionalProperties:
                        type: string
                    description: |
                        Driver attachment options for the network target.
                    type: object
                Target:
                    description: |
                        The target network for attachment. Must be a network name or ID.
                    type: string
            type: object
        NetworkContainer:
            properties:
                EndpointID:
                    type: string
                IPv4Address:
                    type: string
                IPv6Address:
                    type: string
                MacAddress:
                    type: string
                Name:
                    type: string
            type: object
        NetworkSettings:
            description: NetworkSettings exposes the network settings in the API
            properties:
                Bridge:
                    description: Name of the network'a bridge (for example, `docker0`).
                    example: docker0
                    type: string
                EndpointID:
                    description: |
                        EndpointID uniquely represents a service endpoint in a Sandbox.

                        <p><br /></p>

                        > **Deprecated**: This field is only propagated when attached to the
                        > default "bridge" network. Use the information from the "bridge"
                        > network inside the `Networks` map instead, which contains the same
                        > information. This field was deprecated in Docker 1.9 and is scheduled
                        > to be removed in Docker 17.12.0
                    example: b88f5b905aabf2893f3cbc4ee42d1ea7980bbc0a92e2c8922b1e1795298afb0b
                    type: string
                Gateway:
                    description: |
                        Gateway address for the default "bridge" network.

                        <p><br /></p>

                        > **Deprecated**: This field is only propagated when attached to the
                        > default "bridge" network. Use the information from the "bridge"
                        > network inside the `Networks` map instead, which contains the same
                        > information. This field was deprecated in Docker 1.9 and is scheduled
                        > to be removed in Docker 17.12.0
                    example: 172.17.0.1
                    type: string
                GlobalIPv6Address:
                    description: |
                        Global IPv6 address for the default "bridge" network.

                        <p><br /></p>

                        > **Deprecated**: This field is only propagated when attached to the
                        > default "bridge" network. Use the information from the "bridge"
                        > network inside the `Networks` map instead, which contains the same
                        > information. This field was deprecated in Docker 1.9 and is scheduled
                        > to be removed in Docker 17.12.0
                    example: 2001:db8::5689
                    type: string
                GlobalIPv6PrefixLen:
                    description: |
                        Mask length of the global IPv6 address.

                        <p><br /></p>

                        > **Deprecated**: This field is only propagated when attached to the
                        > default "bridge" network. Use the information from the "bridge"
                        > network inside the `Networks` map instead, which contains the same
                        > information. This field was deprecated in Docker 1.9 and is scheduled
                        > to be removed in Docker 17.12.0
                    example: 64
                    type: integer
                HairpinMode:
                    description: |
                        Indicates if hairpin NAT should be enabled on the virtual interface.
                    example: false
                    type: boolean
                IPAddress:
                    description: |
                        IPv4 address for the default "bridge" network.

                        <p><br /></p>

                        > **Deprecated**: This field is only propagated when attached to the
                        > default "bridge" network. Use the information from the "bridge"
                        > network inside the `Networks` map instead, which contains the same
                        > information. This field was deprecated in Docker 1.9 and is scheduled
                        > to be removed in Docker 17.12.0
                    example: 172.17.0.4
                    type: string
                IPPrefixLen:
                    description: |
                        Mask length of the IPv4 address.

                        <p><br /></p>

                        > **Deprecated**: This field is only propagated when attached to the
                        > default "bridge" network. Use the information from the "bridge"
                        > network inside the `Networks` map instead, which contains the same
                        > information. This field was deprecated in Docker 1.9 and is scheduled
                        > to be removed in Docker 17.12.0
                    example: 16
                    type: integer
                IPv6Gateway:
                    description: |
                        IPv6 gateway address for this network.

                        <p><br /></p>

                        > **Deprecated**: This field is only propagated when attached to the
                        > default "bridge" network. Use the information from the "bridge"
                        > network inside the `Networks` map instead, which contains the same
                        > information. This field was deprecated in Docker 1.9 and is scheduled
                        > to be removed in Docker 17.12.0
                    example: 2001:db8:2::100
                    type: string
                LinkLocalIPv6Address:
                    description: IPv6 unicast address using the link-local prefix.
                    example: fe80::42:acff:fe11:1
                    type: string
                LinkLocalIPv6PrefixLen:
                    description: Prefix length of the IPv6 unicast address.
                    example: "64"
                    type: integer
                MacAddress:
                    description: |
                        MAC address for the container on the default "bridge" network.

                        <p><br /></p>

                        > **Deprecated**: This field is only propagated when attached to the
                        > default "bridge" network. Use the information from the "bridge"
                        > network inside the `Networks` map instead, which contains the same
                        > information. This field was deprecated in Docker 1.9 and is scheduled
                        > to be removed in Docker 17.12.0
                    example: 02:42:ac:11:00:04
                    type: string
                Networks:
                    additionalProperties:
                        $ref: '#/components/schemas/EndpointSettings'
                    description: |
                        Information about all networks that the container is connected to.
                    type: object
                Ports:
                    $ref: '#/components/schemas/PortMap'
                SandboxID:
                    description: SandboxID uniquely represents a container's network stack.
                    example: 9d12daf2c33f5959c8bf90aa513e4f65b561738661003029ec84830cd503a0c3
                    type: string
                SandboxKey:
                    description: SandboxKey identifies the sandbox
                    example: /var/run/docker/netns/8ab54b426c38
                    type: string
                SecondaryIPAddresses:
                    description: ""
                    items:
                        $ref: '#/components/schemas/Address'
                    type: array
                    x-nullable: true
                SecondaryIPv6Addresses:
                    description: ""
                    items:
                        $ref: '#/components/schemas/Address'
                    type: array
                    x-nullable: true
            type: object
        NetworkingConfig:
            description: |
                NetworkingConfig represents the container's networking configuration for
                each of its interfaces.
                It is used for the networking configs specified in the `docker create`
                and `docker network connect` commands.
            example:
                EndpointsConfig:
                    isolated_nw:
                        Aliases:
                            - server_x
                            - server_y
                        IPAMConfig:
                            IPv4Address: 172.20.30.33
                            IPv6Address: 2001:db8:abcd::3033
                            LinkLocalIPs:
                                - 169.254.34.68
                                - fe80::3468
                        Links:
                            - container_1
                            - container_2
            properties:
                EndpointsConfig:
                    additionalProperties:
                        $ref: '#/components/schemas/EndpointSettings'
                    description: |
                        A mapping of network name to endpoint configuration for that network.
                    type: object
            type: object
        Node:
            properties:
                CreatedAt:
                    description: |
                        Date and time at which the node was added to the swarm in
                        [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
                    example: "2016-08-18T10:44:24.496525531Z"
                    format: dateTime
                    type: string
                Description:
                    $ref: '#/components/schemas/NodeDescription'
                ID:
                    example: 24ifsmvkjbyhk
                    type: string
                ManagerStatus:
                    $ref: '#/components/schemas/ManagerStatus'
                Spec:
                    $ref: '#/components/schemas/NodeSpec'
                Status:
                    $ref: '#/components/schemas/NodeStatus'
                UpdatedAt:
                    description: |
                        Date and time at which the node was last updated in
                        [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
                    example: "2017-08-09T07:09:37.632105588Z"
                    format: dateTime
                    type: string
                Version:
                    $ref: '#/components/schemas/ObjectVersion'
            type: object
        NodeDescription:
            description: |
                NodeDescription encapsulates the properties of the Node as reported by the
                agent.
            properties:
                Engine:
                    $ref: '#/components/schemas/EngineDescription'
                Hostname:
                    example: bf3067039e47
                    type: string
                Platform:
                    $ref: '#/components/schemas/Platform'
                Resources:
                    $ref: '#/components/schemas/ResourceObject'
                TLSInfo:
                    $ref: '#/components/schemas/TLSInfo'
            type: object
        NodeSpec:
            example:
                Availability: active
                Labels:
                    foo: bar
                Name: node-name
                Role: manager
            properties:
                Availability:
                    description: Availability of the node.
                    enum:
                        - active
                        - pause
                        - drain
                    example: active
                    type: string
                Labels:
                    additionalProperties:
                        type: string
                    description: User-defined key/value metadata.
                    type: object
                Name:
                    description: Name for the node.
                    example: my-node
                    type: string
                Role:
                    description: Role of the node.
                    enum:
                        - worker
                        - manager
                    example: manager
                    type: string
            type: object
        NodeState:
            description: NodeState represents the state of a node.
            enum:
                - unknown
                - down
                - ready
                - disconnected
            example: ready
            type: string
        NodeStatus:
            description: |
                NodeStatus represents the status of a node.

                It provides the current status of the node, as seen by the manager.
            properties:
                Addr:
                    description: IP address of the node.
                    example: 172.17.0.2
                    type: string
                Message:
                    example: ""
                    type: string
                State:
                    $ref: '#/components/schemas/NodeState'
            type: object
        OCIDescriptor:
            description: |
                A descriptor struct containing digest, media type, and size, as defined in
                the [OCI Content Descriptors Specification](https://github.com/opencontainers/image-spec/blob/v1.0.1/descriptor.md).
            properties:
                digest:
                    description: |
                        The digest of the targeted content.
                    example: sha256:c0537ff6a5218ef531ece93d4984efc99bbf3f7497c0a7726c88e2bb7584dc96
                    type: string
                mediaType:
                    description: |
                        The media type of the object this schema refers to.
                    example: application/vnd.docker.distribution.manifest.v2+json
                    type: string
                size:
                    description: |
                        The size in bytes of the blob.
                    example: 3987495
                    format: int64
                    type: integer
            type: object
            x-go-name: Descriptor
        OCIPlatform:
            description: |
                Describes the platform which the image in the manifest runs on, as defined
                in the [OCI Image Index Specification](https://github.com/opencontainers/image-spec/blob/v1.0.1/image-index.md).
            properties:
                architecture:
                    description: |
                        The CPU architecture, for example `amd64` or `ppc64`.
                    example: arm
                    type: string
                os:
                    description: |
                        The operating system, for example `linux` or `windows`.
                    example: windows
                    type: string
                os.features:
                    description: |
                        Optional field specifying an array of strings, each listing a required
                        OS feature (for example on Windows `win32k`).
                    example:
                        - win32k
                    items:
                        type: string
                    type: array
                os.version:
                    description: |
                        Optional field specifying the operating system version, for example on
                        Windows `10.0.19041.1165`.
                    example: 10.0.19041.1165
                    type: string
                variant:
                    description: |
                        Optional field specifying a variant of the CPU, for example `v7` to
                        specify ARMv7 when architecture is `arm`.
                    example: v7
                    type: string
            type: object
            x-go-name: Platform
        ObjectVersion:
            description: |
                The version number of the object such as node, service, etc. This is needed
                to avoid conflicting writes. The client must send the version number along
                with the modified specification when updating these objects.

                This approach ensures safe concurrency and determinism in that the change
                on the object may not be applied if the version number has changed from the
                last read. In other words, if two update requests specify the same base
                version, only one of the requests can succeed. As a result, two separate
                update requests that happen at the same time will not unintentionally
                overwrite each other.
            properties:
                Index:
                    example: 373531
                    format: uint64
                    type: integer
            type: object
        PeerNode:
            description: Represents a peer-node in the swarm
            properties:
                Addr:
                    description: |
                        IP address and ports at which this node can be reached.
                    type: string
                NodeID:
                    description: Unique identifier of for this node in the swarm.
                    type: string
            type: object
        Platform:
            description: |
                Platform represents the platform (Arch/OS).
            properties:
                Architecture:
                    description: |
                        Architecture represents the hardware architecture (for example,
                        `x86_64`).
                    example: x86_64
                    type: string
                OS:
                    description: |
                        OS represents the Operating System (for example, `linux` or `windows`).
                    example: linux
                    type: string
            type: object
        Plugin:
            description: A plugin for the Engine API
            properties:
                Config:
                    description: The config of a plugin.
                    properties:
                        Args:
                            properties:
                                Description:
                                    example: command line arguments
                                    type: string
                                    x-nullable: false
                                Name:
                                    example: args
                                    type: string
                                    x-nullable: false
                                Settable:
                                    items:
                                        type: string
                                    type: array
                                Value:
                                    items:
                                        type: string
                                    type: array
                            required:
                                - Name
                                - Description
                                - Settable
                                - Value
                            type: object
                            x-nullable: false
                        Description:
                            example: A sample volume plugin for Docker
                            type: string
                            x-nullable: false
                        DockerVersion:
                            description: Docker Version used to create the plugin
                            example: 17.06.0-ce
                            type: string
                            x-nullable: false
                        Documentation:
                            example: /engine/extend/plugins/
                            type: string
                            x-nullable: false
                        Entrypoint:
                            example:
                                - /usr/bin/sample-volume-plugin
                                - /data
                            items:
                                type: string
                            type: array
                        Env:
                            example:
                                - Description: If set, prints debug messages
                                  Name: DEBUG
                                  Settable: null
                                  Value: "0"
                            items:
                                $ref: '#/components/schemas/PluginEnv'
                            type: array
                        Interface:
                            description: The interface between Docker and the plugin
                            properties:
                                ProtocolScheme:
                                    description: Protocol to use for clients connecting to the plugin.
                                    enum:
                                        - ""
                                        - moby.plugins.http/v1
                                    example: some.protocol/v1.0
                                    type: string
                                Socket:
                                    example: plugins.sock
                                    type: string
                                    x-nullable: false
                                Types:
                                    example:
                                        - docker.volumedriver/1.0
                                    items:
                                        $ref: '#/components/schemas/PluginInterfaceType'
                                    type: array
                            required:
                                - Types
                                - Socket
                            type: object
                            x-nullable: false
                        IpcHost:
                            example: false
                            type: boolean
                            x-nullable: false
                        Linux:
                            properties:
                                AllowAllDevices:
                                    example: false
                                    type: boolean
                                    x-nullable: false
                                Capabilities:
                                    example:
                                        - CAP_SYS_ADMIN
                                        - CAP_SYSLOG
                                    items:
                                        type: string
                                    type: array
                                Devices:
                                    items:
                                        $ref: '#/components/schemas/PluginDevice'
                                    type: array
                            required:
                                - Capabilities
                                - AllowAllDevices
                                - Devices
                            type: object
                            x-nullable: false
                        Mounts:
                            items:
                                $ref: '#/components/schemas/PluginMount'
                            type: array
                        Network:
                            properties:
                                Type:
                                    example: host
                                    type: string
                                    x-nullable: false
                            required:
                                - Type
                            type: object
                            x-nullable: false
                        PidHost:
                            example: false
                            type: boolean
                            x-nullable: false
                        PropagatedMount:
                            example: /mnt/volumes
                            type: string
                            x-nullable: false
                        User:
                            properties:
                                GID:
                                    example: 1000
                                    format: uint32
                                    type: integer
                                UID:
                                    example: 1000
                                    format: uint32
                                    type: integer
                            type: object
                            x-nullable: false
                        WorkDir:
                            example: /bin/
                            type: string
                            x-nullable: false
                        rootfs:
                            properties:
                                diff_ids:
                                    example:
                                        - sha256:675532206fbf3030b8458f88d6e26d4eb1577688a25efec97154c94e8b6b4887
                                        - sha256:e216a057b1cb1efc11f8a268f37ef62083e70b1b38323ba252e25ac88904a7e8
                                    items:
                                        type: string
                                    type: array
                                type:
                                    example: layers
                                    type: string
                            type: object
                    required:
                        - Description
                        - Documentation
                        - Interface
                        - Entrypoint
                        - WorkDir
                        - Network
                        - Linux
                        - PidHost
                        - PropagatedMount
                        - IpcHost
                        - Mounts
                        - Env
                        - Args
                    type: object
                    x-nullable: false
                Enabled:
                    description: True if the plugin is running. False if the plugin is not running, only installed.
                    example: true
                    type: boolean
                    x-nullable: false
                Id:
                    example: 5724e2c8652da337ab2eedd19fc6fc0ec908e4bd907c7421bf6a8dfc70c4c078
                    type: string
                Name:
                    example: tiborvass/sample-volume-plugin
                    type: string
                    x-nullable: false
                PluginReference:
                    description: plugin remote reference used to push/pull the plugin
                    example: localhost:5000/tiborvass/sample-volume-plugin:latest
                    type: string
                    x-nullable: false
                Settings:
                    description: Settings that can be modified by users.
                    properties:
                        Args:
                            items:
                                type: string
                            type: array
                        Devices:
                            items:
                                $ref: '#/components/schemas/PluginDevice'
                            type: array
                        Env:
                            example:
                                - DEBUG=0
                            items:
                                type: string
                            type: array
                        Mounts:
                            items:
                                $ref: '#/components/schemas/PluginMount'
                            type: array
                    required:
                        - Args
                        - Devices
                        - Env
                        - Mounts
                    type: object
                    x-nullable: false
            required:
                - Settings
                - Enabled
                - Config
                - Name
            type: object
        PluginDevice:
            properties:
                Description:
                    type: string
                    x-nullable: false
                Name:
                    type: string
                    x-nullable: false
                Path:
                    example: /dev/fuse
                    type: string
                Settable:
                    items:
                        type: string
                    type: array
            required:
                - Name
                - Description
                - Settable
                - Path
            type: object
            x-nullable: false
        PluginEnv:
            properties:
                Description:
                    type: string
                    x-nullable: false
                Name:
                    type: string
                    x-nullable: false
                Settable:
                    items:
                        type: string
                    type: array
                Value:
                    type: string
            required:
                - Name
                - Description
                - Settable
                - Value
            type: object
            x-nullable: false
        PluginInterfaceType:
            properties:
                Capability:
                    type: string
                    x-nullable: false
                Prefix:
                    type: string
                    x-nullable: false
                Version:
                    type: string
                    x-nullable: false
            required:
                - Prefix
                - Capability
                - Version
            type: object
            x-nullable: false
        PluginMount:
            properties:
                Description:
                    example: This is a mount that's used by the plugin.
                    type: string
                    x-nullable: false
                Destination:
                    example: /mnt/state
                    type: string
                    x-nullable: false
                Name:
                    example: some-mount
                    type: string
                    x-nullable: false
                Options:
                    example:
                        - rbind
                        - rw
                    items:
                        type: string
                    type: array
                Settable:
                    items:
                        type: string
                    type: array
                Source:
                    example: /var/lib/docker/plugins/
                    type: string
                Type:
                    example: bind
                    type: string
                    x-nullable: false
            required:
                - Name
                - Description
                - Settable
                - Source
                - Destination
                - Type
                - Options
            type: object
            x-nullable: false
        PluginPrivilege:
            description: |
                Describes a permission the user has to accept upon installing
                the plugin.
            properties:
                Description:
                    type: string
                Name:
                    example: network
                    type: string
                Value:
                    example:
                        - host
                    items:
                        type: string
                    type: array
            type: object
            x-go-name: PluginPrivilege
        PluginsInfo:
            description: |
                Available plugins per type.

                <p><br /></p>

                > **Note**: Only unmanaged (V1) plugins are included in this list.
                > V1 plugins are "lazily" loaded, and are not returned in this list
                > if there is no resource using the plugin.
            properties:
                Authorization:
                    description: Names of available authorization plugins.
                    example:
                        - img-authz-plugin
                        - hbm
                    items:
                        type: string
                    type: array
                Log:
                    description: Names of available logging-drivers, and logging-driver plugins.
                    example:
                        - awslogs
                        - fluentd
                        - gcplogs
                        - gelf
                        - journald
                        - json-file
                        - logentries
                        - splunk
                        - syslog
                    items:
                        type: string
                    type: array
                Network:
                    description: Names of available network-drivers, and network-driver plugins.
                    example:
                        - bridge
                        - host
                        - ipvlan
                        - macvlan
                        - "null"
                        - overlay
                    items:
                        type: string
                    type: array
                Volume:
                    description: Names of available volume-drivers, and network-driver plugins.
                    example:
                        - local
                    items:
                        type: string
                    type: array
            type: object
        Port:
            description: An open port on a container
            example:
                PrivatePort: 8080
                PublicPort: 80
                Type: tcp
            properties:
                IP:
                    description: Host IP address that the container's port is mapped to
                    format: ip-address
                    type: string
                PrivatePort:
                    description: Port on the container
                    format: uint16
                    type: integer
                    x-nullable: false
                PublicPort:
                    description: Port exposed on the host
                    format: uint16
                    type: integer
                Type:
                    enum:
                        - tcp
                        - udp
                        - sctp
                    type: string
                    x-nullable: false
            required:
                - PrivatePort
                - Type
            type: object
        PortBinding:
            description: |
                PortBinding represents a binding between a host IP address and a host
                port.
            properties:
                HostIp:
                    description: Host IP address that the container's port is mapped to.
                    example: 127.0.0.1
                    type: string
                HostPort:
                    description: Host port number that the container's port is mapped to.
                    example: "4443"
                    type: string
                IngressProtocol:
                    type: string
            type: object
        PortMap:
            additionalProperties:
                items:
                    $ref: '#/components/schemas/PortBinding'
                type: array
                x-nullable: true
            description: |
                PortMap describes the mapping of container ports to host ports, using the
                container's port-number and protocol as key in the format `<port>/<protocol>`,
                for example, `80/udp`.

                If a container's port is mapped for multiple protocols, separate entries
                are added to the mapping table.
            example:
                53/udp:
                    - HostIp: 0.0.0.0
                      HostPort: "53"
                80/tcp:
                    - HostIp: 0.0.0.0
                      HostPort: "80"
                    - HostIp: 0.0.0.0
                      HostPort: "8080"
                80/udp:
                    - HostIp: 0.0.0.0
                      HostPort: "80"
                443/tcp:
                    - HostIp: 127.0.0.1
                      HostPort: "4443"
                2377/tcp: null
            type: object
        ProcessConfig:
            properties:
                arguments:
                    items:
                        type: string
                    type: array
                entrypoint:
                    type: string
                privileged:
                    type: boolean
                tty:
                    type: boolean
                user:
                    type: string
            type: object
        ProgressDetail:
            properties:
                current:
                    type: integer
                total:
                    type: integer
            type: object
        PushImageInfo:
            properties:
                error:
                    type: string
                progress:
                    type: string
                progressDetail:
                    $ref: '#/components/schemas/ProgressDetail'
                status:
                    type: string
            type: object
        Reachability:
            description: Reachability represents the reachability of a node.
            enum:
                - unknown
                - unreachable
                - reachable
            example: reachable
            type: string
        RegistryServiceConfig:
            description: |
                RegistryServiceConfig stores daemon registry services configuration.
            properties:
                AllowNondistributableArtifactsCIDRs:
                    description: |
                        List of IP ranges to which nondistributable artifacts can be pushed,
                        using the CIDR syntax [RFC 4632](https://tools.ietf.org/html/4632).

                        Some images (for example, Windows base images) contain artifacts
                        whose distribution is restricted by license. When these images are
                        pushed to a registry, restricted artifacts are not included.

                        This configuration override this behavior, and enables the daemon to
                        push nondistributable artifacts to all registries whose resolved IP
                        address is within the subnet described by the CIDR syntax.

                        This option is useful when pushing images containing
                        nondistributable artifacts to a registry on an air-gapped network so
                        hosts on that network can pull the images without connecting to
                        another server.

                        > **Warning**: Nondistributable artifacts typically have restrictions
                        > on how and where they can be distributed and shared. Only use this
                        > feature to push artifacts to private registries and ensure that you
                        > are in compliance with any terms that cover redistributing
                        > nondistributable artifacts.
                    example:
                        - ::1/128
                        - 127.0.0.0/8
                    items:
                        type: string
                    type: array
                AllowNondistributableArtifactsHostnames:
                    description: |
                        List of registry hostnames to which nondistributable artifacts can be
                        pushed, using the format `<hostname>[:<port>]` or `<IP address>[:<port>]`.

                        Some images (for example, Windows base images) contain artifacts
                        whose distribution is restricted by license. When these images are
                        pushed to a registry, restricted artifacts are not included.

                        This configuration override this behavior for the specified
                        registries.

                        This option is useful when pushing images containing
                        nondistributable artifacts to a registry on an air-gapped network so
                        hosts on that network can pull the images without connecting to
                        another server.

                        > **Warning**: Nondistributable artifacts typically have restrictions
                        > on how and where they can be distributed and shared. Only use this
                        > feature to push artifacts to private registries and ensure that you
                        > are in compliance with any terms that cover redistributing
                        > nondistributable artifacts.
                    example:
                        - registry.internal.corp.example.com:3000
                        - '[2001:db8:a0b:12f0::1]:443'
                    items:
                        type: string
                    type: array
                IndexConfigs:
                    additionalProperties:
                        $ref: '#/components/schemas/IndexInfo'
                    example:
                        '[2001:db8:a0b:12f0::1]:80':
                            Mirrors: []
                            Name: '[2001:db8:a0b:12f0::1]:80'
                            Official: false
                            Secure: false
                        127.0.0.1:5000:
                            Mirrors: []
                            Name: 127.0.0.1:5000
                            Official: false
                            Secure: false
                        docker.io:
                            Mirrors:
                                - https://hub-mirror.corp.example.com:5000/
                            Name: docker.io
                            Official: true
                            Secure: true
                        registry.internal.corp.example.com:3000:
                            Mirrors: []
                            Name: registry.internal.corp.example.com:3000
                            Official: false
                            Secure: false
                    type: object
                InsecureRegistryCIDRs:
                    description: |
                        List of IP ranges of insecure registries, using the CIDR syntax
                        ([RFC 4632](https://tools.ietf.org/html/4632)). Insecure registries
                        accept un-encrypted (HTTP) and/or untrusted (HTTPS with certificates
                        from unknown CAs) communication.

                        By default, local registries (`127.0.0.0/8`) are configured as
                        insecure. All other registries are secure. Communicating with an
                        insecure registry is not possible if the daemon assumes that registry
                        is secure.

                        This configuration override this behavior, insecure communication with
                        registries whose resolved IP address is within the subnet described by
                        the CIDR syntax.

                        Registries can also be marked insecure by hostname. Those registries
                        are listed under `IndexConfigs` and have their `Secure` field set to
                        `false`.

                        > **Warning**: Using this option can be useful when running a local
                        > registry, but introduces security vulnerabilities. This option
                        > should therefore ONLY be used for testing purposes. For increased
                        > security, users should add their CA to their system's list of trusted
                        > CAs instead of enabling this option.
                    example:
                        - ::1/128
                        - 127.0.0.0/8
                    items:
                        type: string
                    type: array
                Mirrors:
                    description: |
                        List of registry URLs that act as a mirror for the official
                        (`docker.io`) registry.
                    example:
                        - https://hub-mirror.corp.example.com:5000/
                        - https://[2001:db8:a0b:12f0::1]/
                    items:
                        type: string
                    type: array
            type: object
            x-nullable: true
        ResourceObject:
            description: |
                An object describing the resources which can be advertised by a node and
                requested by a task.
            properties:
                GenericResources:
                    $ref: '#/components/schemas/GenericResources'
                MemoryBytes:
                    example: 8272408576
                    format: int64
                    type: integer
                NanoCPUs:
                    example: 4000000000
                    format: int64
                    type: integer
            type: object
        Resources:
            description: A container's resources (cgroups config, ulimits, etc)
            properties:
                BlkioDeviceReadBps:
                    description: |
                        Limit read rate (bytes per second) from a device, in the form:

                        ```
                        [{"Path": "device_path", "Rate": rate}]
                        ```
                    items:
                        $ref: '#/components/schemas/ThrottleDevice'
                    type: array
                BlkioDeviceReadIOps:
                    description: |
                        Limit read rate (IO per second) from a device, in the form:

                        ```
                        [{"Path": "device_path", "Rate": rate}]
                        ```
                    items:
                        $ref: '#/components/schemas/ThrottleDevice'
                    type: array
                BlkioDeviceWriteBps:
                    description: |
                        Limit write rate (bytes per second) to a device, in the form:

                        ```
                        [{"Path": "device_path", "Rate": rate}]
                        ```
                    items:
                        $ref: '#/components/schemas/ThrottleDevice'
                    type: array
                BlkioDeviceWriteIOps:
                    description: |
                        Limit write rate (IO per second) to a device, in the form:

                        ```
                        [{"Path": "device_path", "Rate": rate}]
                        ```
                    items:
                        $ref: '#/components/schemas/ThrottleDevice'
                    type: array
                BlkioWeight:
                    description: Block IO weight (relative weight).
                    maximum: 1000
                    minimum: 0
                    type: integer
                BlkioWeightDevice:
                    description: |
                        Block IO weight (relative device weight) in the form:

                        ```
                        [{"Path": "device_path", "Weight": weight}]
                        ```
                    items:
                        properties:
                            Path:
                                type: string
                            Weight:
                                minimum: 0
                                type: integer
                        type: object
                    type: array
                CgroupParent:
                    description: |
                        Path to `cgroups` under which the container's `cgroup` is created. If
                        the path is not absolute, the path is considered to be relative to the
                        `cgroups` path of the init process. Cgroups are created if they do not
                        already exist.
                    type: string
                CpuCount:
                    description: |
                        The number of usable CPUs (Windows only).

                        On Windows Server containers, the processor resource controls are
                        mutually exclusive. The order of precedence is `CPUCount` first, then
                        `CPUShares`, and `CPUPercent` last.
                    format: int64
                    type: integer
                CpuPercent:
                    description: |
                        The usable percentage of the available CPUs (Windows only).

                        On Windows Server containers, the processor resource controls are
                        mutually exclusive. The order of precedence is `CPUCount` first, then
                        `CPUShares`, and `CPUPercent` last.
                    format: int64
                    type: integer
                CpuPeriod:
                    description: The length of a CPU period in microseconds.
                    format: int64
                    type: integer
                CpuQuota:
                    description: |
                        Microseconds of CPU time that the container can get in a CPU period.
                    format: int64
                    type: integer
                CpuRealtimePeriod:
                    description: |
                        The length of a CPU real-time period in microseconds. Set to 0 to
                        allocate no time allocated to real-time tasks.
                    format: int64
                    type: integer
                CpuRealtimeRuntime:
                    description: |
                        The length of a CPU real-time runtime in microseconds. Set to 0 to
                        allocate no time allocated to real-time tasks.
                    format: int64
                    type: integer
                CpuShares:
                    description: |
                        An integer value representing this container's relative CPU weight
                        versus other containers.
                    type: integer
                CpusetCpus:
                    description: |
                        CPUs in which to allow execution (e.g., `0-3`, `0,1`).
                    example: 0-3
                    type: string
                CpusetMems:
                    description: |
                        Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only
                        effective on NUMA systems.
                    type: string
                DeviceCgroupRules:
                    description: a list of cgroup rules to apply to the container
                    items:
                        example: c 13:* rwm
                        type: string
                    type: array
                DeviceRequests:
                    description: |
                        A list of requests for devices to be sent to device drivers.
                    items:
                        $ref: '#/components/schemas/DeviceRequest'
                    type: array
                Devices:
                    description: A list of devices to add to the container.
                    items:
                        $ref: '#/components/schemas/DeviceMapping'
                    type: array
                IOMaximumBandwidth:
                    description: |
                        Maximum IO in bytes per second for the container system drive
                        (Windows only).
                    format: int64
                    type: integer
                IOMaximumIOps:
                    description: Maximum IOps for the container system drive (Windows only)
                    format: int64
                    type: integer
                Init:
                    description: |
                        Run an init inside the container that forwards signals and reaps
                        processes. This field is omitted if empty, and the default (as
                        configured on the daemon) is used.
                    type: boolean
                    x-nullable: true
                KernelMemory:
                    description: |
                        Kernel memory limit in bytes.

                        <p><br /></p>

                        > **Deprecated**: This field is deprecated as the kernel 5.4 deprecated
                        > `kmem.limit_in_bytes`.
                    example: 209715200
                    format: int64
                    type: integer
                KernelMemoryTCP:
                    description: Hard limit for kernel TCP buffer memory (in bytes).
                    format: int64
                    type: integer
                Memory:
                    default: 0
                    description: Memory limit in bytes.
                    format: int64
                    type: integer
                MemoryReservation:
                    description: Memory soft limit in bytes.
                    format: int64
                    type: integer
                MemorySwap:
                    description: |
                        Total memory limit (memory + swap). Set as `-1` to enable unlimited
                        swap.
                    format: int64
                    type: integer
                MemorySwappiness:
                    description: |
                        Tune a container's memory swappiness behavior. Accepts an integer
                        between 0 and 100.
                    format: int64
                    maximum: 100
                    minimum: 0
                    type: integer
                NanoCpus:
                    description: CPU quota in units of 10<sup>-9</sup> CPUs.
                    format: int64
                    type: integer
                OomKillDisable:
                    description: Disable OOM Killer for the container.
                    type: boolean
                PidsLimit:
                    description: |
                        Tune a container's PIDs limit. Set `0` or `-1` for unlimited, or `null`
                        to not change.
                    format: int64
                    type: integer
                    x-nullable: true
                Ulimits:
                    description: |
                        A list of resource limits to set in the container. For example:

                        ```
                        {"Name": "nofile", "Soft": 1024, "Hard": 2048}
                        ```
                    items:
                        properties:
                            Hard:
                                description: Hard limit
                                type: integer
                            Name:
                                description: Name of ulimit
                                type: string
                            Soft:
                                description: Soft limit
                                type: integer
                        type: object
                    type: array
            type: object
        RestartPolicy:
            description: |
                The behavior to apply when the container exits. The default is not to
                restart.

                An ever increasing delay (double the previous delay, starting at 100ms) is
                added before each restart to prevent flooding the server.
            properties:
                MaximumRetryCount:
                    description: |
                        If `on-failure` is used, the number of times to retry before giving up.
                    type: integer
                Name:
                    description: |
                        - Empty string means not to restart
                        - `no` Do not automatically restart
                        - `always` Always restart
                        - `unless-stopped` Restart always except when the user has manually stopped the container
                        - `on-failure` Restart only when the container exit code is non-zero
                    enum:
                        - ""
                        - "no"
                        - always
                        - unless-stopped
                        - on-failure
                    type: string
            type: object
        Runtime:
            description: |
                Runtime describes an [OCI compliant](https://github.com/opencontainers/runtime-spec)
                runtime.

                The runtime is invoked by the daemon via the `containerd` daemon. OCI
                runtimes act as an interface to the Linux kernel namespaces, cgroups,
                and SELinux.
            properties:
                path:
                    description: |
                        Name and, optional, path, of the OCI executable binary.

                        If the path is omitted, the daemon searches the host's `$PATH` for the
                        binary and uses the first result.
                    example: /usr/local/bin/my-oci-runtime
                    type: string
                runtimeArgs:
                    description: |
                        List of command-line arguments to pass to the runtime when invoked.
                    example:
                        - --debug
                        - --systemd-cgroup=false
                    items:
                        type: string
                    type: array
                    x-nullable: true
            type: object
        Secret:
            properties:
                CreatedAt:
                    example: "2017-07-20T13:55:28.678958722Z"
                    format: dateTime
                    type: string
                ID:
                    example: blt1owaxmitz71s9v5zh81zun
                    type: string
                Spec:
                    $ref: '#/components/schemas/SecretSpec'
                UpdatedAt:
                    example: "2017-07-20T13:55:28.678958722Z"
                    format: dateTime
                    type: string
                Version:
                    $ref: '#/components/schemas/ObjectVersion'
            type: object
        SecretSpec:
            properties:
                Data:
                    description: |
                        Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-5))
                        data to store as secret.

                        This field is only used to _create_ a secret, and is not returned by
                        other endpoints.
                    example: ""
                    type: string
                Driver:
                    $ref: '#/components/schemas/Driver'
                    description: |
                        Name of the secrets driver used to fetch the secret's value from an
                        external secret store.
                Labels:
                    additionalProperties:
                        type: string
                    description: User-defined key/value metadata.
                    example:
                        com.example.some-label: some-value
                        com.example.some-other-label: some-other-value
                    type: object
                Name:
                    description: User-defined name of the secret.
                    type: string
                Templating:
                    $ref: '#/components/schemas/Driver'
                    description: |
                        Templating driver, if applicable

                        Templating controls whether and how to evaluate the config payload as
                        a template. If no driver is set, no templating is used.
            type: object
        Service:
            example:
                CreatedAt: "2016-06-07T21:05:51.880065305Z"
                Endpoint:
                    Ports:
                        - Protocol: tcp
                          PublishedPort: 30001
                          TargetPort: 6379
                    Spec:
                        Mode: vip
                        Ports:
                            - Protocol: tcp
                              PublishedPort: 30001
                              TargetPort: 6379
                    VirtualIPs:
                        - Addr: 10.255.0.2/16
                          NetworkID: 4qvuz4ko70xaltuqbt8956gd1
                        - Addr: 10.255.0.3/16
                          NetworkID: 4qvuz4ko70xaltuqbt8956gd1
                ID: 9mnpnzenvg8p8tdbtq4wvbkcz
                Spec:
                    EndpointSpec:
                        Mode: vip
                        Ports:
                            - Protocol: tcp
                              PublishedPort: 30001
                              TargetPort: 6379
                    Mode:
                        Replicated:
                            Replicas: 1
                    Name: hopeful_cori
                    RollbackConfig:
                        Delay: 1000000000
                        FailureAction: pause
                        MaxFailureRatio: 0.15
                        Monitor: 15000000000
                        Parallelism: 1
                    TaskTemplate:
                        ContainerSpec:
                            Image: redis
                        ForceUpdate: 0
                        Placement: {}
                        Resources:
                            Limits: {}
                            Reservations: {}
                        RestartPolicy:
                            Condition: any
                            MaxAttempts: 0
                    UpdateConfig:
                        Delay: 1000000000
                        FailureAction: pause
                        MaxFailureRatio: 0.15
                        Monitor: 15000000000
                        Parallelism: 1
                UpdatedAt: "2016-06-07T21:07:29.962229872Z"
                Version:
                    Index: 19
            properties:
                CreatedAt:
                    format: dateTime
                    type: string
                Endpoint:
                    $ref: '#/components/schemas/ServiceEndpoint'
                ID:
                    type: string
                JobStatus:
                    $ref: '#/components/schemas/ServiceJobStatus'
                ServiceStatus:
                    $ref: '#/components/schemas/ServiceStatus'
                Spec:
                    $ref: '#/components/schemas/ServiceSpec'
                UpdateStatus:
                    $ref: '#/components/schemas/ServiceUpdateStatus'
                UpdatedAt:
                    format: dateTime
                    type: string
                Version:
                    $ref: '#/components/schemas/ObjectVersion'
            type: object
        ServiceEndpoint:
            properties:
                Ports:
                    items:
                        $ref: '#/components/schemas/EndpointPortConfig'
                    type: array
                Spec:
                    $ref: '#/components/schemas/EndpointSpec'
                VirtualIPs:
                    items:
                        properties:
                            Addr:
                                type: string
                            NetworkID:
                                type: string
                        type: object
                    type: array
            type: object
        ServiceJobStatus:
            description: |
                The status of the service when it is in one of ReplicatedJob or
                GlobalJob modes. Absent on Replicated and Global mode services. The
                JobIteration is an ObjectVersion, but unlike the Service's version,
                does not need to be sent with an update request.
            properties:
                JobIteration:
                    $ref: '#/components/schemas/ObjectVersion'
                    description: |
                        JobIteration is a value increased each time a Job is executed,
                        successfully or otherwise. "Executed", in this case, means the
                        job as a whole has been started, not that an individual Task has
                        been launched. A job is "Executed" when its ServiceSpec is
                        updated. JobIteration can be used to disambiguate Tasks belonging
                        to different executions of a job.  Though JobIteration will
                        increase with each subsequent execution, it may not necessarily
                        increase by 1, and so JobIteration should not be used to
                LastExecution:
                    description: |
                        The last time, as observed by the server, that this job was
                        started.
                    format: dateTime
                    type: string
            type: object
        ServiceSpec:
            description: User modifiable configuration for a service.
            properties:
                EndpointSpec:
                    $ref: '#/components/schemas/EndpointSpec'
                Labels:
                    additionalProperties:
                        type: string
                    description: User-defined key/value metadata.
                    type: object
                Mode:
                    $ref: '#/components/schemas/ServiceSpecMode'
                Name:
                    description: Name of the service.
                    type: string
                Networks:
                    description: Specifies which networks the service should attach to.
                    items:
                        $ref: '#/components/schemas/NetworkAttachmentConfig'
                    type: array
                RollbackConfig:
                    description: Specification for the rollback strategy of the service.
                    properties:
                        Delay:
                            description: |
                                Amount of time between rollback iterations, in nanoseconds.
                            format: int64
                            type: integer
                        FailureAction:
                            description: |
                                Action to take if an rolled back task fails to run, or stops
                                running during the rollback.
                            enum:
                                - continue
                                - pause
                            type: string
                        MaxFailureRatio:
                            default: 0
                            description: |
                                The fraction of tasks that may fail during a rollback before the
                                failure action is invoked, specified as a floating point number
                                between 0 and 1.
                            type: number
                        Monitor:
                            description: |
                                Amount of time to monitor each rolled back task for failures, in
                                nanoseconds.
                            format: int64
                            type: integer
                        Order:
                            description: |
                                The order of operations when rolling back a task. Either the old
                                task is shut down before the new task is started, or the new task
                                is started before the old task is shut down.
                            enum:
                                - stop-first
                                - start-first
                            type: string
                        Parallelism:
                            description: |
                                Maximum number of tasks to be rolled back in one iteration (0 means
                                unlimited parallelism).
                            format: int64
                            type: integer
                    type: object
                TaskTemplate:
                    $ref: '#/components/schemas/TaskSpec'
                UpdateConfig:
                    description: Specification for the update strategy of the service.
                    properties:
                        Delay:
                            description: Amount of time between updates, in nanoseconds.
                            format: int64
                            type: integer
                        FailureAction:
                            description: |
                                Action to take if an updated task fails to run, or stops running
                                during the update.
                            enum:
                                - continue
                                - pause
                                - rollback
                            type: string
                        MaxFailureRatio:
                            default: 0
                            description: |
                                The fraction of tasks that may fail during an update before the
                                failure action is invoked, specified as a floating point number
                                between 0 and 1.
                            type: number
                        Monitor:
                            description: |
                                Amount of time to monitor each updated task for failures, in
                                nanoseconds.
                            format: int64
                            type: integer
                        Order:
                            description: |
                                The order of operations when rolling out an updated task. Either
                                the old task is shut down before the new task is started, or the
                                new task is started before the old task is shut down.
                            enum:
                                - stop-first
                                - start-first
                            type: string
                        Parallelism:
                            description: |
                                Maximum number of tasks to be updated in one iteration (0 means
                                unlimited parallelism).
                            format: int64
                            type: integer
                    type: object
            type: object
        ServiceSpecMode:
            description: Scheduling mode for the service.
            properties:
                Replicated:
                    $ref: '#/components/schemas/ServiceSpecModeReplicated'
            type: object
        ServiceSpecModeReplicated:
            properties:
                Replicas:
                    Global:
                        GlobalJob:
                            description: |
                                The mode used for services which run a task to the completed state
                                on each valid node.
                            type: object
                        ReplicatedJob:
                            description: |
                                The mode used for services with a finite number of tasks that run
                                to a completed state.
                            properties:
                                MaxConcurrent:
                                    default: 1
                                    description: |
                                        The maximum number of replicas to run simultaneously.
                                    format: int64
                                    type: integer
                                TotalCompletions:
                                    description: |
                                        The total number of replicas desired to reach the Completed
                                        state. If unset, will default to the value of `MaxConcurrent`
                                    format: int64
                                    type: integer
                            type: object
                        type: object
                    format: int64
                    type: integer
            type: object
        ServiceStatus:
            description: |
                The status of the service's tasks. Provided only when requested as
                part of a ServiceList operation.
            properties:
                CompletedTasks:
                    description: |
                        The number of tasks for a job that are in the Completed state.
                        This field must be cross-referenced with the service type, as the
                        value of 0 may mean the service is not in a job mode, or it may
                        mean the job-mode service has no tasks yet Completed.
                    format: uint64
                    type: integer
                DesiredTasks:
                    description: |
                        The number of tasks for the service desired to be running.
                        For replicated services, this is the replica count from the
                        service spec. For global services, this is computed by taking
                        count of all tasks for the service with a Desired State other
                        than Shutdown.
                    example: 10
                    format: uint64
                    type: integer
                RunningTasks:
                    description: |
                        The number of tasks for the service currently in the Running state.
                    example: 7
                    format: uint64
                    type: integer
            type: object
        ServiceUpdateResponse:
            example:
                Warning: 'unable to pin image doesnotexist:latest to digest: image library/doesnotexist:latest not found'
            properties:
                Warnings:
                    description: Optional warning messages
                    items:
                        type: string
                    type: array
            type: object
        ServiceUpdateStatus:
            description: The status of a service update.
            properties:
                CompletedAt:
                    format: dateTime
                    type: string
                Message:
                    type: string
                StartedAt:
                    format: dateTime
                    type: string
                State:
                    enum:
                        - updating
                        - paused
                        - completed
                    type: string
            type: object
        Swarm:
            allOf:
                - $ref: '#/components/schemas/ClusterInfo'
                - properties:
                    JoinTokens:
                        $ref: '#/components/schemas/JoinTokens'
                  type: object
            type: object
        SwarmInfo:
            description: |
                Represents generic information about swarm.
            properties:
                Cluster:
                    $ref: '#/components/schemas/ClusterInfo'
                ControlAvailable:
                    default: false
                    example: true
                    type: boolean
                Error:
                    default: ""
                    type: string
                LocalNodeState:
                    $ref: '#/components/schemas/LocalNodeState'
                Managers:
                    description: Total number of managers in the swarm.
                    example: 3
                    type: integer
                    x-nullable: true
                NodeAddr:
                    default: ""
                    description: |
                        IP address at which this node can be reached by other nodes in the
                        swarm.
                    example: 10.0.0.46
                    type: string
                NodeID:
                    default: ""
                    description: Unique identifier of for this node in the swarm.
                    example: k67qz4598weg5unwwffg6z1m1
                    type: string
                Nodes:
                    description: Total number of nodes in the swarm.
                    example: 4
                    type: integer
                    x-nullable: true
                RemoteManagers:
                    default: null
                    description: |
                        List of ID's and addresses of other managers in the swarm.
                    example:
                        - Addr: 10.0.0.158:2377
                          NodeID: 71izy0goik036k48jg985xnds
                        - Addr: 10.0.0.159:2377
                          NodeID: 79y6h1o4gv8n120drcprv5nmc
                        - Addr: 10.0.0.46:2377
                          NodeID: k67qz4598weg5unwwffg6z1m1
                    items:
                        $ref: '#/components/schemas/PeerNode'
                    type: array
                    x-nullable: true
            type: object
        SwarmSpec:
            description: User modifiable swarm configuration.
            properties:
                CAConfig:
                    description: CA configuration.
                    properties:
                        ExternalCAs:
                            description: |
                                Configuration for forwarding signing requests to an external
                                certificate authority.
                            items:
                                properties:
                                    CACert:
                                        description: |
                                            The root CA certificate (in PEM format) this external CA uses
                                            to issue TLS certificates (assumed to be to the current swarm
                                            root CA certificate if not provided).
                                        type: string
                                    Options:
                                        additionalProperties:
                                            type: string
                                        description: |
                                            An object with key/value pairs that are interpreted as
                                            protocol-specific options for the external CA driver.
                                        type: object
                                    Protocol:
                                        default: cfssl
                                        description: |
                                            Protocol for communication with the external CA (currently
                                            only `cfssl` is supported).
                                        enum:
                                            - cfssl
                                        type: string
                                    URL:
                                        description: |
                                            URL where certificate signing requests should be sent.
                                        type: string
                                type: object
                            type: array
                        ForceRotate:
                            description: |
                                An integer whose purpose is to force swarm to generate a new
                                signing CA certificate and key, if none have been specified in
                                `SigningCACert` and `SigningCAKey`
                            format: uint64
                            type: integer
                        NodeCertExpiry:
                            description: The duration node certificates are issued for.
                            example: 7776000000000000
                            format: int64
                            type: integer
                        SigningCACert:
                            description: |
                                The desired signing CA certificate for all swarm node TLS leaf
                                certificates, in PEM format.
                            type: string
                        SigningCAKey:
                            description: |
                                The desired signing CA key for all swarm node TLS leaf certificates,
                                in PEM format.
                            type: string
                    type: object
                    x-nullable: true
                Dispatcher:
                    description: Dispatcher configuration.
                    properties:
                        HeartbeatPeriod:
                            description: |
                                The delay for an agent to send a heartbeat to the dispatcher.
                            example: 5000000000
                            format: int64
                            type: integer
                    type: object
                    x-nullable: true
                EncryptionConfig:
                    description: Parameters related to encryption-at-rest.
                    properties:
                        AutoLockManagers:
                            description: |
                                If set, generate a key and use it to lock data stored on the
                                managers.
                            example: false
                            type: boolean
                    type: object
                Labels:
                    additionalProperties:
                        type: string
                    description: User-defined key/value metadata.
                    example:
                        com.example.corp.department: engineering
                        com.example.corp.type: production
                    type: object
                Name:
                    description: Name of the swarm.
                    example: default
                    type: string
                Orchestration:
                    description: Orchestration configuration.
                    properties:
                        TaskHistoryRetentionLimit:
                            description: |
                                The number of historic tasks to keep per instance or node. If
                                negative, never remove completed or failed tasks.
                            example: 10
                            format: int64
                            type: integer
                    type: object
                    x-nullable: true
                Raft:
                    description: Raft configuration.
                    properties:
                        ElectionTick:
                            description: |
                                The number of ticks that a follower will wait for a message from
                                the leader before becoming a candidate and starting an election.
                                `ElectionTick` must be greater than `HeartbeatTick`.

                                A tick currently defaults to one second, so these translate
                                directly to seconds currently, but this is NOT guaranteed.
                            example: 3
                            type: integer
                        HeartbeatTick:
                            description: |
                                The number of ticks between heartbeats. Every HeartbeatTick ticks,
                                the leader will send a heartbeat to the followers.

                                A tick currently defaults to one second, so these translate
                                directly to seconds currently, but this is NOT guaranteed.
                            example: 1
                            type: integer
                        KeepOldSnapshots:
                            description: |
                                The number of snapshots to keep beyond the current snapshot.
                            format: uint64
                            type: integer
                        LogEntriesForSlowFollowers:
                            description: |
                                The number of log entries to keep around to sync up slow followers
                                after a snapshot is created.
                            example: 500
                            format: uint64
                            type: integer
                        SnapshotInterval:
                            description: The number of log entries between snapshots.
                            example: 10000
                            format: uint64
                            type: integer
                    type: object
                TaskDefaults:
                    description: Defaults for creating tasks in this cluster.
                    properties:
                        LogDriver:
                            description: |
                                The log driver to use for tasks created in the orchestrator if
                                unspecified by a service.

                                Updating this value only affects new tasks. Existing tasks continue
                                to use their previously configured log driver until recreated.
                            properties:
                                Name:
                                    description: |
                                        The log driver to use as a default for new tasks.
                                    example: json-file
                                    type: string
                                Options:
                                    additionalProperties:
                                        type: string
                                    description: |
                                        Driver-specific options for the selectd log driver, specified
                                        as key/value pairs.
                                    example:
                                        max-file: "10"
                                        max-size: 100m
                                    type: object
                            type: object
                    type: object
            type: object
        SystemInfo:
            properties:
                Architecture:
                    description: |
                        Hardware architecture of the host, as returned by the Go runtime
                        (`GOARCH`).

                        A full list of possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment).
                    example: x86_64
                    type: string
                BridgeNfIp6tables:
                    description: Indicates if `bridge-nf-call-ip6tables` is available on the host.
                    example: true
                    type: boolean
                BridgeNfIptables:
                    description: Indicates if `bridge-nf-call-iptables` is available on the host.
                    example: true
                    type: boolean
                CPUSet:
                    description: |
                        Indicates if CPUsets (cpuset.cpus, cpuset.mems) are supported by the host.

                        See [cpuset(7)](https://www.kernel.org/doc/Documentation/cgroup-v1/cpusets.txt)
                    example: true
                    type: boolean
                CPUShares:
                    description: |
                        Indicates if CPU Shares limiting is supported by the host.
                    example: true
                    type: boolean
                CgroupDriver:
                    default: cgroupfs
                    description: |
                        The driver to use for managing cgroups.
                    enum:
                        - cgroupfs
                        - systemd
                        - none
                    example: cgroupfs
                    type: string
                CgroupVersion:
                    default: "1"
                    description: |
                        The version of the cgroup.
                    enum:
                        - "1"
                        - "2"
                    example: "1"
                    type: string
                ClusterAdvertise:
                    description: |
                        The network endpoint that the Engine advertises for the purpose of
                        node discovery. ClusterAdvertise is a `host:port` combination on which
                        the daemon is reachable by other hosts.

                        <p><br /></p>

                        > **Deprecated**: This field is only propagated when using standalone Swarm
                        > mode, and overlay networking using an external k/v store. Overlay
                        > networks with Swarm mode enabled use the built-in raft store, and
                        > this field will be empty.
                    example: node5.corp.example.com:8000
                    type: string
                ClusterStore:
                    description: |
                        URL of the distributed storage backend.


                        The storage backend is used for multihost networking (to store
                        network and endpoint information) and by the node discovery mechanism.

                        <p><br /></p>

                        > **Deprecated**: This field is only propagated when using standalone Swarm
                        > mode, and overlay networking using an external k/v store. Overlay
                        > networks with Swarm mode enabled use the built-in raft store, and
                        > this field will be empty.
                    example: consul://consul.corp.example.com:8600/some/path
                    type: string
                ContainerdCommit:
                    $ref: '#/components/schemas/Commit'
                Containers:
                    description: Total number of containers on the host.
                    example: 14
                    type: integer
                ContainersPaused:
                    description: |
                        Number of containers with status `"paused"`.
                    example: 1
                    type: integer
                ContainersRunning:
                    description: |
                        Number of containers with status `"running"`.
                    example: 3
                    type: integer
                ContainersStopped:
                    description: |
                        Number of containers with status `"stopped"`.
                    example: 10
                    type: integer
                CpuCfsPeriod:
                    description: |
                        Indicates if CPU CFS(Completely Fair Scheduler) period is supported by
                        the host.
                    example: true
                    type: boolean
                CpuCfsQuota:
                    description: |
                        Indicates if CPU CFS(Completely Fair Scheduler) quota is supported by
                        the host.
                    example: true
                    type: boolean
                Debug:
                    description: |
                        Indicates if the daemon is running in debug-mode / with debug-level
                        logging enabled.
                    example: true
                    type: boolean
                DefaultAddressPools:
                    description: |
                        List of custom default address pools for local networks, which can be
                        specified in the daemon.json file or dockerd option.

                        Example: a Base "10.10.0.0/16" with Size 24 will define the set of 256
                        10.10.[0-255].0/24 address pools.
                    items:
                        properties:
                            Base:
                                description: The network address in CIDR format
                                example: 10.10.0.0/16
                                type: string
                            Size:
                                description: The network pool size
                                example: "24"
                                type: integer
                        type: object
                    type: array
                DefaultRuntime:
                    default: runc
                    description: |
                        Name of the default OCI runtime that is used when starting containers.

                        The default can be overridden per-container at create time.
                    example: runc
                    type: string
                DockerRootDir:
                    description: |
                        Root directory of persistent Docker state.

                        Defaults to `/var/lib/docker` on Linux, and `C:\ProgramData\docker`
                        on Windows.
                    example: /var/lib/docker
                    type: string
                Driver:
                    description: Name of the storage driver in use.
                    example: overlay2
                    type: string
                DriverStatus:
                    description: |
                        Information specific to the storage driver, provided as
                        "label" / "value" pairs.

                        This information is provided by the storage driver, and formatted
                        in a way consistent with the output of `docker info` on the command
                        line.

                        <p><br /></p>

                        > **Note**: The information returned in this field, including the
                        > formatting of values and labels, should not be considered stable,
                        > and may change without notice.
                    example:
                        - - Backing Filesystem
                          - extfs
                        - - Supports d_type
                          - "true"
                        - - Native Overlay Diff
                          - "true"
                    items:
                        items:
                            type: string
                        type: array
                    type: array
                ExperimentalBuild:
                    description: |
                        Indicates if experimental features are enabled on the daemon.
                    example: true
                    type: boolean
                GenericResources:
                    $ref: '#/components/schemas/GenericResources'
                HttpProxy:
                    description: |
                        HTTP-proxy configured for the daemon. This value is obtained from the
                        [`HTTP_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.
                        Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL
                        are masked in the API response.

                        Containers do not automatically inherit this configuration.
                    example: http://xxxxx:xxxxx@proxy.corp.example.com:8080
                    type: string
                HttpsProxy:
                    description: |
                        HTTPS-proxy configured for the daemon. This value is obtained from the
                        [`HTTPS_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.
                        Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL
                        are masked in the API response.

                        Containers do not automatically inherit this configuration.
                    example: https://xxxxx:xxxxx@proxy.corp.example.com:4443
                    type: string
                ID:
                    description: |
                        Unique identifier of the daemon.

                        <p><br /></p>

                        > **Note**: The format of the ID itself is not part of the API, and
                        > should not be considered stable.
                    example: 7TRN:IPZB:QYBB:VPBQ:UMPP:KARE:6ZNR:XE6T:7EWV:PKF4:ZOJD:TPYS
                    type: string
                IPv4Forwarding:
                    description: Indicates IPv4 forwarding is enabled.
                    example: true
                    type: boolean
                Images:
                    description: |
                        Total number of images on the host.

                        Both _tagged_ and _untagged_ (dangling) images are counted.
                    example: 508
                    type: integer
                IndexServerAddress:
                    default: https://index.docker.io/v1/
                    description: |
                        Address / URL of the index server that is used for image search,
                        and as a default for user authentication for Docker Hub and Docker Cloud.
                    example: https://index.docker.io/v1/
                    type: string
                InitBinary:
                    description: |
                        Name and, optional, path of the `docker-init` binary.

                        If the path is omitted, the daemon searches the host's `$PATH` for the
                        binary and uses the first result.
                    example: docker-init
                    type: string
                InitCommit:
                    $ref: '#/components/schemas/Commit'
                Isolation:
                    default: default
                    description: |
                        Represents the isolation technology to use as a default for containers.
                        The supported values are platform-specific.

                        If no isolation value is specified on daemon start, on Windows client,
                        the default is `hyperv`, and on Windows server, the default is `process`.

                        This option is currently not used on other platforms.
                    enum:
                        - default
                        - hyperv
                        - process
                    type: string
                KernelMemory:
                    description: |
                        Indicates if the host has kernel memory limit support enabled.

                        <p><br /></p>

                        > **Deprecated**: This field is deprecated as the kernel 5.4 deprecated
                        > `kmem.limit_in_bytes`.
                    example: true
                    type: boolean
                KernelMemoryTCP:
                    description: |
                        Indicates if the host has kernel memory TCP limit support enabled.

                        Kernel memory TCP limits are not supported when using cgroups v2, which
                        does not support the corresponding `memory.kmem.tcp.limit_in_bytes` cgroup.
                    example: true
                    type: boolean
                KernelVersion:
                    description: |
                        Kernel version of the host.

                        On Linux, this information obtained from `uname`. On Windows this
                        information is queried from the <kbd>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\</kbd>
                        registry value, for example _"10.0 14393 (14393.1198.amd64fre.rs1_release_sec.170427-1353)"_.
                    example: 4.9.38-moby
                    type: string
                Labels:
                    description: |
                        User-defined labels (key/value metadata) as set on the daemon.

                        <p><br /></p>

                        > **Note**: When part of a Swarm, nodes can both have _daemon_ labels,
                        > set through the daemon configuration, and _node_ labels, set from a
                        > manager node in the Swarm. Node labels are not included in this
                        > field. Node labels can be retrieved using the `/nodes/(id)` endpoint
                        > on a manager node in the Swarm.
                    example:
                        - storage=ssd
                        - production
                    items:
                        type: string
                    type: array
                LiveRestoreEnabled:
                    default: false
                    description: |
                        Indicates if live restore is enabled.

                        If enabled, containers are kept running when the daemon is shutdown
                        or upon daemon start if running containers are detected.
                    example: false
                    type: boolean
                LoggingDriver:
                    description: |
                        The logging driver to use as a default for new containers.
                    type: string
                MemTotal:
                    description: |
                        Total amount of physical memory available on the host, in bytes.
                    example: 2095882240
                    format: int64
                    type: integer
                MemoryLimit:
                    description: Indicates if the host has memory limit support enabled.
                    example: true
                    type: boolean
                NCPU:
                    description: |
                        The number of logical CPUs usable by the daemon.

                        The number of available CPUs is checked by querying the operating
                        system when the daemon starts. Changes to operating system CPU
                        allocation after the daemon is started are not reflected.
                    example: 4
                    type: integer
                NEventsListener:
                    description: Number of event listeners subscribed.
                    example: 30
                    type: integer
                NFd:
                    description: |
                        The total number of file Descriptors in use by the daemon process.

                        This information is only returned if debug-mode is enabled.
                    example: 64
                    type: integer
                NGoroutines:
                    description: |
                        The  number of goroutines that currently exist.

                        This information is only returned if debug-mode is enabled.
                    example: 174
                    type: integer
                Name:
                    description: Hostname of the host.
                    example: node5.corp.example.com
                    type: string
                NoProxy:
                    description: |
                        Comma-separated list of domain extensions for which no proxy should be
                        used. This value is obtained from the [`NO_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html)
                        environment variable.

                        Containers do not automatically inherit this configuration.
                    example: '*.local, 169.254/16'
                    type: string
                OSType:
                    description: |
                        Generic type of the operating system of the host, as returned by the
                        Go runtime (`GOOS`).

                        Currently returned values are "linux" and "windows". A full list of
                        possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment).
                    example: linux
                    type: string
                OSVersion:
                    description: |
                        Version of the host's operating system

                        <p><br /></p>

                        > **Note**: The information returned in this field, including its
                        > very existence, and the formatting of values, should not be considered
                        > stable, and may change without notice.
                    example: "16.04"
                    type: string
                OomKillDisable:
                    description: Indicates if OOM killer disable is supported on the host.
                    type: boolean
                OperatingSystem:
                    description: |
                        Name of the host's operating system, for example: "Ubuntu 16.04.2 LTS"
                        or "Windows Server 2016 Datacenter"
                    example: Alpine Linux v3.5
                    type: string
                PidsLimit:
                    description: Indicates if the host kernel has PID limit support enabled.
                    example: true
                    type: boolean
                Plugins:
                    $ref: '#/components/schemas/PluginsInfo'
                ProductLicense:
                    description: |
                        Reports a summary of the product license on the daemon.

                        If a commercial license has been applied to the daemon, information
                        such as number of nodes, and expiration are included.
                    example: Community Engine
                    type: string
                RegistryConfig:
                    $ref: '#/components/schemas/RegistryServiceConfig'
                RuncCommit:
                    $ref: '#/components/schemas/Commit'
                Runtimes:
                    additionalProperties:
                        $ref: '#/components/schemas/Runtime'
                    default:
                        runc:
                            path: runc
                    description: |
                        List of [OCI compliant](https://github.com/opencontainers/runtime-spec)
                        runtimes configured on the daemon. Keys hold the "name" used to
                        reference the runtime.

                        The Docker daemon relies on an OCI compliant runtime (invoked via the
                        `containerd` daemon) as its interface to the Linux kernel namespaces,
                        cgroups, and SELinux.

                        The default runtime is `runc`, and automatically configured. Additional
                        runtimes can be configured by the user and will be listed here.
                    example:
                        custom:
                            path: /usr/local/bin/my-oci-runtime
                            runtimeArgs:
                                - --debug
                                - --systemd-cgroup=false
                        runc:
                            path: runc
                        runc-master:
                            path: /go/bin/runc
                    type: object
                SecurityOptions:
                    description: |
                        List of security features that are enabled on the daemon, such as
                        apparmor, seccomp, SELinux, user-namespaces (userns), and rootless.

                        Additional configuration options for each security feature may
                        be present, and are included as a comma-separated list of key/value
                        pairs.
                    example:
                        - name=apparmor
                        - name=seccomp,profile=default
                        - name=selinux
                        - name=userns
                        - name=rootless
                    items:
                        type: string
                    type: array
                ServerVersion:
                    description: |
                        Version string of the daemon.

                        > **Note**: the [standalone Swarm API](/swarm/swarm-api/)
                        > returns the Swarm version instead of the daemon  version, for example
                        > `swarm/1.2.8`.
                    example: 17.06.0-ce
                    type: string
                SwapLimit:
                    description: Indicates if the host has memory swap limit support enabled.
                    example: true
                    type: boolean
                Swarm:
                    $ref: '#/components/schemas/SwarmInfo'
                SystemTime:
                    description: |
                        Current system-time in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt)
                        format with nano-seconds.
                    example: "2017-08-08T20:28:29.06202363Z"
                    type: string
                Warnings:
                    description: |
                        List of warnings / informational messages about missing features, or
                        issues related to the daemon configuration.

                        These messages can be printed by the client as information to the user.
                    example:
                        - 'WARNING: No memory limit support'
                        - 'WARNING: bridge-nf-call-iptables is disabled'
                        - 'WARNING: bridge-nf-call-ip6tables is disabled'
                    items:
                        type: string
                    type: array
            type: object
        SystemVersion:
            description: |
                Response of Engine API: GET "/version"
            properties:
                ApiVersion:
                    description: |
                        The default (and highest) API version that is supported by the daemon
                    example: "1.40"
                    type: string
                Arch:
                    description: |
                        The architecture that the daemon is running on
                    example: amd64
                    type: string
                BuildTime:
                    description: |
                        The date and time that the daemon was compiled.
                    example: "2020-06-22T15:49:27.000000000+00:00"
                    type: string
                Components:
                    description: |
                        Information about system components
                    items:
                        properties:
                            Details:
                                description: |
                                    Key/value pairs of strings with additional information about the
                                    component. These values are intended for informational purposes
                                    only, and their content is not defined, and not part of the API
                                    specification.

                                    These messages can be printed by the client as information to the user.
                                type: object
                                x-nullable: true
                            Name:
                                description: |
                                    Name of the component
                                example: Engine
                                type: string
                            Version:
                                description: |
                                    Version of the component
                                example: 19.03.12
                                type: string
                                x-nullable: false
                        required:
                            - Name
                            - Version
                        type: object
                        x-go-name: ComponentVersion
                    type: array
                Experimental:
                    description: |
                        Indicates if the daemon is started with experimental features enabled.

                        This field is omitted when empty / false.
                    example: true
                    type: boolean
                GitCommit:
                    description: |
                        The Git commit of the source code that was used to build the daemon
                    example: 48a66213fe
                    type: string
                GoVersion:
                    description: |
                        The version Go used to compile the daemon, and the version of the Go
                        runtime in use.
                    example: go1.13.14
                    type: string
                KernelVersion:
                    description: |
                        The kernel version (`uname -r`) that the daemon is running on.

                        This field is omitted when empty.
                    example: 4.19.76-linuxkit
                    type: string
                MinAPIVersion:
                    description: |
                        The minimum API version that is supported by the daemon
                    example: "1.12"
                    type: string
                Os:
                    description: |
                        The operating system that the daemon is running on ("linux" or "windows")
                    example: linux
                    type: string
                Platform:
                    properties:
                        Name:
                            type: string
                    required:
                        - Name
                    type: object
                Version:
                    description: The version of the daemon
                    example: 19.03.12
                    type: string
            type: object
        TLSInfo:
            description: |
                Information about the issuer of leaf TLS certificates and the trusted root
                CA certificate.
            example:
                CertIssuerPublicKey: MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEmT9XIw9h1qoNclv9VeHmf/Vi6/uI2vFXdBveXTpcPjqx6i9wNazchk1XWV/dKTKvSh9xyGKmiIeRcE4OiMnJ1A==
                CertIssuerSubject: MBMxETAPBgNVBAMTCHN3YXJtLWNh
                TrustRoot: |
                    -----BEGIN CERTIFICATE-----
                    MIIBajCCARCgAwIBAgIUbYqrLSOSQHoxD8CwG6Bi2PJi9c8wCgYIKoZIzj0EAwIw
                    EzERMA8GA1UEAxMIc3dhcm0tY2EwHhcNMTcwNDI0MjE0MzAwWhcNMzcwNDE5MjE0
                    MzAwWjATMREwDwYDVQQDEwhzd2FybS1jYTBZMBMGByqGSM49AgEGCCqGSM49AwEH
                    A0IABJk/VyMPYdaqDXJb/VXh5n/1Yuv7iNrxV3Qb3l06XD46seovcDWs3IZNV1lf
                    3Skyr0ofcchipoiHkXBODojJydSjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMB
                    Af8EBTADAQH/MB0GA1UdDgQWBBRUXxuRcnFjDfR/RIAUQab8ZV/n4jAKBggqhkjO
                    PQQDAgNIADBFAiAy+JTe6Uc3KyLCMiqGl2GyWGQqQDEcO3/YG36x7om65AIhAJvz
                    pxv6zFeVEkAEEkqIYi0omA9+CjanB/6Bz4n1uw8H
                    -----END CERTIFICATE-----
            properties:
                CertIssuerPublicKey:
                    description: |
                        The base64-url-safe-encoded raw public key bytes of the issuer.
                    type: string
                CertIssuerSubject:
                    description: The base64-url-safe-encoded raw subject bytes of the issuer.
                    type: string
                TrustRoot:
                    description: |
                        The root CA certificate(s) that are used to validate leaf TLS
                        certificates.
                    type: string
            type: object
        Task:
            example:
                AssignedGenericResources:
                    - DiscreteResourceSpec:
                        Kind: SSD
                        Value: 3
                    - NamedResourceSpec:
                        Kind: GPU
                        Value: UUID1
                    - NamedResourceSpec:
                        Kind: GPU
                        Value: UUID2
                CreatedAt: "2016-06-07T21:07:31.171892745Z"
                DesiredState: running
                ID: 0kzzo1i0y4jz6027t0k7aezc7
                NetworksAttachments:
                    - Addresses:
                        - 10.255.0.10/16
                      Network:
                        CreatedAt: "2016-06-07T20:31:11.912919752Z"
                        DriverState:
                            Name: overlay
                            Options:
                                com.docker.network.driver.overlay.vxlanid_list: "256"
                        ID: 4qvuz4ko70xaltuqbt8956gd1
                        IPAMOptions:
                            Configs:
                                - Gateway: 10.255.0.1
                                  Subnet: 10.255.0.0/16
                            Driver:
                                Name: default
                        Spec:
                            DriverConfiguration: {}
                            IPAMOptions:
                                Configs:
                                    - Gateway: 10.255.0.1
                                      Subnet: 10.255.0.0/16
                                Driver: {}
                            Labels:
                                com.docker.swarm.internal: "true"
                            Name: ingress
                        UpdatedAt: "2016-06-07T21:07:29.955277358Z"
                        Version:
                            Index: 18
                NodeID: 60gvrl6tm78dmak4yl7srz94v
                ServiceID: 9mnpnzenvg8p8tdbtq4wvbkcz
                Slot: 1
                Spec:
                    ContainerSpec:
                        Image: redis
                    Placement: {}
                    Resources:
                        Limits: {}
                        Reservations: {}
                    RestartPolicy:
                        Condition: any
                        MaxAttempts: 0
                Status:
                    ContainerStatus:
                        ContainerID: e5d62702a1b48d01c3e02ca1e0212a250801fa8d67caca0b6f35919ebc12f035
                        PID: 677
                    Message: started
                    State: running
                    Timestamp: "2016-06-07T21:07:31.290032978Z"
                UpdatedAt: "2016-06-07T21:07:31.376370513Z"
                Version:
                    Index: 71
            properties:
                AssignedGenericResources:
                    $ref: '#/components/schemas/GenericResources'
                CreatedAt:
                    format: dateTime
                    type: string
                DesiredState:
                    $ref: '#/components/schemas/TaskState'
                ID:
                    description: The ID of the task.
                    type: string
                JobIteration:
                    $ref: '#/components/schemas/ObjectVersion'
                    description: |
                        If the Service this Task belongs to is a job-mode service, contains
                        the JobIteration of the Service this Task was created for. Absent if
                        the Task was created for a Replicated or Global Service.
                Labels:
                    additionalProperties:
                        type: string
                    description: User-defined key/value metadata.
                    type: object
                Name:
                    description: Name of the task.
                    type: string
                NodeID:
                    description: The ID of the node that this task is on.
                    type: string
                ServiceID:
                    description: The ID of the service this task is part of.
                    type: string
                Slot:
                    type: integer
                Spec:
                    $ref: '#/components/schemas/TaskSpec'
                Status:
                    properties:
                        ContainerStatus:
                            properties:
                                ContainerID:
                                    type: string
                                ExitCode:
                                    type: integer
                                PID:
                                    type: integer
                            type: object
                        Err:
                            type: string
                        Message:
                            type: string
                        State:
                            $ref: '#/components/schemas/TaskState'
                        Timestamp:
                            format: dateTime
                            type: string
                    type: object
                UpdatedAt:
                    format: dateTime
                    type: string
                Version:
                    $ref: '#/components/schemas/ObjectVersion'
            type: object
        TaskSpec:
            description: User modifiable task configuration.
            properties:
                ContainerSpec:
                    $ref: '#/components/schemas/TaskSpecContainerSpec'
                ForceUpdate:
                    description: |
                        A counter that triggers an update even if no relevant parameters have
                        been changed.
                    type: integer
                LogDriver:
                    description: |
                        Specifies the log driver to use for tasks created from this spec. If
                        not present, the default one for the swarm will be used, finally
                        falling back to the engine default if not specified.
                    properties:
                        Name:
                            type: string
                        Options:
                            additionalProperties:
                                type: string
                            type: object
                    type: object
                NetworkAttachmentSpec:
                    description: |
                        Read-only spec type for non-swarm containers attached to swarm overlay
                        networks.

                        <p><br /></p>

                        > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are
                        > mutually exclusive. PluginSpec is only used when the Runtime field
                        > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime
                        > field is set to `attachment`.
                    properties:
                        ContainerID:
                            description: ID of the container represented by this task
                            type: string
                    type: object
                Networks:
                    description: Specifies which networks the service should attach to.
                    items:
                        $ref: '#/components/schemas/NetworkAttachmentConfig'
                    type: array
                Placement:
                    properties:
                        Constraints:
                            description: |
                                An array of constraint expressions to limit the set of nodes where
                                a task can be scheduled. Constraint expressions can either use a
                                _match_ (`==`) or _exclude_ (`!=`) rule. Multiple constraints find
                                nodes that satisfy every expression (AND match). Constraints can
                                match node or Docker Engine labels as follows:

                                node attribute       | matches                        | example
                                ---------------------|--------------------------------|-----------------------------------------------
                                `node.id`            | Node ID                        | `node.id==2ivku8v2gvtg4`
                                `node.hostname`      | Node hostname                  | `node.hostname!=node-2`
                                `node.role`          | Node role (`manager`/`worker`) | `node.role==manager`
                                `node.platform.os`   | Node operating system          | `node.platform.os==windows`
                                `node.platform.arch` | Node architecture              | `node.platform.arch==x86_64`
                                `node.labels`        | User-defined node labels       | `node.labels.security==high`
                                `engine.labels`      | Docker Engine's labels         | `engine.labels.operatingsystem==ubuntu-14.04`

                                `engine.labels` apply to Docker Engine labels like operating system,
                                drivers, etc. Swarm administrators add `node.labels` for operational
                                purposes by using the [`node update endpoint`](#operation/NodeUpdate).
                            example:
                                - node.hostname!=node3.corp.example.com
                                - node.role!=manager
                                - node.labels.type==production
                                - node.platform.os==linux
                                - node.platform.arch==x86_64
                            items:
                                type: string
                            type: array
                        MaxReplicas:
                            default: 0
                            description: |
                                Maximum number of replicas for per node (default value is 0, which
                                is unlimited)
                            format: int64
                            type: integer
                        Platforms:
                            description: |
                                Platforms stores all the platforms that the service's image can
                                run on. This field is used in the platform filter for scheduling.
                                If empty, then the platform filter is off, meaning there are no
                                scheduling restrictions.
                            items:
                                $ref: '#/components/schemas/Platform'
                            type: array
                        Preferences:
                            description: |
                                Preferences provide a way to make the scheduler aware of factors
                                such as topology. They are provided in order from highest to
                                lowest precedence.
                            example:
                                - Spread:
                                    SpreadDescriptor: node.labels.datacenter
                                - Spread:
                                    SpreadDescriptor: node.labels.rack
                            items:
                                properties:
                                    Spread:
                                        properties:
                                            SpreadDescriptor:
                                                description: |
                                                    label descriptor, such as `engine.labels.az`.
                                                type: string
                                        type: object
                                type: object
                            type: array
                    type: object
                PluginSpec:
                    description: |
                        Plugin spec for the service.  *(Experimental release only.)*

                        <p><br /></p>

                        > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are
                        > mutually exclusive. PluginSpec is only used when the Runtime field
                        > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime
                        > field is set to `attachment`.
                    properties:
                        Disabled:
                            description: Disable the plugin once scheduled.
                            type: boolean
                        Name:
                            description: The name or 'alias' to use for the plugin.
                            type: string
                        PluginPrivilege:
                            items:
                                $ref: '#/components/schemas/PluginPrivilege'
                            type: array
                        Remote:
                            description: The plugin image reference to use.
                            type: string
                    type: object
                Resources:
                    description: |
                        Resource requirements which apply to each individual container created
                        as part of the service.
                    properties:
                        Limits:
                            $ref: '#/components/schemas/Limit'
                            description: Define resources limits.
                        Reservations:
                            $ref: '#/components/schemas/ResourceObject'
                            description: Define resources reservation.
                    type: object
                RestartPolicy:
                    description: |
                        Specification for the restart policy which applies to containers
                        created as part of this service.
                    properties:
                        Condition:
                            description: Condition for restart.
                            enum:
                                - none
                                - on-failure
                                - any
                            type: string
                        Delay:
                            description: Delay between restart attempts.
                            format: int64
                            type: integer
                        MaxAttempts:
                            default: 0
                            description: |
                                Maximum attempts to restart a given container before giving up
                                (default value is 0, which is ignored).
                            format: int64
                            type: integer
                        Window:
                            default: 0
                            description: |
                                Windows is the time window used to evaluate the restart policy
                                (default value is 0, which is unbounded).
                            format: int64
                            type: integer
                    type: object
                Runtime:
                    description: |
                        Runtime is the type of runtime specified for the task executor.
                    type: string
            type: object
        TaskSpecContainerSpec:
            description: |
                Container spec for the service.

                <p><br /></p>

                > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are
                > mutually exclusive. PluginSpec is only used when the Runtime field
                > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime
                > field is set to `attachment`.
            properties:
                Args:
                    description: Arguments to the command.
                    items:
                        type: string
                    type: array
                CapabilityAdd:
                    description: |
                        A list of kernel capabilities to add to the default set
                        for the container.
                    example:
                        - CAP_NET_RAW
                        - CAP_SYS_ADMIN
                        - CAP_SYS_CHROOT
                        - CAP_SYSLOG
                    items:
                        type: string
                    type: array
                CapabilityDrop:
                    description: |
                        A list of kernel capabilities to drop from the default set
                        for the container.
                    example:
                        - CAP_NET_RAW
                    items:
                        type: string
                    type: array
                Command:
                    description: The command to be run in the image.
                    items:
                        type: string
                    type: array
                Configs:
                    description: |
                        Configs contains references to zero or more configs that will be
                        exposed to the service.
                    items:
                        $ref: '#/components/schemas/TaskSpecContainerSpecConfig'
                    type: array
                DNSConfig:
                    description: |
                        Specification for DNS related configurations in resolver configuration
                        file (`resolv.conf`).
                    properties:
                        Nameservers:
                            description: The IP addresses of the name servers.
                            items:
                                type: string
                            type: array
                        Options:
                            description: |
                                A list of internal resolver variables to be modified (e.g.,
                                `debug`, `ndots:3`, etc.).
                            items:
                                type: string
                            type: array
                        Search:
                            description: A search list for host-name lookup.
                            items:
                                type: string
                            type: array
                    type: object
                Dir:
                    description: The working directory for commands to run in.
                    type: string
                Env:
                    description: |
                        A list of environment variables in the form `VAR=value`.
                    items:
                        type: string
                    type: array
                Groups:
                    description: |
                        A list of additional groups that the container process will run as.
                    items:
                        type: string
                    type: array
                HealthCheck:
                    $ref: '#/components/schemas/HealthConfig'
                Hostname:
                    description: |
                        The hostname to use for the container, as a valid
                        [RFC 1123](https://tools.ietf.org/html/rfc1123) hostname.
                    type: string
                Hosts:
                    description: |
                        A list of hostname/IP mappings to add to the container's `hosts`
                        file. The format of extra hosts is specified in the
                        [hosts(5)](http://man7.org/linux/man-pages/man5/hosts.5.html)
                        man page:

                            IP_address canonical_hostname [aliases...]
                    items:
                        type: string
                    type: array
                Image:
                    description: The image name to use for the container
                    type: string
                Init:
                    description: |
                        Run an init inside the container that forwards signals and reaps
                        processes. This field is omitted if empty, and the default (as
                        configured on the daemon) is used.
                    type: boolean
                    x-nullable: true
                Isolation:
                    description: |
                        Isolation technology of the containers running the service.
                        (Windows only)
                    enum:
                        - default
                        - process
                        - hyperv
                    type: string
                Labels:
                    additionalProperties:
                        type: string
                    description: User-defined key/value data.
                    type: object
                Mounts:
                    description: |
                        Specification for mounts to be added to containers created as part
                        of the service.
                    items:
                        $ref: '#/components/schemas/Mount'
                    type: array
                OpenStdin:
                    description: Open `stdin`
                    type: boolean
                Privileges:
                    description: Security options for the container
                    properties:
                        CredentialSpec:
                            description: CredentialSpec for managed service account (Windows only)
                            properties:
                                Config:
                                    description: |
                                        Load credential spec from a Swarm Config with the given ID.
                                        The specified config must also be present in the Configs
                                        field with the Runtime property set.

                                        <p><br /></p>


                                        > **Note**: `CredentialSpec.File`, `CredentialSpec.Registry`,
                                        > and `CredentialSpec.Config` are mutually exclusive.
                                    example: 0bt9dmxjvjiqermk6xrop3ekq
                                    type: string
                                File:
                                    description: |
                                        Load credential spec from this file. The file is read by
                                        the daemon, and must be present in the `CredentialSpecs`
                                        subdirectory in the docker data directory, which defaults
                                        to `C:\ProgramData\Docker\` on Windows.

                                        For example, specifying `spec.json` loads
                                        `C:\ProgramData\Docker\CredentialSpecs\spec.json`.

                                        <p><br /></p>

                                        > **Note**: `CredentialSpec.File`, `CredentialSpec.Registry`,
                                        > and `CredentialSpec.Config` are mutually exclusive.
                                    example: spec.json
                                    type: string
                                Registry:
                                    description: |
                                        Load credential spec from this value in the Windows
                                        registry. The specified registry value must be located in:

                                        `HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Virtualization\Containers\CredentialSpecs`

                                        <p><br /></p>


                                        > **Note**: `CredentialSpec.File`, `CredentialSpec.Registry`,
                                        > and `CredentialSpec.Config` are mutually exclusive.
                                    type: string
                            type: object
                        SELinuxContext:
                            description: SELinux labels of the container
                            properties:
                                Disable:
                                    description: Disable SELinux
                                    type: boolean
                                Level:
                                    description: SELinux level label
                                    type: string
                                Role:
                                    description: SELinux role label
                                    type: string
                                Type:
                                    description: SELinux type label
                                    type: string
                                User:
                                    description: SELinux user label
                                    type: string
                            type: object
                    type: object
                ReadOnly:
                    description: Mount the container's root filesystem as read only.
                    type: boolean
                Secrets:
                    description: |
                        Secrets contains references to zero or more secrets that will be
                        exposed to the service.
                    items:
                        $ref: '#/components/schemas/TaskSpecContainerSpecSecret'
                    type: array
                StopGracePeriod:
                    description: |
                        Amount of time to wait for the container to terminate before
                        forcefully killing it.
                    format: int64
                    type: integer
                StopSignal:
                    description: Signal to stop the container.
                    type: string
                Sysctls:
                    additionalProperties:
                        type: string
                    description: |
                        Set kernel namedspaced parameters (sysctls) in the container.
                        The Sysctls option on services accepts the same sysctls as the
                        are supported on containers. Note that while the same sysctls are
                        supported, no guarantees or checks are made about their
                        suitability for a clustered environment, and it's up to the user
                        to determine whether a given sysctl will work properly in a
                        Service.
                    type: object
                TTY:
                    description: Whether a pseudo-TTY should be allocated.
                    type: boolean
                Ulimits:
                    description: |
                        A list of resource limits to set in the container. For example: `{"Name": "nofile", "Soft": 1024, "Hard": 2048}`"
                    items:
                        properties:
                            Hard:
                                description: Hard limit
                                type: integer
                            Name:
                                description: Name of ulimit
                                type: string
                            Soft:
                                description: Soft limit
                                type: integer
                        type: object
                    type: array
                User:
                    description: The user inside the container.
                    type: string
            type: object
        TaskSpecContainerSpecConfig:
            properties:
                ConfigID:
                    description: |
                        ConfigID represents the ID of the specific config that we're
                        referencing.
                    type: string
                ConfigName:
                    description: |
                        ConfigName is the name of the config that this references,
                        but this is just provided for lookup/display purposes. The
                        config in the reference will be identified by its ID.
                    type: string
                File:
                    description: |
                        File represents a specific target that is backed by a file.

                        <p><br /><p>

                        > **Note**: `Configs.File` and `Configs.Runtime` are mutually exclusive
                    properties:
                        GID:
                            description: GID represents the file GID.
                            type: string
                        Mode:
                            description: Mode represents the FileMode of the file.
                            format: uint32
                            type: integer
                        Name:
                            description: |
                                Name represents the final filename in the filesystem.
                            type: string
                        UID:
                            description: UID represents the file UID.
                            type: string
                    type: object
                Runtime:
                    description: |
                        Runtime represents a target that is not mounted into the
                        container but is used by the task

                        <p><br /><p>

                        > **Note**: `Configs.File` and `Configs.Runtime` are mutually
                        > exclusive
                    type: object
            type: object
        TaskSpecContainerSpecSecret:
            properties:
                File:
                    description: |
                        File represents a specific target that is backed by a file.
                    properties:
                        GID:
                            description: GID represents the file GID.
                            type: string
                        Mode:
                            description: Mode represents the FileMode of the file.
                            format: uint32
                            type: integer
                        Name:
                            description: |
                                Name represents the final filename in the filesystem.
                            type: string
                        UID:
                            description: UID represents the file UID.
                            type: string
                    type: object
                SecretID:
                    description: |
                        SecretID represents the ID of the specific secret that we're
                        referencing.
                    type: string
                SecretName:
                    description: |
                        SecretName is the name of the secret that this references,
                        but this is just provided for lookup/display purposes. The
                        secret in the reference will be identified by its ID.
                    type: string
            type: object
        TaskState:
            enum:
                - new
                - allocated
                - pending
                - assigned
                - accepted
                - preparing
                - ready
                - starting
                - running
                - complete
                - shutdown
                - failed
                - rejected
                - remove
                - orphaned
            type: string
        ThrottleDevice:
            properties:
                Path:
                    description: Device path
                    type: string
                Rate:
                    description: Rate
                    format: int64
                    minimum: 0
                    type: integer
            type: object
        Volume:
            properties:
                CreatedAt:
                    description: Date/Time the volume was created.
                    example: "2016-06-07T20:31:11.853781916Z"
                    format: dateTime
                    type: string
                Driver:
                    description: Name of the volume driver used by the volume.
                    example: custom
                    type: string
                    x-nullable: false
                Labels:
                    additionalProperties:
                        type: string
                    description: User-defined key/value metadata.
                    example:
                        com.example.some-label: some-value
                        com.example.some-other-label: some-other-value
                    type: object
                    x-nullable: false
                Mountpoint:
                    description: Mount path of the volume on the host.
                    example: /var/lib/docker/volumes/tardis
                    type: string
                    x-nullable: false
                Name:
                    description: Name of the volume.
                    example: tardis
                    type: string
                    x-nullable: false
                Options:
                    additionalProperties:
                        type: string
                    description: |
                        The driver specific options used when creating the volume.
                    example:
                        device: tmpfs
                        o: size=100m,uid=1000
                        type: tmpfs
                    type: object
                Scope:
                    default: local
                    description: |
                        The level at which the volume exists. Either `global` for cluster-wide,
                        or `local` for machine level.
                    enum:
                        - local
                        - global
                    example: local
                    type: string
                    x-nullable: false
                Status:
                    additionalProperties:
                        type: object
                    description: |
                        Low-level details about the volume, provided by the volume driver.
                        Details are returned as a map with key/value pairs:
                        `{"key":"value","key2":"value2"}`.

                        The `Status` field is optional, and is omitted if the volume driver
                        does not support this feature.
                    example:
                        hello: world
                    type: object
                UsageData:
                    description: |
                        Usage details about the volume. This information is used by the
                        `GET /system/df` endpoint, and omitted in other endpoints.
                    properties:
                        RefCount:
                            default: -1
                            description: |
                                The number of containers referencing this volume. This field
                                is set to `-1` if the reference-count is not available.
                            type: integer
                            x-nullable: false
                        Size:
                            default: -1
                            description: |
                                Amount of disk space used by the volume (in bytes). This information
                                is only available for volumes created with the `"local"` volume
                                driver. For volumes created with other volume drivers, this field
                                is set to `-1` ("not available")
                            type: integer
                            x-nullable: false
                    required:
                        - Size
                        - RefCount
                    type: object
                    x-nullable: true
            required:
                - Name
                - Driver
                - Mountpoint
                - Labels
                - Scope
                - Options
            type: object
        VolumeCreateOptions:
            description: Volume configuration
            properties:
                Driver:
                    default: local
                    description: Name of the volume driver to use.
                    example: custom
                    type: string
                    x-nullable: false
                DriverOpts:
                    additionalProperties:
                        type: string
                    description: |
                        A mapping of driver options and values. These options are
                        passed directly to the driver and are driver specific.
                    example:
                        device: tmpfs
                        o: size=100m,uid=1000
                        type: tmpfs
                    type: object
                Labels:
                    additionalProperties:
                        type: string
                    description: User-defined key/value metadata.
                    example:
                        com.example.some-label: some-value
                        com.example.some-other-label: some-other-value
                    type: object
                Name:
                    description: |
                        The new volume's name. If not specified, Docker generates a name.
                    example: tardis
                    type: string
                    x-nullable: false
            title: VolumeConfig
            type: object
            x-go-name: VolumeCreateBody
        io.k8s.api.core.v1.ObjectReference:
            properties:
                apiVersion:
                    type: string
                fieldPath:
                    type: string
                kind:
                    type: string
                name:
                    type: string
                namespace:
                    type: string
                resourceVersion:
                    type: string
                uid:
                    type: string
            type: object
        io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup:
            description: APIGroup contains the name, the supported versions, and the preferred version of a group.
            properties:
                apiVersion:
                    description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                kind:
                    description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                name:
                    description: name is the name of the group.
                    type: string
                preferredVersion:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery'
                    description: preferredVersion is the version preferred by the API server, which probably is the storage version.
                serverAddressByClientCIDRs:
                    description: 'a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.'
                    items:
                        $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR'
                    type: array
                versions:
                    description: versions are the versions supported in this group.
                    items:
                        $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery'
                    type: array
            required:
                - name
                - versions
            type: object
            x-kubernetes-group-version-kind:
                - group: ""
                  kind: APIGroup
                  version: v1
        io.k8s.apimachinery.pkg.apis.meta.v1.APIGroupList:
            description: APIGroupList is a list of APIGroup, to allow clients to discover the API at /apis.
            properties:
                apiVersion:
                    description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                groups:
                    description: groups is a list of APIGroup.
                    items:
                        $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup'
                    type: array
                kind:
                    description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
            required:
                - groups
            type: object
            x-kubernetes-group-version-kind:
                - group: ""
                  kind: APIGroupList
                  version: v1
        io.k8s.apimachinery.pkg.apis.meta.v1.APIResource:
            description: APIResource specifies the name of a resource and whether it is namespaced.
            properties:
                categories:
                    description: categories is a list of the grouped resources this resource belongs to (e.g. 'all')
                    items:
                        type: string
                    type: array
                group:
                    description: 'group is the preferred group of the resource.  Empty implies the group of the containing resource list. For subresources, this may have a different value, for example: Scale".'
                    type: string
                kind:
                    description: kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')
                    type: string
                name:
                    description: name is the plural name of the resource.
                    type: string
                namespaced:
                    description: namespaced indicates if a resource is namespaced or not.
                    type: boolean
                shortNames:
                    description: shortNames is a list of suggested short names of the resource.
                    items:
                        type: string
                    type: array
                singularName:
                    description: singularName is the singular name of the resource.  This allows clients to handle plural and singular opaquely. The singularName is more correct for reporting status on a single item and both singular and plural are allowed from the kubectl CLI interface.
                    type: string
                storageVersionHash:
                    description: The hash value of the storage version, the version this resource is converted to when written to the data store. Value must be treated as opaque by clients. Only equality comparison on the value is valid. This is an alpha feature and may change or be removed in the future. The field is populated by the apiserver only if the StorageVersionHash feature gate is enabled. This field will remain optional even if it graduates.
                    type: string
                verbs:
                    description: verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch, delete, deletecollection, and proxy)
                    items:
                        type: string
                    type: array
                version:
                    description: 'version is the preferred version of the resource.  Empty implies the version of the containing resource list For subresources, this may have a different value, for example: v1 (while inside a v1beta1 version of the core resource''s group)".'
                    type: string
            required:
                - name
                - singularName
                - namespaced
                - kind
                - verbs
            type: object
        io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList:
            description: APIResourceList is a list of APIResource, it is used to expose the name of the resources supported in a specific group and version, and if the resource is namespaced.
            properties:
                apiVersion:
                    description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                groupVersion:
                    description: groupVersion is the group and version this APIResourceList is for.
                    type: string
                kind:
                    description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                resources:
                    description: resources contains the name of the resources and if they are namespaced.
                    items:
                        $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIResource'
                    type: array
            required:
                - groupVersion
                - resources
            type: object
            x-kubernetes-group-version-kind:
                - group: ""
                  kind: APIResourceList
                  version: v1
        io.k8s.apimachinery.pkg.apis.meta.v1.APIVersions:
            description: APIVersions lists the versions that are available, to allow clients to discover the API at /api, which is the root path of the legacy v1 API.
            properties:
                apiVersion:
                    description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                kind:
                    description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                serverAddressByClientCIDRs:
                    description: 'a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.'
                    items:
                        $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR'
                    type: array
                versions:
                    description: versions are the api versions that are available.
                    items:
                        type: string
                    type: array
            required:
                - versions
                - serverAddressByClientCIDRs
            type: object
            x-kubernetes-group-version-kind:
                - group: ""
                  kind: APIVersions
                  version: v1
        io.k8s.apimachinery.pkg.apis.meta.v1.Condition:
            description: Condition contains details for one aspect of the current state of this API Resource.
            properties:
                lastTransitionTime:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
                    description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                message:
                    description: message is a human readable message indicating details about the transition. This may be an empty string.
                    type: string
                observedGeneration:
                    description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                    format: int64
                    type: integer
                reason:
                    description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                    type: string
                status:
                    description: status of the condition, one of True, False, Unknown.
                    type: string
                type:
                    description: type of condition in CamelCase or in foo.example.com/CamelCase.
                    type: string
            required:
                - type
                - status
                - lastTransitionTime
                - reason
                - message
            type: object
        io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions:
            description: DeleteOptions may be provided when deleting an API object.
            properties:
                apiVersion:
                    description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                dryRun:
                    description: 'When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed'
                    items:
                        type: string
                    type: array
                gracePeriodSeconds:
                    description: The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
                    format: int64
                    type: integer
                kind:
                    description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                orphanDependents:
                    description: 'Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object''s finalizers list. Either this field or PropagationPolicy may be set, but not both.'
                    type: boolean
                preconditions:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions'
                    description: Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
                propagationPolicy:
                    description: 'Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: ''Orphan'' - orphan the dependents; ''Background'' - allow the garbage collector to delete the dependents in the background; ''Foreground'' - a cascading policy that deletes all dependents in the foreground.'
                    type: string
            type: object
            x-kubernetes-group-version-kind:
                - group: ""
                  kind: DeleteOptions
                  version: v1
                - group: admission.k8s.io
                  kind: DeleteOptions
                  version: v1
                - group: admission.k8s.io
                  kind: DeleteOptions
                  version: v1beta1
                - group: admissionregistration.k8s.io
                  kind: DeleteOptions
                  version: v1
                - group: admissionregistration.k8s.io
                  kind: DeleteOptions
                  version: v1beta1
                - group: apiextensions.k8s.io
                  kind: DeleteOptions
                  version: v1
                - group: apiextensions.k8s.io
                  kind: DeleteOptions
                  version: v1beta1
                - group: apiregistration.k8s.io
                  kind: DeleteOptions
                  version: v1
                - group: apiregistration.k8s.io
                  kind: DeleteOptions
                  version: v1beta1
                - group: apps
                  kind: DeleteOptions
                  version: v1
                - group: apps
                  kind: DeleteOptions
                  version: v1beta1
                - group: apps
                  kind: DeleteOptions
                  version: v1beta2
                - group: authentication.k8s.io
                  kind: DeleteOptions
                  version: v1
                - group: authentication.k8s.io
                  kind: DeleteOptions
                  version: v1beta1
                - group: authorization.k8s.io
                  kind: DeleteOptions
                  version: v1
                - group: authorization.k8s.io
                  kind: DeleteOptions
                  version: v1beta1
                - group: autoscaling
                  kind: DeleteOptions
                  version: v1
                - group: autoscaling
                  kind: DeleteOptions
                  version: v2
                - group: autoscaling
                  kind: DeleteOptions
                  version: v2beta1
                - group: autoscaling
                  kind: DeleteOptions
                  version: v2beta2
                - group: batch
                  kind: DeleteOptions
                  version: v1
                - group: batch
                  kind: DeleteOptions
                  version: v1beta1
                - group: certificates.k8s.io
                  kind: DeleteOptions
                  version: v1
                - group: certificates.k8s.io
                  kind: DeleteOptions
                  version: v1beta1
                - group: coordination.k8s.io
                  kind: DeleteOptions
                  version: v1
                - group: coordination.k8s.io
                  kind: DeleteOptions
                  version: v1beta1
                - group: discovery.k8s.io
                  kind: DeleteOptions
                  version: v1
                - group: discovery.k8s.io
                  kind: DeleteOptions
                  version: v1beta1
                - group: events.k8s.io
                  kind: DeleteOptions
                  version: v1
                - group: events.k8s.io
                  kind: DeleteOptions
                  version: v1beta1
                - group: extensions
                  kind: DeleteOptions
                  version: v1beta1
                - group: flowcontrol.apiserver.k8s.io
                  kind: DeleteOptions
                  version: v1alpha1
                - group: flowcontrol.apiserver.k8s.io
                  kind: DeleteOptions
                  version: v1beta1
                - group: flowcontrol.apiserver.k8s.io
                  kind: DeleteOptions
                  version: v1beta2
                - group: imagepolicy.k8s.io
                  kind: DeleteOptions
                  version: v1alpha1
                - group: internal.apiserver.k8s.io
                  kind: DeleteOptions
                  version: v1alpha1
                - group: networking.k8s.io
                  kind: DeleteOptions
                  version: v1
                - group: networking.k8s.io
                  kind: DeleteOptions
                  version: v1beta1
                - group: node.k8s.io
                  kind: DeleteOptions
                  version: v1
                - group: node.k8s.io
                  kind: DeleteOptions
                  version: v1alpha1
                - group: node.k8s.io
                  kind: DeleteOptions
                  version: v1beta1
                - group: policy
                  kind: DeleteOptions
                  version: v1
                - group: policy
                  kind: DeleteOptions
                  version: v1beta1
                - group: rbac.authorization.k8s.io
                  kind: DeleteOptions
                  version: v1
                - group: rbac.authorization.k8s.io
                  kind: DeleteOptions
                  version: v1alpha1
                - group: rbac.authorization.k8s.io
                  kind: DeleteOptions
                  version: v1beta1
                - group: scheduling.k8s.io
                  kind: DeleteOptions
                  version: v1
                - group: scheduling.k8s.io
                  kind: DeleteOptions
                  version: v1alpha1
                - group: scheduling.k8s.io
                  kind: DeleteOptions
                  version: v1beta1
                - group: storage.k8s.io
                  kind: DeleteOptions
                  version: v1
                - group: storage.k8s.io
                  kind: DeleteOptions
                  version: v1alpha1
                - group: storage.k8s.io
                  kind: DeleteOptions
                  version: v1beta1
        io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1:
            description: |-
                FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.

                Each key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.

                The exact format is defined in sigs.k8s.io/structured-merge-diff
            type: object
        io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery:
            description: GroupVersion contains the "group/version" and "version" string of a version. It is made a struct to keep extensibility.
            properties:
                groupVersion:
                    description: groupVersion specifies the API group and version in the form "group/version"
                    type: string
                version:
                    description: version specifies the version in the form of "version". This is to save the clients the trouble of splitting the GroupVersion.
                    type: string
            required:
                - groupVersion
                - version
            type: object
        io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector:
            description: A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
            properties:
                matchExpressions:
                    description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                    items:
                        $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement'
                    type: array
                matchLabels:
                    additionalProperties:
                        type: string
                    description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                    type: object
            type: object
            x-kubernetes-map-type: atomic
        io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement:
            description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
            properties:
                key:
                    description: key is the label key that the selector applies to.
                    type: string
                    x-kubernetes-patch-merge-key: key
                    x-kubernetes-patch-strategy: merge
                operator:
                    description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                    type: string
                values:
                    description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                    items:
                        type: string
                    type: array
            required:
                - key
                - operator
            type: object
        io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta:
            description: ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
            properties:
                continue:
                    description: continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
                    type: string
                remainingItemCount:
                    description: remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
                    format: int64
                    type: integer
                resourceVersion:
                    description: 'String that identifies the server''s internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                selfLink:
                    description: 'Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.'
                    type: string
            type: object
        io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry:
            description: ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
            properties:
                apiVersion:
                    description: APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
                    type: string
                fieldsType:
                    description: 'FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"'
                    type: string
                fieldsV1:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1'
                    description: FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
                manager:
                    description: Manager is an identifier of the workflow managing these fields.
                    type: string
                operation:
                    description: Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
                    type: string
                subresource:
                    description: Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
                    type: string
                time:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
                    description: Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.
            type: object
        io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime:
            description: MicroTime is version of Time with microsecond level precision.
            format: date-time
            type: string
        io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta:
            description: ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
            properties:
                annotations:
                    additionalProperties:
                        type: string
                    description: 'Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations'
                    type: object
                clusterName:
                    description: |-
                        Deprecated: ClusterName is a legacy field that was always cleared by the system and never used; it will be removed completely in 1.25.

                        The name in the go struct is changed to help clients detect accidental use.
                    type: string
                creationTimestamp:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
                    description: |-
                        CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.

                        Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
                deletionGracePeriodSeconds:
                    description: Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
                    format: int64
                    type: integer
                deletionTimestamp:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
                    description: |-
                        DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.

                        Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
                finalizers:
                    description: Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
                    items:
                        type: string
                    type: array
                    x-kubernetes-patch-strategy: merge
                generateName:
                    description: |-
                        GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.

                        If this field is specified and the generated name exists, the server will return a 409.

                        Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
                    type: string
                generation:
                    description: A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
                    format: int64
                    type: integer
                labels:
                    additionalProperties:
                        type: string
                    description: 'Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels'
                    type: object
                managedFields:
                    description: ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
                    items:
                        $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry'
                    type: array
                name:
                    description: 'Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                    type: string
                namespace:
                    description: |-
                        Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.

                        Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
                    type: string
                ownerReferences:
                    description: List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
                    items:
                        $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference'
                    type: array
                    x-kubernetes-patch-merge-key: uid
                    x-kubernetes-patch-strategy: merge
                resourceVersion:
                    description: |-
                        An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.

                        Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
                    type: string
                selfLink:
                    description: 'Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.'
                    type: string
                uid:
                    description: |-
                        UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.

                        Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
                    type: string
            type: object
        io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference:
            description: OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
            properties:
                apiVersion:
                    description: API version of the referent.
                    type: string
                blockOwnerDeletion:
                    description: If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
                    type: boolean
                controller:
                    description: If true, this reference points to the managing controller.
                    type: boolean
                kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                name:
                    description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                    type: string
                uid:
                    description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
                    type: string
            required:
                - apiVersion
                - kind
                - name
                - uid
            type: object
            x-kubernetes-map-type: atomic
        io.k8s.apimachinery.pkg.apis.meta.v1.Patch:
            description: Patch is provided to give a concrete name and type to the Kubernetes PATCH request body.
            type: object
        io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions:
            description: Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.
            properties:
                resourceVersion:
                    description: Specifies the target ResourceVersion
                    type: string
                uid:
                    description: Specifies the target UID.
                    type: string
            type: object
        io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR:
            description: ServerAddressByClientCIDR helps the client to determine the server address that they should use, depending on the clientCIDR that they match.
            properties:
                clientCIDR:
                    description: The CIDR with which clients can match their IP to figure out the server address that they should use.
                    type: string
                serverAddress:
                    description: Address of this server, suitable for a client that matches the above CIDR. This can be a hostname, hostname:port, IP or IP:port.
                    type: string
            required:
                - clientCIDR
                - serverAddress
            type: object
        io.k8s.apimachinery.pkg.apis.meta.v1.Status:
            description: Status is a return value for calls that don't return other objects.
            properties:
                apiVersion:
                    description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                code:
                    description: Suggested HTTP return code for this status, 0 if not set.
                    format: int32
                    type: integer
                details:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails'
                    description: Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.
                kind:
                    description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                message:
                    description: A human-readable description of the status of this operation.
                    type: string
                metadata:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
                    description: 'Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                reason:
                    description: A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.
                    type: string
                status:
                    description: 'Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
                    type: string
            type: object
            x-kubernetes-group-version-kind:
                - group: ""
                  kind: Status
                  version: v1
        io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause:
            description: StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.
            properties:
                field:
                    description: |-
                        The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.

                        Examples:
                          "name" - the field "name" on the current resource
                          "items[0].name" - the field "name" on the first array entry in "items"
                    type: string
                message:
                    description: A human-readable description of the cause of the error.  This field may be presented as-is to a reader.
                    type: string
                reason:
                    description: A machine-readable description of the cause of the error. If this value is empty there is no information available.
                    type: string
            type: object
        io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails:
            description: StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.
            properties:
                causes:
                    description: The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.
                    items:
                        $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause'
                    type: array
                group:
                    description: The group attribute of the resource associated with the status StatusReason.
                    type: string
                kind:
                    description: 'The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                name:
                    description: The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).
                    type: string
                retryAfterSeconds:
                    description: If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.
                    format: int32
                    type: integer
                uid:
                    description: 'UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
                    type: string
            type: object
        io.k8s.apimachinery.pkg.apis.meta.v1.Time:
            description: Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
            format: date-time
            type: string
        io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent:
            description: Event represents a single event to a watched resource.
            properties:
                object:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.runtime.RawExtension'
                    description: |-
                        Object is:
                         * If Type is Added or Modified: the new state of the object.
                         * If Type is Deleted: the state of the object immediately before deletion.
                         * If Type is Error: *Status is recommended; other types may make sense
                           depending on context.
                type:
                    type: string
            required:
                - type
                - object
            type: object
            x-kubernetes-group-version-kind:
                - group: ""
                  kind: WatchEvent
                  version: v1
                - group: admission.k8s.io
                  kind: WatchEvent
                  version: v1
                - group: admission.k8s.io
                  kind: WatchEvent
                  version: v1beta1
                - group: admissionregistration.k8s.io
                  kind: WatchEvent
                  version: v1
                - group: admissionregistration.k8s.io
                  kind: WatchEvent
                  version: v1beta1
                - group: apiextensions.k8s.io
                  kind: WatchEvent
                  version: v1
                - group: apiextensions.k8s.io
                  kind: WatchEvent
                  version: v1beta1
                - group: apiregistration.k8s.io
                  kind: WatchEvent
                  version: v1
                - group: apiregistration.k8s.io
                  kind: WatchEvent
                  version: v1beta1
                - group: apps
                  kind: WatchEvent
                  version: v1
                - group: apps
                  kind: WatchEvent
                  version: v1beta1
                - group: apps
                  kind: WatchEvent
                  version: v1beta2
                - group: authentication.k8s.io
                  kind: WatchEvent
                  version: v1
                - group: authentication.k8s.io
                  kind: WatchEvent
                  version: v1beta1
                - group: authorization.k8s.io
                  kind: WatchEvent
                  version: v1
                - group: authorization.k8s.io
                  kind: WatchEvent
                  version: v1beta1
                - group: autoscaling
                  kind: WatchEvent
                  version: v1
                - group: autoscaling
                  kind: WatchEvent
                  version: v2
                - group: autoscaling
                  kind: WatchEvent
                  version: v2beta1
                - group: autoscaling
                  kind: WatchEvent
                  version: v2beta2
                - group: batch
                  kind: WatchEvent
                  version: v1
                - group: batch
                  kind: WatchEvent
                  version: v1beta1
                - group: certificates.k8s.io
                  kind: WatchEvent
                  version: v1
                - group: certificates.k8s.io
                  kind: WatchEvent
                  version: v1beta1
                - group: coordination.k8s.io
                  kind: WatchEvent
                  version: v1
                - group: coordination.k8s.io
                  kind: WatchEvent
                  version: v1beta1
                - group: discovery.k8s.io
                  kind: WatchEvent
                  version: v1
                - group: discovery.k8s.io
                  kind: WatchEvent
                  version: v1beta1
                - group: events.k8s.io
                  kind: WatchEvent
                  version: v1
                - group: events.k8s.io
                  kind: WatchEvent
                  version: v1beta1
                - group: extensions
                  kind: WatchEvent
                  version: v1beta1
                - group: flowcontrol.apiserver.k8s.io
                  kind: WatchEvent
                  version: v1alpha1
                - group: flowcontrol.apiserver.k8s.io
                  kind: WatchEvent
                  version: v1beta1
                - group: flowcontrol.apiserver.k8s.io
                  kind: WatchEvent
                  version: v1beta2
                - group: imagepolicy.k8s.io
                  kind: WatchEvent
                  version: v1alpha1
                - group: internal.apiserver.k8s.io
                  kind: WatchEvent
                  version: v1alpha1
                - group: networking.k8s.io
                  kind: WatchEvent
                  version: v1
                - group: networking.k8s.io
                  kind: WatchEvent
                  version: v1beta1
                - group: node.k8s.io
                  kind: WatchEvent
                  version: v1
                - group: node.k8s.io
                  kind: WatchEvent
                  version: v1alpha1
                - group: node.k8s.io
                  kind: WatchEvent
                  version: v1beta1
                - group: policy
                  kind: WatchEvent
                  version: v1
                - group: policy
                  kind: WatchEvent
                  version: v1beta1
                - group: rbac.authorization.k8s.io
                  kind: WatchEvent
                  version: v1
                - group: rbac.authorization.k8s.io
                  kind: WatchEvent
                  version: v1alpha1
                - group: rbac.authorization.k8s.io
                  kind: WatchEvent
                  version: v1beta1
                - group: scheduling.k8s.io
                  kind: WatchEvent
                  version: v1
                - group: scheduling.k8s.io
                  kind: WatchEvent
                  version: v1alpha1
                - group: scheduling.k8s.io
                  kind: WatchEvent
                  version: v1beta1
                - group: storage.k8s.io
                  kind: WatchEvent
                  version: v1
                - group: storage.k8s.io
                  kind: WatchEvent
                  version: v1alpha1
                - group: storage.k8s.io
                  kind: WatchEvent
                  version: v1beta1
        io.k8s.apimachinery.pkg.runtime.RawExtension:
            description: |-
                RawExtension is used to hold extensions in external versions.

                To use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.

                // Internal package: type MyAPIObject struct {
                	runtime.TypeMeta `json:",inline"`
                	MyPlugin runtime.Object `json:"myPlugin"`
                } type PluginA struct {
                	AOption string `json:"aOption"`
                }

                // External package: type MyAPIObject struct {
                	runtime.TypeMeta `json:",inline"`
                	MyPlugin runtime.RawExtension `json:"myPlugin"`
                } type PluginA struct {
                	AOption string `json:"aOption"`
                }

                // On the wire, the JSON will look something like this: {
                	"kind":"MyAPIObject",
                	"apiVersion":"v1",
                	"myPlugin": {
                		"kind":"PluginA",
                		"aOption":"foo",
                	},
                }

                So what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)
            type: object
        io.k8s.apimachinery.pkg.util.intstr.IntOrString:
            description: IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
            format: int-or-string
            type: string
        io.k8s.apimachinery.pkg.version.Info:
            description: Info contains versioning information. how we'll want to distribute that information.
            properties:
                buildDate:
                    type: string
                compiler:
                    type: string
                gitCommit:
                    type: string
                gitTreeState:
                    type: string
                gitVersion:
                    type: string
                goVersion:
                    type: string
                major:
                    type: string
                minor:
                    type: string
                platform:
                    type: string
            required:
                - major
                - minor
                - gitVersion
                - gitCommit
                - gitTreeState
                - buildDate
                - goVersion
                - compiler
                - platform
            type: object
        k8s.CertificateSigningRequest:
            properties:
                apiVersion:
                    type: string
                automountCertificateSigningRequestToken:
                    type: boolean
                kind:
                    type: string
                metadata:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
                spec:
                    $ref: '#/components/schemas/k8s.CertificateSigningRequestSpec'
                status:
                    $ref: '#/components/schemas/k8s.CertificateSigningRequestStatus'
            required:
                - apiVersion
                - kind
                - metadata
                - spec
                - status
            type: object
            x-kubernetes-group-version-kind:
                - group: ""
                  kind: CertificateSigningRequest
                  version: v1
        k8s.CertificateSigningRequestCondition:
            properties:
                status:
                    description: True, False, Unknown
                    type: string
                type:
                    description: Approved, Denied, Failed
                    type: string
            required:
                - type
                - status
            type: object
        k8s.CertificateSigningRequestList:
            properties:
                apiVersion:
                    type: string
                items:
                    items:
                        $ref: '#/components/schemas/k8s.CertificateSigningRequest'
                    type: array
                kind:
                    type: string
                metadata:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
            required:
                - apiVersion
                - kind
                - metadata
                - items
            type: object
            x-kubernetes-group-version-kind:
                - group: ""
                  kind: CertificateSigningRequestList
                  version: v1
        k8s.CertificateSigningRequestSpec:
            properties:
                expirationSeconds:
                    type: integer
                request:
                    format: byte
                    type: string
                signerName:
                    type: string
                uid:
                    type: string
                usages:
                    items:
                        type: string
                    type: array
                username:
                    type: string
            required:
                - request
                - signerName
            type: object
        k8s.CertificateSigningRequestStatus:
            properties:
                certificate:
                    format: byte
                    type: string
                conditions:
                    items:
                        $ref: '#/components/schemas/k8s.CertificateSigningRequestCondition'
                    type: array
            type: object
        k8s.ConfigMap:
            properties:
                apiVersion:
                    type: string
                binaryData:
                    additionalProperties:
                        type: string
                    type: object
                data:
                    additionalProperties:
                        type: string
                    type: object
                kind:
                    type: string
                metadata:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
            required:
                - apiVersion
                - kind
                - metadata
            type: object
            x-kubernetes-group-version-kind:
                - group: ""
                  kind: ConfigMap
                  version: v1
        k8s.ConfigMapList:
            properties:
                apiVersion:
                    type: string
                items:
                    items:
                        $ref: '#/components/schemas/k8s.ConfigMap'
                    type: array
                kind:
                    type: string
                metadata:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
            required:
                - apiVersion
                - kind
                - metadata
                - items
            type: object
            x-kubernetes-group-version-kind:
                - group: ""
                  kind: ConfigMapList
                  version: v1
        k8s.Container:
            description: A single application container that you want to run within a pod.
            properties:
                args:
                    description: 'Arguments to the entrypoint. The container image''s CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container''s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell'
                    items:
                        type: string
                    type: array
                command:
                    description: 'Entrypoint array. Not executed within a shell. The container image''s ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container''s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell'
                    items:
                        type: string
                    type: array
                env:
                    description: List of environment variables to set in the container. Cannot be updated.
                    items:
                        $ref: '#/components/schemas/k8s.EnvVar'
                    type: array
                image:
                    description: 'Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.'
                    type: string
                imagePullPolicy:
                    description: |+
                        Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images

                    type: string
                name:
                    description: Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
                    type: string
                ports:
                    description: List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
                    items:
                        $ref: '#/components/schemas/k8s.ContainerPort'
                    type: array
                    x-kubernetes-list-map-keys:
                        - containerPort
                        - protocol
                    x-kubernetes-list-type: map
                resources:
                    $ref: '#/components/schemas/k8s.ResourceRequirements'
                stdin:
                    description: Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
                    type: boolean
                stdinOnce:
                    description: Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
                    type: boolean
                terminationMessagePath:
                    description: 'Optional: Path at which the file to which the container''s termination message will be written is mounted into the container''s filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.'
                    type: string
                terminationMessagePolicy:
                    description: |+
                        Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.

                    type: string
                tty:
                    description: Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
                    type: boolean
                volumeDevices:
                    description: volumeDevices is the list of block devices to be used by the container.
                    items:
                        $ref: '#/components/schemas/k8s.VolumeDevice'
                    type: array
                volumeMounts:
                    description: Pod volumes to mount into the container's filesystem. Cannot be updated.
                    items:
                        $ref: '#/components/schemas/k8s.VolumeMount'
                    type: array
                workingDir:
                    description: Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
                    type: string
            required:
                - name
            type: object
        k8s.ContainerImage:
            description: Describe a container image
            properties:
                names:
                    description: Names by which this image is known. e.g. ["k8s.gcr.io/hyperkube:v1.0.7", "dockerhub.io/google_containers/hyperkube:v1.0.7"]
                    items:
                        type: string
                    type: array
                sizeBytes:
                    description: The size of the image in bytes.
                    format: int64
                    type: integer
            type: object
        k8s.ContainerPort:
            description: ContainerPort represents a network port in a single container.
            properties:
                containerPort:
                    description: Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
                    format: int32
                    type: integer
                hostIP:
                    description: What host IP to bind the external port to.
                    type: string
                hostPort:
                    description: Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
                    format: int32
                    type: integer
                name:
                    description: If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
                    type: string
                protocol:
                    description: |+
                        Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".

                    type: string
            required:
                - containerPort
            type: object
        k8s.ContainerState:
            description: ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
            properties:
                running:
                    $ref: '#/components/schemas/k8s.ContainerStateRunning'
                    description: Details about a running container
                terminated:
                    $ref: '#/components/schemas/k8s.ContainerStateTerminated'
                    description: Details about a terminated container
                waiting:
                    $ref: '#/components/schemas/k8s.ContainerStateWaiting'
                    description: Details about a waiting container
            type: object
        k8s.ContainerStateRunning:
            description: ContainerStateRunning is a running state of a container.
            properties:
                startedAt:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
                    description: Time at which the container was last (re-)started
            type: object
        k8s.ContainerStateTerminated:
            description: ContainerStateTerminated is a terminated state of a container.
            properties:
                containerID:
                    description: Container's ID in the format '<type>://<container_id>'
                    type: string
                exitCode:
                    description: Exit status from the last termination of the container
                    format: int32
                    type: integer
                finishedAt:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
                    description: Time at which the container last terminated
                message:
                    description: Message regarding the last termination of the container
                    type: string
                reason:
                    description: (brief) reason from the last termination of the container
                    type: string
                signal:
                    description: Signal from the last termination of the container
                    format: int32
                    type: integer
                startedAt:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
                    description: Time at which previous execution of the container started
            required:
                - exitCode
            type: object
        k8s.ContainerStateWaiting:
            description: ContainerStateWaiting is a waiting state of a container.
            properties:
                message:
                    description: Message regarding why the container is not yet running.
                    type: string
                reason:
                    description: (brief) reason the container is not yet running.
                    type: string
            type: object
        k8s.ContainerStatus:
            description: ContainerStatus contains details for the current status of this container.
            properties:
                containerID:
                    description: Container's ID in the format '<type>://<container_id>'.
                    type: string
                image:
                    description: 'The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images.'
                    type: string
                imageID:
                    description: ImageID of the container's image.
                    type: string
                lastState:
                    $ref: '#/components/schemas/k8s.ContainerState'
                    description: Details about the container's last termination condition.
                name:
                    description: This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
                    type: string
                ready:
                    description: Specifies whether the container has passed its readiness probe.
                    type: boolean
                restartCount:
                    description: The number of times the container has been restarted.
                    format: int32
                    type: integer
                started:
                    description: Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
                    type: boolean
                state:
                    $ref: '#/components/schemas/k8s.ContainerState'
                    description: Details about the container's current condition.
            required:
                - name
                - ready
                - restartCount
                - image
                - imageID
            type: object
        k8s.Deployment:
            properties:
                apiVersion:
                    type: string
                kind:
                    type: string
                metadata:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
                spec:
                    $ref: '#/components/schemas/k8s.DeploymentSpec'
                status:
                    $ref: '#/components/schemas/k8s.DeploymentStatus'
            required:
                - apiVersion
                - kind
                - metadata
                - spec
                - status
            type: object
            x-kubernetes-group-version-kind:
                - group: apps/v1
                  kind: Deployment
                  version: v1
        k8s.DeploymentCondition:
            properties:
                lastTransitionTime:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
                lastUpdateTime:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
                message:
                    type: string
                reason:
                    type: string
                status:
                    type: string
                type:
                    type: string
            required:
                - type
                - status
            type: object
        k8s.DeploymentList:
            properties:
                apiVersion:
                    type: string
                items:
                    items:
                        $ref: '#/components/schemas/k8s.Deployment'
                    type: array
                kind:
                    type: string
                metadata:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
            required:
                - apiVersion
                - kind
                - metadata
                - items
            type: object
            x-kubernetes-group-version-kind:
                - group: apps/v1
                  kind: DeploymentList
                  version: v1
        k8s.DeploymentSpec:
            properties:
                minReadySeconds:
                    format: int32
                    type: integer
                paused:
                    type: boolean
                progressDeadlineSeconds:
                    format: int32
                    type: integer
                replicas:
                    type: integer
                revisionHistoryLimit:
                    format: int32
                    type: integer
                selector:
                    additionalProperties:
                        type: string
                    description: ignored for compatbility. the deployment controller selects the pods it creates
                    type: object
                strategy:
                    $ref: '#/components/schemas/k8s.DeploymentStrategy'
                template:
                    $ref: '#/components/schemas/k8s.Pod'
            required:
                - replicas
                - selector
                - strategy
                - minReadySeconds
            type: object
        k8s.DeploymentStatus:
            properties:
                availableReplicas:
                    type: integer
                collisionCount:
                    type: integer
                conditions:
                    items:
                        $ref: '#/components/schemas/k8s.DeploymentCondition'
                    type: array
                observedGeneration:
                    format: int64
                    type: integer
                readyReplicas:
                    format: int32
                    type: integer
                replicas:
                    format: int32
                    type: integer
                unavailableReplicas:
                    format: int32
                    type: integer
                updatedReplicas:
                    format: int32
                    type: integer
            required:
                - availableReplicas
                - collisionCount
                - conditions
                - observedGeneration
                - readyReplicas
                - replicas
                - unavailableReplicas
                - updatedReplicas
            type: object
        k8s.DeploymentStrategy:
            properties:
                rollingUpdate:
                    $ref: '#/components/schemas/k8s.RollingUpdateDeployment'
                type:
                    description: |+
                        Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.

                    type: string
            required:
                - type
            type: object
        k8s.EndpointAddress:
            properties:
                hostname:
                    type: string
                ip:
                    type: string
                nodeName:
                    type: string
                targetRef:
                    $ref: '#/components/schemas/io.k8s.api.core.v1.ObjectReference'
            required:
                - ip
            type: object
        k8s.EndpointPort:
            properties:
                appProtocol:
                    type: string
                name:
                    type: string
                port:
                    format: int32
                    type: integer
                protocol:
                    description: TCP|UDP
                    type: string
            required:
                - port
            type: object
        k8s.EndpointSubset:
            properties:
                addresses:
                    items:
                        $ref: '#/components/schemas/k8s.EndpointAddress'
                    type: array
                notReadyAddresses:
                    items:
                        $ref: '#/components/schemas/k8s.EndpointAddress'
                    type: array
                ports:
                    items:
                        $ref: '#/components/schemas/k8s.EndpointPort'
                    type: array
            type: object
        k8s.Endpoints:
            properties:
                apiVersion:
                    type: string
                kind:
                    type: string
                metadata:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
                subsets:
                    items:
                        $ref: '#/components/schemas/k8s.EndpointSubset'
                    type: array
            required:
                - spec
            type: object
            x-kubernetes-group-version-kind:
                - group: ""
                  kind: Endpoints
                  version: v1
        k8s.EndpointsList:
            properties:
                apiVersion:
                    type: string
                items:
                    items:
                        $ref: '#/components/schemas/k8s.Endpoints'
                    type: array
                kind:
                    type: string
                metadata:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
            required:
                - items
            type: object
            x-kubernetes-group-version-kind:
                - group: ""
                  kind: EndpointsList
                  version: v1
        k8s.EnvVar:
            description: EnvVar represents an environment variable present in a Container.
            properties:
                name:
                    description: Name of the environment variable. Must be a C_IDENTIFIER.
                    type: string
                value:
                    description: 'Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".'
                    type: string
            required:
                - name
            type: object
        k8s.Event:
            properties:
                action:
                    type: string
                apiVersion:
                    items:
                        $ref: '#/components/schemas/k8s.Event'
                    type: array
                eventTime:
                    format: date-time
                    type: string
                kind:
                    type: string
                metadata:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
                note:
                    type: string
                reason:
                    type: string
                regarding:
                    $ref: '#/components/schemas/io.k8s.api.core.v1.ObjectReference'
                related:
                    $ref: '#/components/schemas/io.k8s.api.core.v1.ObjectReference'
                reportingController:
                    type: string
                reportingInstance:
                    type: string
                type:
                    type: string
            type: object
        k8s.EventList:
            properties:
                apiVersion:
                    type: string
                items:
                    items:
                        $ref: '#/components/schemas/k8s.Event'
                    type: array
                kind:
                    type: string
                metadata:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
            required:
                - items
            type: object
            x-kubernetes-group-version-kind:
                - group: ""
                  kind: EventList
                  version: v1
        k8s.Ingress:
            properties:
                apiVersion:
                    type: string
                kind:
                    type: string
                metadata:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
                spec:
                    $ref: '#/components/schemas/k8s.IngressSpec'
                status:
                    $ref: '#/components/schemas/k8s.IngressStatus'
            required:
                - apiVersion
                - kind
                - metadata
                - spec
                - status
            type: object
            x-kubernetes-group-version-kind:
                - group: networking.k8s.io/v1
                  kind: Ingress
                  version: v1
        k8s.IngressClass:
            properties:
                apiVersion:
                    type: string
                kind:
                    type: string
                metadata:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
                spec:
                    $ref: '#/components/schemas/k8s.IngressClassSpec'
            required:
                - apiVersion
                - kind
                - metadata
                - spec
            type: object
            x-kubernetes-group-version-kind:
                - group: networking.k8s.io/v1
                  kind: Ingress
                  version: v1
        k8s.IngressClassList:
            properties:
                apiVersion:
                    type: string
                items:
                    items:
                        $ref: '#/components/schemas/k8s.IngressClass'
                    type: array
                kind:
                    type: string
                metadata:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
            required:
                - apiVersion
                - kind
                - metadata
                - items
            type: object
            x-kubernetes-group-version-kind:
                - group: networking.k8s.io/v1
                  kind: IngressClassList
                  version: v1
        k8s.IngressClassSpec:
            properties:
                controller:
                    type: string
            type: object
        k8s.IngressList:
            properties:
                apiVersion:
                    type: string
                items:
                    items:
                        $ref: '#/components/schemas/k8s.Ingress'
                    type: array
                kind:
                    type: string
                metadata:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
            required:
                - apiVersion
                - kind
                - metadata
                - items
            type: object
            x-kubernetes-group-version-kind:
                - group: networking.k8s.io/v1
                  kind: IngressList
                  version: v1
        k8s.IngressRule:
            properties:
                host:
                    type: string
                http:
                    $ref: '#/components/schemas/k8s.IngressRuleHttp'
            type: object
        k8s.IngressRuleHttp:
            properties:
                paths:
                    items:
                        $ref: '#/components/schemas/k8s.IngressRuleHttpPath'
                    type: array
            type: object
        k8s.IngressRuleHttpPath:
            properties:
                backend:
                    $ref: '#/components/schemas/k8s.IngressRuleHttpPathBackend'
                path:
                    type: string
                pathType:
                    type: string
            type: object
        k8s.IngressRuleHttpPathBackend:
            properties:
                service:
                    $ref: '#/components/schemas/k8s.IngressRuleHttpPathBackendService'
            type: object
        k8s.IngressRuleHttpPathBackendService:
            properties:
                name:
                    type: string
                port:
                    $ref: '#/components/schemas/k8s.IngressRuleHttpPathBackendServicePort'
            type: object
        k8s.IngressRuleHttpPathBackendServicePort:
            properties:
                number:
                    type: integer
            type: object
        k8s.IngressSpec:
            properties:
                defaultBackend:
                    $ref: '#/components/schemas/k8s.IngressRuleHttpPathBackend'
                ingressClassName:
                    type: string
                rules:
                    items:
                        $ref: '#/components/schemas/k8s.IngressRule'
                    type: array
                tls:
                    items:
                        $ref: '#/components/schemas/k8s.IngressTLS'
                    type: array
            type: object
        k8s.IngressStatus:
            properties:
                loadBalancer:
                    $ref: '#/components/schemas/k8s.LoadBalancerStatus'
            type: object
        k8s.IngressTLS:
            properties:
                hosts:
                    items:
                        type: string
                    type: array
            type: object
        k8s.LoadBalancerStatus:
            properties:
                ingress:
                    items:
                        $ref: '#/components/schemas/k8s.LoadBalancerStatusIngress'
                    type: array
            type: object
        k8s.LoadBalancerStatusIngress:
            properties:
                hostname:
                    type: string
                ip:
                    type: string
                ports:
                    items:
                        $ref: '#/components/schemas/k8s.LoadBalancerStatusIngressPort'
                    type: array
            type: object
        k8s.LoadBalancerStatusIngressPort:
            properties:
                error:
                    type: string
                port:
                    format: int32
                    type: integer
                protocol:
                    type: string
            type: object
        k8s.Namespace:
            description: Namespace
            properties:
                apiVersion:
                    type: string
                kind:
                    type: string
                metadata:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
                spec:
                    $ref: '#/components/schemas/k8s.NamespaceSpec'
                status:
                    $ref: '#/components/schemas/k8s.NamespaceStatus'
            required:
                - kind
                - metadata
                - apiVersion
                - spec
                - status
            type: object
            x-kubernetes-group-version-kind:
                - group: ""
                  kind: Namespace
                  version: v1
        k8s.NamespaceList:
            description: NamespaceList is a list of Namespaces.
            properties:
                apiVersion:
                    type: string
                items:
                    items:
                        $ref: '#/components/schemas/k8s.Namespace'
                    type: array
                kind:
                    type: string
                metadata:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
            required:
                - items
                - kind
                - metadata
                - apiVersion
            type: object
            x-kubernetes-group-version-kind:
                - group: ""
                  kind: NamespaceList
                  version: v1
        k8s.NamespaceSpec:
            properties:
                finalizers:
                    items:
                        type: string
                    type: array
            type: object
        k8s.NamespaceStatus:
            properties:
                phase:
                    type: string
            required:
                - phase
            type: object
        k8s.Node:
            description: Node is emulated to make helm work. Kraud does not have nodes.
            properties:
                apiVersion:
                    type: string
                kind:
                    type: string
                metadata:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
                spec:
                    $ref: '#/components/schemas/k8s.NodeSpec'
                status:
                    $ref: '#/components/schemas/k8s.NodeStatus'
            type: object
            x-kubernetes-group-version-kind:
                - group: ""
                  kind: Node
                  version: v1
        k8s.NodeAddress:
            properties:
                address:
                    type: string
                type:
                    type: string
            required:
                - address
                - type
            type: object
        k8s.NodeCondition:
            properties:
                lastHeartbeatTime:
                    format: date-time
                    type: string
                lastTransitionTime:
                    format: date-time
                    type: string
                message:
                    type: string
                reason:
                    type: string
                status:
                    type: string
                type:
                    type: string
            required:
                - type
                - status
                - message
                - reason
                - lastHeartbeatTime
                - lastTransitionTime
            type: object
        k8s.NodeList:
            description: NodeList is a list of Nodes.
            properties:
                apiVersion:
                    type: string
                items:
                    items:
                        $ref: '#/components/schemas/k8s.Node'
                    type: array
                kind:
                    type: string
                metadata:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
            required:
                - items
                - apiVersion
                - metadata
                - kind
            type: object
            x-kubernetes-group-version-kind:
                - group: ""
                  kind: NodeList
                  version: v1
        k8s.NodeResourceList:
            properties:
                cpu:
                    type: string
                ephemeral-storage:
                    type: string
                gp-storage:
                    type: string
                hugepages-1Gi:
                    type: string
                hugepages-2Mi:
                    type: string
                memory:
                    type: string
                pods:
                    type: string
                red-storage:
                    type: string
            required:
                - cpu
                - ephemeral-storage
                - pods
                - memory
                - hugepages-1Gi
                - hugepages-2Mi
                - gp-storage
                - red-storage
            type: object
        k8s.NodeSpec:
            properties:
                podCIDR:
                    type: string
                podCIDRs:
                    items:
                        type: string
                    type: array
            required:
                - podCIDR
            type: object
        k8s.NodeStatus:
            properties:
                addresses:
                    items:
                        $ref: '#/components/schemas/k8s.NodeAddress'
                    type: array
                allocatable:
                    $ref: '#/components/schemas/k8s.NodeResourceList'
                capacity:
                    $ref: '#/components/schemas/k8s.NodeResourceList'
                conditions:
                    items:
                        $ref: '#/components/schemas/k8s.NodeCondition'
                    type: array
                daemonEndpoints:
                    properties:
                        kubeletEndpoint:
                            properties:
                                Port:
                                    type: integer
                            required:
                                - Port
                            type: object
                    required:
                        - kubeletEndpoint
                    type: object
                images:
                    items:
                        $ref: '#/components/schemas/k8s.NodeStatusImage'
                    type: array
                nodeInfo:
                    $ref: '#/components/schemas/k8s.NodeSystemInfo'
            required:
                - conditions
                - addresses
                - allocatable
                - capacity
                - daemonEndpoints
                - images
            type: object
        k8s.NodeStatusImage:
            type: object
        k8s.NodeSystemInfo:
            properties:
                architecture:
                    type: string
                bootID:
                    type: string
                containerRuntimeVersion:
                    type: string
                kernelVersion:
                    type: string
                kubeProxyVersion:
                    type: string
                kubeletVersion:
                    type: string
                machineID:
                    type: string
                operatingSystem:
                    type: string
                osImage:
                    type: string
                systemUUID:
                    type: string
            required:
                - architecture
                - bootID
                - containerRuntimeVersion
                - kernelVersion
                - kubeProxyVersion
                - kubeletVersion
                - machineID
                - operatingSystem
                - osImage
                - systemUUID
            type: object
        k8s.PersistentVolumeClaim:
            properties:
                apiVersion:
                    type: string
                kind:
                    type: string
                metadata:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
                spec:
                    $ref: '#/components/schemas/k8s.PersistentVolumeClaimSpec'
            required:
                - apiVersion
                - kind
                - metadata
                - spec
            type: object
            x-kubernetes-group-version-kind:
                - group: ""
                  kind: PersistentVolumeClaim
                  version: v1
        k8s.PersistentVolumeClaimList:
            properties:
                apiVersion:
                    type: string
                items:
                    items:
                        $ref: '#/components/schemas/k8s.PersistentVolumeClaim'
                    type: array
                kind:
                    type: string
                metadata:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
            required:
                - apiVersion
                - kind
                - metadata
                - items
            type: object
            x-kubernetes-group-version-kind:
                - group: ""
                  kind: PersistentVolumeClaimList
                  version: v1
        k8s.PersistentVolumeClaimSpec:
            properties:
                accessModes:
                    items:
                        type: string
                    type: array
                resources:
                    $ref: '#/components/schemas/k8s.PersistentVolumeClaimSpecResources'
                storageClassName:
                    type: string
            type: object
        k8s.PersistentVolumeClaimSpecResources:
            properties:
                requests:
                    properties:
                        storage:
                            type: string
                    required:
                        - storage
                    type: object
            required:
                - requests
            type: object
        k8s.PersistentVolumeClaimVolumeSource:
            description: PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).
            properties:
                claimName:
                    description: 'claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims'
                    type: string
                readOnly:
                    description: readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
                    type: boolean
            required:
                - claimName
            type: object
        k8s.Pod:
            description: Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.
            properties:
                apiVersion:
                    type: string
                kind:
                    type: string
                metadata:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
                spec:
                    $ref: '#/components/schemas/k8s.PodSpec'
                status:
                    $ref: '#/components/schemas/k8s.PodStatus'
            required:
                - apiVersion
                - kind
                - metadata
                - spec
            type: object
            x-kubernetes-group-version-kind:
                - group: ""
                  kind: Pod
                  version: v1
        k8s.PodCondition:
            description: PodCondition contains details for the current condition of this pod.
            properties:
                lastProbeTime:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
                    description: Last time we probed the condition.
                lastTransitionTime:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
                    description: Last time the condition transitioned from one status to another.
                message:
                    description: Human-readable message indicating details about last transition.
                    type: string
                reason:
                    description: Unique, one-word, CamelCase reason for the condition's last transition.
                    type: string
                status:
                    description: 'Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions'
                    type: string
                type:
                    description: 'Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions'
                    type: string
            required:
                - type
                - status
            type: object
        k8s.PodIP:
            description: |-
                IP address information for entries in the (plural) PodIPs field. Each entry includes:
                   IP: An IP address allocated to the pod. Routable at least within the cluster.
            properties:
                ip:
                    description: ip is an IP address (IPv4 or IPv6) assigned to the pod
                    type: string
            type: object
        k8s.PodList:
            description: PodList is a list of Pods.
            properties:
                apiVersion:
                    type: string
                items:
                    items:
                        $ref: '#/components/schemas/k8s.Pod'
                    type: array
                kind:
                    type: string
                metadata:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
            required:
                - items
                - kind
                - metadata
                - apiVersion
            type: object
            x-kubernetes-group-version-kind:
                - group: ""
                  kind: PodList
                  version: v1
        k8s.PodSpec:
            description: PodSpec is a description of a pod.
            properties:
                containers:
                    items:
                        $ref: '#/components/schemas/k8s.Container'
                    type: array
                volumes:
                    items:
                        $ref: '#/components/schemas/k8s.Volume'
                    type: array
            required:
                - containers
            type: object
        k8s.PodStatus:
            description: PodStatus represents information about the status of a pod. Status may trail the actual state of a system, especially if the node that hosts the pod cannot contact the control plane.
            properties:
                conditions:
                    description: 'Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions'
                    items:
                        $ref: '#/components/schemas/k8s.PodCondition'
                    type: array
                containerStatuses:
                    description: 'The list has one entry per container in the manifest. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status'
                    items:
                        $ref: '#/components/schemas/k8s.ContainerStatus'
                    type: array
                ephemeralContainerStatuses:
                    description: Status for any ephemeral containers that have run in this pod. This field is beta-level and available on clusters that haven't disabled the EphemeralContainers feature gate.
                    items:
                        $ref: '#/components/schemas/k8s.ContainerStatus'
                    type: array
                hostIP:
                    description: IP address of the host to which the pod is assigned. Empty if not yet scheduled.
                    type: string
                initContainerStatuses:
                    description: 'The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status'
                    items:
                        $ref: '#/components/schemas/k8s.ContainerStatus'
                    type: array
                message:
                    description: A human readable message indicating details about why the pod is in this condition.
                    type: string
                nominatedNodeName:
                    description: nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.
                    type: string
                phase:
                    description: |+
                        The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:

                        Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.

                        More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase

                    type: string
                podIP:
                    description: IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
                    type: string
                podIPs:
                    description: podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.
                    items:
                        $ref: '#/components/schemas/k8s.PodIP'
                    type: array
                qosClass:
                    description: |+
                        The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md

                    type: string
                reason:
                    description: A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'
                    type: string
                startTime:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
                    description: RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.
            type: object
        k8s.ResourceRequirements:
            properties:
                limits:
                    additionalProperties:
                        type: string
                requests:
                    additionalProperties:
                        type: string
        k8s.RollingUpdateDeployment:
            properties:
                maxSurge:
                    type: integer
                maxUnavailable:
                    type: integer
            required:
                - maxSurge
                - maxUnavailable
            type: object
        k8s.Secret:
            properties:
                apiVersion:
                    type: string
                binaryData:
                    additionalProperties:
                        type: string
                    type: object
                data:
                    additionalProperties:
                        type: string
                    type: object
                kind:
                    type: string
                metadata:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
                type:
                    type: string
            type: object
            x-kubernetes-group-version-kind:
                - group: ""
                  kind: Secret
                  version: v1
        k8s.SecretList:
            properties:
                apiVersion:
                    type: string
                items:
                    items:
                        $ref: '#/components/schemas/k8s.Secret'
                    type: array
                kind:
                    type: string
                metadata:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
            required:
                - items
            type: object
            x-kubernetes-group-version-kind:
                - group: ""
                  kind: SecretList
                  version: v1
        k8s.SelfSubjectAccessReview:
            properties:
                apiVersion:
                    type: string
                kind:
                    type: string
                metadata:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
                spec:
                    $ref: '#/components/schemas/k8s.SelfSubjectAccessReviewSpec'
                status:
                    $ref: '#/components/schemas/k8s.SubjectAccessReviewStatus'
            type: object
            x-kubernetes-group-version-kind:
                - group: authorization.k8s.io/v1
                  kind: CertificateSigningRequest
                  version: v1
        k8s.SelfSubjectAccessReviewSpec:
            properties:
                nonResourceAttributes:
                    type: object
                resourceAttributes:
                    type: object
            type: object
        k8s.Service:
            properties:
                apiVersion:
                    type: string
                kind:
                    type: string
                metadata:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
                spec:
                    $ref: '#/components/schemas/k8s.ServiceSpec'
            required:
                - spec
            type: object
            x-kubernetes-group-version-kind:
                - group: ""
                  kind: Service
                  version: v1
        k8s.ServiceAccount:
            properties:
                apiVersion:
                    type: string
                automountServiceAccountToken:
                    type: boolean
                kind:
                    type: string
                metadata:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
            type: object
            x-kubernetes-group-version-kind:
                - group: ""
                  kind: ServiceAccount
                  version: v1
        k8s.ServiceAccountList:
            properties:
                apiVersion:
                    type: string
                items:
                    items:
                        $ref: '#/components/schemas/k8s.ServiceAccount'
                    type: array
                kind:
                    type: string
                metadata:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
            required:
                - items
            type: object
            x-kubernetes-group-version-kind:
                - group: ""
                  kind: ServiceAccountList
                  version: v1
        k8s.ServiceList:
            properties:
                apiVersion:
                    type: string
                items:
                    items:
                        $ref: '#/components/schemas/k8s.Service'
                    type: array
                kind:
                    type: string
                metadata:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
            required:
                - items
            type: object
            x-kubernetes-group-version-kind:
                - group: ""
                  kind: ServiceList
                  version: v1
        k8s.ServicePort:
            properties:
                appProtocol:
                    description: FIXME
                    type: string
                name:
                    description: FIXME
                    type: string
                nodePort:
                    description: FIXME
                    type: integer
                port:
                    type: integer
                protocol:
                    type: string
                targetPort:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.util.intstr.IntOrString'
            required:
                - port
                - targetPort
            type: object
        k8s.ServiceSpec:
            properties:
                clusterIP:
                    description: ignored for helm compat
                    type: string
                internalTrafficPolicy:
                    description: ignored for helm compat
                ports:
                    items:
                        $ref: '#/components/schemas/k8s.ServicePort'
                    type: array
                selector:
                    additionalProperties:
                        type: string
                    type: object
                sessionAffinity:
                    description: FIXME, ClientIP, None
                    type: string
                type:
                    description: FIXME. ClusterIP, ExternalName, NodePort, LoadBalancer
                    type: string
            type: object
        k8s.StorageClass:
            properties:
                allowVolumeExpansion:
                    description: AllowVolumeExpansion shows whether the storage class allow volume expand
                    type: boolean
                apiVersion:
                    type: string
                kind:
                    type: string
                metadata:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
                mountOptions:
                    description: Dynamically provisioned PersistentVolumes of this storage class are created with these mountOptions, e.g. ["ro", "soft"]. Not validated - mount of the PVs will simply fail if one is invalid.
                    items:
                        type: string
                    type: array
                parameters:
                    additionalProperties:
                        type: string
                    description: Parameters holds the parameters for the provisioner that should create volumes of this storage class.
                    type: object
                provisioner:
                    description: Provisioner indicates the type of the provisioner.
                    type: string
                reclaimPolicy:
                    description: Dynamically provisioned PersistentVolumes of this storage class are created with this reclaimPolicy. Defaults to Delete.
                    type: string
                volumeBindingMode:
                    description: VolumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the VolumeScheduling feature.
                    type: string
            required:
                - provisioner
            type: object
            x-kubernetes-group-version-kind:
                - group: storage.k8s.io
                  kind: StorageClass
                  version: v1
        k8s.StorageClassList:
            description: StorageClassList is a collection of storage classes.
            properties:
                apiVersion:
                    type: string
                items:
                    items:
                        $ref: '#/components/schemas/k8s.StorageClass'
                    type: array
                kind:
                    type: string
                metadata:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
            required:
                - items
            type: object
            x-kubernetes-group-version-kind:
                - group: storage.k8s.io
                  kind: StorageClassList
                  version: v1
        k8s.SubjectAccessReviewStatus:
            properties:
                allowed:
                    type: boolean
                defined:
                    type: boolean
                evaluationError:
                    type: boolean
                reason:
                    type: string
            required:
                - allowed
            type: object
        k8s.User:
            properties:
                apiVersion:
                    type: string
                kind:
                    type: string
                metadata:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
                spec:
                    $ref: '#/components/schemas/k8s.UserSpec'
                tenant:
                    $ref: '#/components/schemas/Kraud.TenantInfo'
            type: object
            x-kubernetes-group-version-kind:
                - group: ""
                  kind: CertificateSigningRequest
                  version: v1
        k8s.UserList:
            properties:
                apiVersion:
                    type: string
                items:
                    items:
                        $ref: '#/components/schemas/k8s.User'
                    type: array
                kind:
                    type: string
                metadata:
                    $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
            required:
                - items
            type: object
            x-kubernetes-group-version-kind:
                - group: ""
                  kind: UserList
                  version: v1
        k8s.UserSpec:
            properties:
                displayName:
                    type: string
                email:
                    type: string
                idpId:
                    type: string
                roles:
                    items:
                        type: string
                    type: array
                status:
                    type: string
            required:
                - displayName
                - email
            type: object
        k8s.Volume:
            description: Volume represents a named volume in a pod that may be accessed by any container in the pod.
            properties:
                name:
                    description: 'name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                persistentVolumeClaim:
                    $ref: '#/components/schemas/k8s.PersistentVolumeClaimVolumeSource'
                    description: 'persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims'
            required:
                - name
            type: object
        k8s.VolumeDevice:
            description: volumeDevice describes a mapping of a raw block device within a container.
            properties:
                devicePath:
                    description: devicePath is the path inside of the container that the device will be mapped to.
                    type: string
                name:
                    description: name must match the name of a persistentVolumeClaim in the pod
                    type: string
            required:
                - name
                - devicePath
            type: object
        k8s.VolumeMount:
            description: VolumeMount describes a mounting of a Volume within a container.
            properties:
                mountPath:
                    description: Path within the container at which the volume should be mounted.  Must not contain ':'.
                    type: string
                mountPropagation:
                    description: mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
                    type: string
                name:
                    description: This must match the Name of a Volume.
                    type: string
                readOnly:
                    description: Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
                    type: boolean
                subPath:
                    description: Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
                    type: string
                subPathExpr:
                    description: Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
                    type: string
            required:
                - name
                - mountPath
            type: object
        kr.CradleState:
            properties:
                Pod:
                    properties:
                        CradleStage:
                            format: uint32
                            type: integer
                        Error:
                            type: string
                        ExitCode:
                            type: integer
                        IP6:
                            type: string
                        LastLog:
                            format: binary
                            type: string
                    type: object
                V:
                    description: Vpc View
                    type: object
            type: object
        kr.Deployment:
            properties:
                AID:
                    type: string
                ID:
                    type: string
                Name:
                    type: string
                Namespace:
                    $ref: '#/components/schemas/kr.NamespaceReference'
                Ports:
                    items:
                        $ref: '#/components/schemas/kr.IngressPort'
                    type: array
                Routes:
                    items:
                        $ref: '#/components/schemas/kr.IngressRoute'
                    type: array
            required:
                - ID
                - AID
                - Name
                - Namespace
            type: object
        kr.IngressDomain:
            properties:
                AcmeEnabled:
                    type: boolean
                AcmeError:
                    type: string
                AutoHttps:
                    type: boolean
                CertificateProvisioned:
                    type: boolean
                Domain:
                    type: string
                ID:
                    type: string
                Verified:
                    type: boolean
            required:
                - ID
                - Domain
            type: object
        kr.IngressPort:
            properties:
                ID:
                    type: string
            required:
                - ID
            type: object
        kr.IngressRoute:
            properties:
                Domain:
                    $ref: '#/components/schemas/kr.IngressDomain'
                ID:
                    type: string
                Path:
                    type: string
                VpcAddress:
                    type: string
            required:
                - ID
                - Path
                - Domain
            type: object
        kr.Namespace:
            properties:
                AID:
                    type: string
                ID:
                    type: string
                Name:
                    type: string
            required:
                - ID
                - AID
                - Name
            type: object
        kr.NamespaceOverview:
            properties:
                AID:
                    type: string
                Annotations:
                    additionalProperties:
                        type: string
                    type: object
                App:
                    $ref: '#/components/schemas/kraud.AppOverview'
                Deployments:
                    items:
                        $ref: '#/components/schemas/kr.Deployment'
                    type: array
                ID:
                    type: string
                Labels:
                    additionalProperties:
                        type: string
                    type: object
                Name:
                    type: string
                Volumes:
                    items:
                        $ref: '#/components/schemas/kr.Volume'
                    type: array
            required:
                - ID
                - AID
                - Name
                - Volumes
                - Deployments
                - Labels
                - Annotations
            type: object
        kr.NamespaceReference:
            properties:
                AID:
                    type: string
                ID:
                    type: string
                Name:
                    type: string
            type: object
        kr.VmmContainerReport:
            properties:
                ExitCode:
                    type: integer
                Log:
                    type: string
                Message:
                    type: string
                State:
                    format: uint32
                    type: integer
            type: object
        kr.VmmPodReport:
            properties:
                Reason:
                    type: string
            type: object
        kr.Volume:
            properties:
                Class:
                    type: string
                ExpiresAt:
                    format: date-time
                    type: string
                ID:
                    type: string
                Name:
                    type: string
                Namespace:
                    $ref: '#/components/schemas/kr.NamespaceReference'
                Size:
                    format: uint64
                    type: integer
            required:
                - ID
                - AID
                - Name
                - Namespace
                - Class
                - Size
            type: object
        kraud.AppOverview:
            properties:
                changelog:
                    description: version changelog
                    type: string
                config:
                    additionalProperties:
                        $ref: '#/components/schemas/kraud.AppTemplateConfig'
                    description: app configuration variables
                    type: object
                created_at:
                    format: date-time
                    type: string
                description:
                    description: description of the app
                    type: string
                ext_url:
                    description: extension url if any
                    type: string
                feed_id:
                    type: string
                icon_url:
                    description: url to the app icon
                    type: string
                id:
                    type: string
                label:
                    description: label, human readable name of the app
                    type: string
                name:
                    description: name of the app
                    type: string
                post_launch:
                    description: post launch description
                    type: string
                version:
                    description: incremented version number
                    type: integer
            required:
                - id
                - feed_id
                - name
                - label
                - version
                - description
                - created_at
            type: object
        kraud.AppTemplateConfig:
            additionalProperties: true
            properties:
                default:
                    type: string
                description:
                    type: string
                kind:
                    type: string
                label:
                    type: string
                options:
                    items:
                        $ref: '#/components/schemas/kraud.AppTemplateConfigOption'
                    type: array
                required:
                    type: boolean
            required:
                - kind
                - label
                - description
                - default
                - required
            type: object
        kraud.AppTemplateConfigOption:
            properties:
                description:
                    type: string
                label:
                    type: string
                value:
                    type: string
            required:
                - value
                - label
                - description
            type: object
        kraud.AppVersion:
            properties:
                changelog:
                    description: version changelog
                    type: string
                created_at:
                    format: date-time
                    type: string
                id:
                    type: string
                version:
                    description: incremented version number
                    type: integer
            required:
                - id
                - version
                - changelog
                - created_at
            type: object
        kraud.AppVersionList:
            items:
                $ref: '#/components/schemas/kraud.AppVersion'
            type: array
        kraud.CreateFeed:
            properties:
                icon_url:
                    type: string
                name:
                    type: string
            required:
                - name
                - icon_url
            type: object
        kraud.Event:
            properties:
                AID:
                    type: string
                Action:
                    type: string
                Details:
                    type: object
                ID:
                    type: string
                Reason:
                    type: string
                Resource:
                    type: string
                Severity:
                    type: string
                System:
                    type: string
                Timestamp:
                    type: string
                TraceID:
                    type: string
                UserID:
                    type: string
                UserNR:
                    type: integer
            type: object
        kraud.Feed:
            properties:
                apps:
                    items:
                        $ref: '#/components/schemas/kraud.AppOverview'
                    type: array
                created_at:
                    format: date-time
                    type: string
                icon_url:
                    type: string
                id:
                    type: string
                name:
                    type: string
            required:
                - id
                - name
                - created_at
                - source_url
                - icon_url
            type: object
        kraud.FeedList:
            items:
                $ref: '#/components/schemas/kraud.Feed'
            type: array
        kraud.IdentityProvider:
            properties:
                id:
                    type: string
                idp_cert:
                    type: string
                idp_metdata:
                    type: string
                name:
                    type: string
                namespace:
                    type: string
                protocol:
                    type: string
                svc_metadata:
                    type: string
                url_meta:
                    type: string
                url_slo:
                    type: string
                url_sso:
                    type: string
            required:
                - protocol
                - name
                - namespace
            type: object
        kraud.IdentityProviderList:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/kraud.IdentityProvider'
                    type: array
            required:
                - items
            type: object
        kraud.LaunchAppResponse:
            properties:
                launch_id:
                    type: string
            required:
                - launch_id
            type: object
        kraud.LaunchSettings:
            description: LaunchSettings is the settings for launching an app.
            properties:
                config:
                    additionalProperties:
                        type: string
                project_name:
                    description: The name of the project to launch the app in.
                    type: string
                roles:
                    description: |
                        UUIDs of the roles to apply to the application namespace.
                        By default, `users` and `admin` roles are applied (their respective UUIDs).
                    items:
                        type: string
                    type: array
            required:
                - project_name
                - roles
                - config
            type: object
        kraud.SessionInfo:
            properties:
                tenants:
                    items:
                        $ref: '#/components/schemas/kraud.SessionTenantInfo'
                    type: array
                user:
                    $ref: '#/components/schemas/kraud.SessionUserInfo'
            required:
                - tenants
                - user
            type: object
        kraud.SessionTenantInfo:
            properties:
                org:
                    type: string
                tel_verified:
                    type: boolean
                tenant_id:
                    type: string
                user_id:
                    type: string
            required:
                - org
                - tenant_id
                - user_id
                - tel_verified
            type: object
        kraud.SessionUserInfo:
            properties:
                avatar_url:
                    type: string
                email:
                    type: string
                idp_id:
                    type: string
                name:
                    type: string
                scopes:
                    items:
                        type: string
                    type: array
                    x-go-type: Scopes
                user_id:
                    type: string
            required:
                - email
                - name
                - user_id
                - idp_id
                - avatar_url
                - scopes
            type: object
        kraud.WSLaunchLog:
            description: regular log lines
            properties:
                log:
                    type: string
            required:
                - log
            type: object
        kraud.WSLaunchMeta:
            description: metadata
            properties:
                deployment_aids:
                    items:
                        type: string
                    type: array
                error:
                    type: string
            type: object
info:
    description: computer go beep boop
    title: kraud.cloud macro
    version: 1.0.0
openapi: 3.0.0
paths:
    /:
        get:
            operationId: getIndex
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Index'
                    description: OK
    /_ping:
        get:
            description: This is a dummy endpoint you can use to test if the server is accessible.
            operationId: DockerSystemPing
            produces:
                - text/plain
            responses:
                200:
                    description: no error
                    headers:
                        API-Version:
                            description: Max API Version the server supports
                            schema:
                                type: string
                        Builder-Version:
                            description: Default version of docker image builder
                            schema:
                                type: string
                        Cache-Control:
                            default: no-cache, no-store, must-revalidate
                            schema:
                                type: string
                        Docker-Experimental:
                            description: If the server is running with experimental mode enabled
                            schema:
                                type: boolean
                        Pragma:
                            default: no-cache
                            schema:
                                type: string
                    schema:
                        example: OK
                        schema:
                            type: string
                500:
                    description: server error
                    headers:
                        Cache-Control:
                            default: no-cache, no-store, must-revalidate
                            schema:
                                type: string
                        Pragma:
                            default: no-cache
                            schema:
                                type: string
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Ping
            tags:
                - System
        head:
            description: This is a dummy endpoint you can use to test if the server is accessible.
            operationId: DockerSystemPingHead
            produces:
                - text/plain
            responses:
                200:
                    description: no error
                    headers:
                        API-Version:
                            description: Max API Version the server supports
                            schema:
                                type: string
                        Builder-Version:
                            description: Default version of docker image builder
                            schema:
                                type: string
                        Cache-Control:
                            default: no-cache, no-store, must-revalidate
                            schema:
                                type: string
                        Docker-Experimental:
                            description: If the server is running with experimental mode enabled
                            schema:
                                type: boolean
                        Pragma:
                            default: no-cache
                            schema:
                                type: string
                    schema:
                        example: (empty)
                        schema:
                            type: string
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Ping
            tags:
                - System
    /api:
        get:
            operationId: getCoreAPIVersions
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIVersions'
                    description: OK
    /api/v1:
        get:
            operationId: getCoreV1APIResources
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
                    description: OK
    /api/v1/endpoints:
        get:
            operationId: listEndpointsAllNamespaces
            parameters:
                - in: query
                  name: fieldSelector
                  schema:
                    type: string
                - in: query
                  name: labelSelector
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.EndpointsList'
                    description: OK
    /api/v1/namespaces:
        get:
            operationId: listNamespaces
            parameters:
                - in: query
                  name: fieldSelector
                  schema:
                    type: string
                - in: query
                  name: labelSelector
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.NamespaceList'
                    description: OK
        post:
            operationId: createNamespace
            parameters:
                - in: body
                  name: body
                  required: true
                  schema:
                    $ref: '#/components/schemas/k8s.Namespace'
            responses:
                "200":
                    description: OK
                    schema:
                        $ref: '#/components/schemas/k8s.Namespace'
                "401":
                    description: Unauthorized
    /api/v1/namespaces/{name}:
        delete:
            operationId: deleteNamespace
            parameters:
                - in: path
                  name: name
                  required: true
                  schema:
                    type: string
                - in: query
                  name: recursive
                  required: false
                  schema:
                    type: boolean
                - in: query
                  name: immediate
                  required: false
                  schema:
                    type: boolean
            responses:
                204:
                    description: OK
        get:
            operationId: getNamespace
            parameters:
                - in: path
                  name: name
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.Namespace'
                    description: OK
        patch:
            operationId: patchNamespace
            parameters:
                - in: path
                  name: name
                  required: true
                  schema:
                    type: string
                - in: body
                  name: body
                  required: true
                  schema:
                    $ref: '#/components/schemas/k8s.Namespace'
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.Namespace'
                    description: OK
    /api/v1/namespaces/{namespace}/configmaps:
        get:
            operationId: listConfigMaps
            parameters:
                - in: path
                  name: namespace
                  required: true
                  schema:
                    type: string
                - in: query
                  name: fieldSelector
                  schema:
                    type: string
                - in: query
                  name: labelSelector
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.ConfigMapList'
                    description: OK
        post:
            operationId: createConfigMap
            parameters:
                - in: path
                  name: namespace
                  required: true
                  schema:
                    type: string
                - in: body
                  name: body
                  required: true
                  schema:
                    $ref: '#/components/schemas/k8s.ConfigMap'
            responses:
                "200":
                    description: OK
                    schema:
                        $ref: '#/components/schemas/k8s.ConfigMap'
                "401":
                    description: Unauthorized
    /api/v1/namespaces/{namespace}/configmaps/{name}:
        delete:
            operationId: deleteConfigMap
            parameters:
                - in: path
                  name: namespace
                  required: true
                  schema:
                    type: string
                - in: path
                  name: name
                  required: true
                  schema:
                    type: string
            responses:
                204:
                    description: OK
        get:
            operationId: getConfigMap
            parameters:
                - in: path
                  name: namespace
                  required: true
                  schema:
                    type: string
                - in: path
                  name: name
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.ConfigMap'
                    description: OK
        patch:
            operationId: patchConfigMap
            parameters:
                - in: path
                  name: namespace
                  required: true
                  schema:
                    type: string
                - in: path
                  name: name
                  required: true
                  schema:
                    type: string
                - in: body
                  name: body
                  required: true
                  schema:
                    $ref: '#/components/schemas/k8s.ConfigMap'
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.ConfigMap'
                    description: OK
    /api/v1/namespaces/{namespace}/endpoints:
        get:
            operationId: listEndpoints
            parameters:
                - in: path
                  name: namespace
                  required: true
                  schema:
                    type: string
                - in: query
                  name: fieldSelector
                  schema:
                    type: string
                - in: query
                  name: labelSelector
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.EndpointsList'
                    description: OK
    /api/v1/namespaces/{namespace}/endpoints/{name}:
        get:
            operationId: getEndpoints
            parameters:
                - in: path
                  name: namespace
                  required: true
                  schema:
                    type: string
                - in: path
                  name: name
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.Endpoints'
                    description: OK
    /api/v1/namespaces/{namespace}/events:
        get:
            operationId: listNamespacesEvents
            parameters:
                - in: path
                  name: namespace
                  required: true
                  schema:
                    type: string
                - in: query
                  name: fieldSelector
                  schema:
                    type: string
                - in: query
                  name: labelSelector
                  schema:
                    type: string
                - in: query
                  name: limit
                  schema:
                    type: integer
                - in: query
                  name: continue
                  schema:
                    type: string
                - in: query
                  name: watch
                  schema:
                    type: boolean
                - in: query
                  name: timeoutSeconds
                  schema:
                    type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.EventList'
                    description: OK
    /api/v1/namespaces/{namespace}/persistentvolumeclaims:
        get:
            operationId: listPersistentVolumeClaims
            parameters:
                - in: path
                  name: namespace
                  required: true
                  schema:
                    type: string
                - in: query
                  name: fieldSelector
                  schema:
                    type: string
                - in: query
                  name: labelSelector
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.PersistentVolumeClaimList'
                    description: OK
        post:
            operationId: createPersistentVolumeClaim
            parameters:
                - in: path
                  name: namespace
                  required: true
                  schema:
                    type: string
                - in: body
                  name: body
                  required: true
                  schema:
                    $ref: '#/components/schemas/k8s.PersistentVolumeClaim'
            responses:
                "200":
                    description: OK
                    schema:
                        $ref: '#/components/schemas/k8s.PersistentVolumeClaim'
                "201":
                    description: Created
                    schema:
                        $ref: '#/components/schemas/k8s.PersistentVolumeClaim'
                "202":
                    description: Accepted
                    schema:
                        $ref: '#/components/schemas/k8s.PersistentVolumeClaim'
                "401":
                    description: Unauthorized
    /api/v1/namespaces/{namespace}/persistentvolumeclaims/{persistentvolumeclaim}:
        delete:
            operationId: deletePersistentVolumeClaim
            parameters:
                - in: path
                  name: namespace
                  required: true
                  schema:
                    type: string
                - in: path
                  name: persistentvolumeclaim
                  required: true
                  schema:
                    type: string
            responses:
                204:
                    description: OK
        get:
            operationId: getPersistentVolumeClaim
            parameters:
                - in: path
                  name: namespace
                  required: true
                  schema:
                    type: string
                - in: path
                  name: persistentvolumeclaim
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.PersistentVolumeClaim'
                    description: OK
        patch:
            operationId: patchPersistentVolumeClaim
            parameters:
                - in: path
                  name: namespace
                  required: true
                  schema:
                    type: string
                - in: path
                  name: persistentvolumeclaim
                  required: true
                  schema:
                    type: string
                - in: body
                  name: body
                  required: true
                  schema:
                    $ref: '#/components/schemas/k8s.PersistentVolumeClaim'
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.PersistentVolumeClaim'
                    description: OK
    /api/v1/namespaces/{namespace}/pods:
        get:
            operationId: listPods
            parameters:
                - in: path
                  name: namespace
                  required: true
                  schema:
                    type: string
                - in: query
                  name: fieldSelector
                  schema:
                    type: string
                - in: query
                  name: labelSelector
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.PodList'
                    description: OK
        post:
            operationId: createPod
            parameters:
                - in: path
                  name: namespace
                  required: true
                  schema:
                    type: string
                - in: body
                  name: body
                  required: true
                  schema:
                    $ref: '#/components/schemas/k8s.Pod'
                - in: query
                  name: fieldManager
                  schema:
                    type: string
                  uniqueItems: true
            responses:
                "200":
                    description: OK
                    schema:
                        $ref: '#/components/schemas/k8s.Pod'
                "201":
                    description: Created
                    schema:
                        $ref: '#/components/schemas/k8s.Pod'
                "202":
                    description: Accepted
                    schema:
                        $ref: '#/components/schemas/k8s.Pod'
                "401":
                    description: Unauthorized
    /api/v1/namespaces/{namespace}/pods/{pod}:
        delete:
            operationId: deletePod
            parameters:
                - in: path
                  name: namespace
                  required: true
                  schema:
                    type: string
                - in: path
                  name: pod
                  required: true
                  schema:
                    type: string
            responses:
                204:
                    description: OK
        get:
            operationId: getPod
            parameters:
                - in: path
                  name: namespace
                  required: true
                  schema:
                    type: string
                - in: path
                  name: pod
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.Pod'
                    description: OK
        patch:
            operationId: patchPod
            parameters:
                - in: path
                  name: namespace
                  required: true
                  schema:
                    type: string
                - in: path
                  name: pod
                  required: true
                  schema:
                    type: string
                - in: body
                  name: body
                  required: true
                  schema:
                    $ref: '#/components/schemas/k8s.Pod'
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.Pod'
                    description: OK
    /api/v1/namespaces/{namespace}/pods/{pod}/log:
        get:
            operationId: getPodLog
            parameters:
                - in: path
                  name: namespace
                  required: true
                  schema:
                    type: string
                - in: path
                  name: pod
                  required: true
                  schema:
                    type: string
                - in: query
                  name: container
                  required: false
                  schema:
                    type: string
                - in: query
                  name: follow
                  required: false
                  schema:
                    type: boolean
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.Pod'
                    description: OK
    /api/v1/namespaces/{namespace}/secrets:
        get:
            operationId: listSecrets
            parameters:
                - in: path
                  name: namespace
                  required: true
                  schema:
                    type: string
                - in: query
                  name: fieldSelector
                  schema:
                    type: string
                - in: query
                  name: labelSelector
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.SecretList'
                    description: OK
        post:
            operationId: createSecret
            parameters:
                - in: path
                  name: namespace
                  required: true
                  schema:
                    type: string
                - in: body
                  name: body
                  required: true
                  schema:
                    $ref: '#/components/schemas/k8s.Secret'
            responses:
                "200":
                    description: OK
                    schema:
                        $ref: '#/components/schemas/k8s.Secret'
                "401":
                    description: Unauthorized
    /api/v1/namespaces/{namespace}/secrets/{name}:
        delete:
            operationId: deleteSecret
            parameters:
                - in: path
                  name: namespace
                  required: true
                  schema:
                    type: string
                - in: path
                  name: name
                  required: true
                  schema:
                    type: string
            responses:
                204:
                    description: OK
        get:
            operationId: getSecret
            parameters:
                - in: path
                  name: namespace
                  required: true
                  schema:
                    type: string
                - in: path
                  name: name
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.Secret'
                    description: OK
        patch:
            operationId: patchSecret
            parameters:
                - in: path
                  name: namespace
                  required: true
                  schema:
                    type: string
                - in: path
                  name: name
                  required: true
                  schema:
                    type: string
                - in: body
                  name: body
                  required: true
                  schema:
                    $ref: '#/components/schemas/k8s.Secret'
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.Secret'
                    description: OK
        put:
            operationId: replaceSecret
            parameters:
                - in: path
                  name: namespace
                  required: true
                  schema:
                    type: string
                - in: path
                  name: name
                  required: true
                  schema:
                    type: string
                - in: body
                  name: body
                  required: true
                  schema:
                    $ref: '#/components/schemas/k8s.Secret'
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.Secret'
                    description: OK
    /api/v1/namespaces/{namespace}/services:
        get:
            operationId: listServices
            parameters:
                - in: path
                  name: namespace
                  required: true
                  schema:
                    type: string
                - in: query
                  name: fieldSelector
                  schema:
                    type: string
                - in: query
                  name: labelSelector
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.ServiceList'
                    description: OK
        post:
            operationId: createService
            parameters:
                - in: path
                  name: namespace
                  required: true
                  schema:
                    type: string
                - in: body
                  name: body
                  required: true
                  schema:
                    $ref: '#/components/schemas/k8s.Service'
            responses:
                "200":
                    description: OK
                    schema:
                        $ref: '#/components/schemas/k8s.Service'
                "201":
                    description: Created
                    schema:
                        $ref: '#/components/schemas/k8s.Service'
                "202":
                    description: Accepted
                    schema:
                        $ref: '#/components/schemas/k8s.Service'
                "401":
                    description: Unauthorized
    /api/v1/namespaces/{namespace}/services/{service}:
        delete:
            operationId: deleteService
            parameters:
                - in: path
                  name: namespace
                  required: true
                  schema:
                    type: string
                - in: path
                  name: service
                  required: true
                  schema:
                    type: string
            responses:
                204:
                    description: OK
        get:
            operationId: getService
            parameters:
                - in: path
                  name: namespace
                  required: true
                  schema:
                    type: string
                - in: path
                  name: service
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.Service'
                    description: OK
        patch:
            operationId: patchService
            parameters:
                - in: path
                  name: namespace
                  required: true
                  schema:
                    type: string
                - in: path
                  name: service
                  required: true
                  schema:
                    type: string
                - in: body
                  name: body
                  required: true
                  schema:
                    $ref: '#/components/schemas/k8s.Service'
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.Service'
                    description: OK
    /api/v1/namespaces/kube-system/endpoints/default-http-backend:
        get:
            operationId: getDefaultHttpBackend
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.IngressRuleHttpPathBackend'
                    description: OK
    /api/v1/namespaces/kube-system/services/default-http-backend:
        get:
            operationId: getDefaultHttpBackendService
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.Service'
                    description: OK
    /api/v1/nodes:
        get:
            operationId: listNodes
            parameters:
                - in: query
                  name: fieldSelector
                  schema:
                    type: string
                - in: query
                  name: labelSelector
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.NodeList'
                    description: OK
    /api/v1/nodes/{name}:
        get:
            operationId: getNode
            parameters:
                - in: path
                  name: name
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.Node'
                    description: OK
    /api/v1/pods:
        get:
            operationId: listPodsAllNamespaces
            parameters:
                - in: query
                  name: fieldSelector
                  schema:
                    type: string
                - in: query
                  name: labelSelector
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.PodList'
                    description: OK
    /api/v1/serviceaccounts:
        get:
            operationId: listServiceAccounts
            parameters:
                - in: query
                  name: fieldSelector
                  schema:
                    type: string
                - in: query
                  name: labelSelector
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.ServiceAccountList'
                    description: OK
        post:
            operationId: createServiceAccount
            parameters:
                - in: body
                  name: body
                  required: true
                  schema:
                    $ref: '#/components/schemas/k8s.ServiceAccount'
            responses:
                "200":
                    description: OK
                    schema:
                        $ref: '#/components/schemas/k8s.ServiceAccount'
                "401":
                    description: Unauthorized
    /api/v1/serviceaccounts/{name}:
        delete:
            operationId: deleteServiceAccount
            parameters:
                - in: path
                  name: name
                  required: true
                  schema:
                    type: string
            responses:
                204:
                    description: OK
        get:
            operationId: getServiceAccount
            parameters:
                - in: path
                  name: name
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.ServiceAccount'
                    description: OK
        patch:
            operationId: patchServiceAccount
            parameters:
                - in: path
                  name: name
                  required: true
                  schema:
                    type: string
                - in: body
                  name: body
                  required: true
                  schema:
                    $ref: '#/components/schemas/k8s.ServiceAccount'
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.ServiceAccount'
                    description: OK
    /api/v1/services:
        get:
            operationId: listServicesAllNamespaces
            parameters:
                - in: query
                  name: fieldSelector
                  schema:
                    type: string
                - in: query
                  name: labelSelector
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.ServiceList'
                    description: OK
    /apis:
        get:
            operationId: getAPIVersions
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroupList'
                    description: OK
                401:
                    description: Unauthorized
    /apis/apps/v1:
        get:
            operationId: getAppsV1APIResources
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
                    description: OK
    /apis/apps/v1/namespaces/{namespace}/deployments:
        get:
            operationId: listDeployments
            parameters:
                - in: path
                  name: namespace
                  required: true
                  schema:
                    type: string
                - in: query
                  name: fieldSelector
                  schema:
                    type: string
                - in: query
                  name: labelSelector
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.DeploymentList'
                    description: OK
        post:
            operationId: createDeployment
            parameters:
                - in: path
                  name: namespace
                  required: true
                  schema:
                    type: string
                - in: body
                  name: body
                  required: true
                  schema:
                    $ref: '#/components/schemas/k8s.Deployment'
            responses:
                "200":
                    description: OK
                    schema:
                        $ref: '#/components/schemas/k8s.Deployment'
                "401":
                    description: Unauthorized
    /apis/apps/v1/namespaces/{namespace}/deployments/{name}:
        delete:
            operationId: deleteDeployment
            parameters:
                - in: path
                  name: namespace
                  required: true
                  schema:
                    type: string
                - in: path
                  name: name
                  required: true
                  schema:
                    type: string
            responses:
                204:
                    description: OK
        get:
            operationId: getDeployment
            parameters:
                - in: path
                  name: namespace
                  required: true
                  schema:
                    type: string
                - in: path
                  name: name
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.Deployment'
                    description: OK
        patch:
            operationId: patchDeployment
            parameters:
                - in: path
                  name: namespace
                  required: true
                  schema:
                    type: string
                - in: path
                  name: name
                  required: true
                  schema:
                    type: string
                - in: body
                  name: body
                  required: true
                  schema:
                    $ref: '#/components/schemas/k8s.Deployment'
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.Deployment'
                    description: OK
    /apis/authorization.k8s.io/v1:
        get:
            operationId: getAuthorizationV1APIResources
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
                    description: OK
    /apis/authorization.k8s.io/v1/selfsubjectaccessreviews:
        post:
            operationID: selfsubjectaccessreviews
            parameters:
                - in: body
                  name: body
                  required: true
                  schema:
                    $ref: '#/components/schemas/k8s.SelfSubjectAccessReview'
            responses:
                "200":
                    description: OK
                    schema:
                        $ref: '#/components/schemas/k8s.SelfSubjectAccessReview'
    /apis/certificates.k8s.io/v1:
        get:
            operationId: getCertificatesV1APIResources
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
                    description: OK
    /apis/certificates.k8s.io/v1/certificatesigningrequests:
        get:
            operationId: listCertificateSigningRequests
            parameters:
                - in: query
                  name: fieldSelector
                  schema:
                    type: string
                - in: query
                  name: labelSelector
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.CertificateSigningRequestList'
                    description: OK
        post:
            operationId: createCertificateSigningRequest
            parameters:
                - in: body
                  name: body
                  required: true
                  schema:
                    $ref: '#/components/schemas/k8s.CertificateSigningRequest'
            responses:
                "200":
                    description: OK
                    schema:
                        $ref: '#/components/schemas/k8s.CertificateSigningRequest'
                "401":
                    description: Unauthorized
    /apis/certificates.k8s.io/v1/certificatesigningrequests/{name}:
        delete:
            operationId: deleteCertificateSigningRequest
            parameters:
                - in: path
                  name: name
                  required: true
                  schema:
                    type: string
            responses:
                204:
                    description: OK
        get:
            operationId: getCertificateSigningRequest
            parameters:
                - in: path
                  name: name
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.CertificateSigningRequest'
                    description: OK
        patch:
            operationId: patchCertificateSigningRequest
            parameters:
                - in: path
                  name: name
                  required: true
                  schema:
                    type: string
                - in: body
                  name: body
                  required: true
                  schema:
                    $ref: '#/components/schemas/k8s.CertificateSigningRequest'
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.CertificateSigningRequest'
                    description: OK
    /apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/approval:
        put:
            operationId: approveCertificateSigningRequest
            parameters:
                - in: path
                  name: name
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.CertificateSigningRequest'
                    description: OK
    /apis/certificates.kraudcloud.com/v1/{namespace}/{ca}/create:
        post:
            description: Generate a certificate
            operationId: generateCert
            parameters:
                - in: path
                  name: namespace
                  required: true
                  schema:
                    type: string
                - in: path
                  name: ca
                  required: true
                  schema:
                    type: string
                - in: query
                  name: algo
                  schema:
                    type: string
                - in: query
                  name: bits
                  schema:
                    type: integer
                - in: query
                  name: dns
                  schema:
                    items:
                        type: string
                    type: array
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Kraud.CertificateGenerateResponse'
                        application/zip:
                            schema:
                                format: binary
                                type: string
                    description: OK
    /apis/events.k8s.io/v1:
        get:
            operationId: getEventsV1APIResources
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
                    description: OK
    /apis/kr.vmm/v1/container/{id}/report.json:
        post:
            description: cradle sets persisted state here (lastlog)
            operationId: vmmReportContainerState
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/kr.VmmContainerReport'
                required: true
            responses:
                201:
                    description: OK
    /apis/kr.vmm/v1/layer/{id}:
        get:
            description: download a layer
            operationId: downloadLayer
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    type: string
    /apis/kr.vmm/v1/pod/{id}/cradle.yeet.json:
        get:
            description: cradle attaches to this via yeet
            operationId: vmmCradleState
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    type: string
            responses:
                101:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/kr.CradleState'
                    description: Upgraded
    /apis/kr.vmm/v1/pod/{id}/report.json:
        post:
            description: cradle sets persisted state here
            operationId: vmmReportPodState
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/kr.VmmPodReport'
                required: true
            responses:
                201:
                    description: OK
    /apis/kr.vmm/v1/pods/{id}/launch.json:
        get:
            description: Get pod spec for vmm2
            operationId: getVmmLaunchSpec
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                type: object
                    description: OK
    /apis/kr/v1/deployments/by-id/{id}/restart:
        post:
            operationId: krRestartDeploymentByID
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    type: string
            responses:
                204:
                    description: Done
    /apis/kr/v1/namespaces/by-name/{name}/overview.json:
        get:
            operationId: getNamespaceOverviewByName
            parameters:
                - in: path
                  name: name
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/kr.NamespaceOverview'
                    description: OK
    /apis/kraudcloud.com/v1:
        get:
            operationId: getKraudcloudV1APIResources
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
                    description: OK
    /apis/kraudcloud.com/v1/deployments:
        get:
            operationId: listKraudDeployments
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Kraud.DeploymentList'
                    description: OK
    /apis/kraudcloud.com/v1/deployments/{q}:
        get:
            operationId: inspectKraudDeployment
            parameters:
                - description: aid or uuid
                  in: path
                  name: q
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Kraud.Deployment'
                    description: OK
    /apis/kraudcloud.com/v1/domains:
        get:
            operationId: listDomains
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Kraud.DomainList'
                    description: OK
        post:
            operationId: createDomain
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Kraud.DomainCreate'
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Kraud.Domain'
                    description: OK
                "401":
                    description: Unauthorized
    /apis/kraudcloud.com/v1/events/stream.json:
        get:
            description: Get events, one line per event
            operationId: getEventsStream
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/kraud.Event'
                    description: OK
    /apis/kraudcloud.com/v1/feeds:
        get:
            description: Get available feeds
            operationId: getFeeds
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/kraud.FeedList'
                    description: OK
        post:
            description: Create a new feed
            operationId: createFeed
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/kraud.CreateFeed'
                required: true
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/kraud.Feed'
                    description: OK
    /apis/kraudcloud.com/v1/feeds/{feed_id}/app:
        put:
            description: Update app from a feed
            operationId: putFeedApps
            parameters:
                - in: path
                  name: feed_id
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    multipart/form-data:
                        schema:
                            properties:
                                changelog:
                                    type: string
                                template:
                                    format: binary
                                    type: string
                            required:
                                - template
                                - changelog
                            type: object
            responses:
                201:
                    description: Created
    /apis/kraudcloud.com/v1/feeds/{feed_id}/apps:
        get:
            description: Get apps from a feed
            operationId: getFeedApps
            parameters:
                - in: path
                  name: feed_id
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/kraud.Feed'
                    description: OK
    /apis/kraudcloud.com/v1/feeds/{feed_id}/apps/{app_id}/launch:
        post:
            operationId: launchApp
            parameters:
                - description: feed uuid
                  in: path
                  name: feed_id
                  required: true
                  schema:
                    type: string
                - description: app uuid
                  in: path
                  name: app_id
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/kraud.LaunchSettings'
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/kraud.LaunchAppResponse'
                    description: OK. Launch in progress
    /apis/kraudcloud.com/v1/feeds/{feed_id}/apps/{app_id}/template:
        get:
            operationId: getFeedAppTemplate
            parameters:
                - description: feed uuid
                  in: path
                  name: feed_id
                  required: true
                  schema:
                    type: string
                - description: app uuid
                  in: path
                  name: app_id
                  required: true
                  schema:
                    type: string
                - description: Get template interpolated for a specific deployment
                  in: query
                  name: deployment
                  required: false
                  schema:
                    type: string
                - description: Get template interpolated for a specific namespace
                  in: query
                  name: namespace
                  required: false
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/kraud.AppOverview'
                    description: OK
    /apis/kraudcloud.com/v1/feeds/{feed_id}/versions/{app_name}:
        get:
            description: Get app versions from a feed
            operationId: getFeedAppVersions
            parameters:
                - in: path
                  name: feed_id
                  required: true
                  schema:
                    type: string
                - in: path
                  name: app_name
                  required: true
                  schema:
                    type: string
                - in: query
                  name: tail
                  required: false
                  schema:
                    type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/kraud.AppVersionList'
                    description: OK
    /apis/kraudcloud.com/v1/images:
        get:
            operationId: listImages
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Kraud.ImageNameList'
                    description: OK
        post:
            operationId: createImage
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                Architecture:
                                    type: string
                                Config:
                                    type: string
                                Layers:
                                    items:
                                        $ref: '#/components/schemas/Kraud.LayerReference'
                                    type: array
                                OciID:
                                    type: string
                                Ref:
                                    type: string
                            required:
                                - Ref
                                - OciID
                                - Config
                                - Architecture
                                - Layers
                            type: object
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Kraud.CreateImageResponse'
                    description: OK
                "401":
                    description: Unauthorized
    /apis/kraudcloud.com/v1/images/{q}:
        get:
            operationId: inspectImage
            parameters:
                - description: aid or ref or ociid
                  in: path
                  name: q
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Kraud.ImageName'
                    description: OK
    /apis/kraudcloud.com/v1/launch/{launch_id}/attach:
        get:
            operationId: attachLaunch
            parameters:
                - description: launch uuid
                  in: path
                  name: launch_id
                  required: true
                  schema:
                    type: string
            responses:
                101:
                    content:
                        application/json:
                            schema:
                                oneOf:
                                    - $ref: '#/components/schemas/kraud.WSLaunchLog'
                                    - $ref: '#/components/schemas/kraud.WSLaunchMeta'
                                type: object
                    description: Websocket upgrade
    /apis/kraudcloud.com/v1/layers:
        get:
            operationId: listLayers
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Kraud.LayerList'
                    description: OK
        post:
            operationId: createLayer
            parameters:
                - description: layer diff id according to OCI spec
                  in: query
                  name: oid
                  required: true
                  schema:
                    type: string
                - description: worst case byte size of layer. actual post body may be smaller but not bigger.
                  in: query
                  name: maxsize
                  required: true
                  schema:
                    format: uint64
                    type: integer
            responses:
                "200":
                    description: Not updated
                    schema:
                        $ref: '#/components/schemas/Kraud.Layer'
                "201":
                    description: Created
                    schema:
                        $ref: '#/components/schemas/Kraud.Layer'
                "202":
                    description: Created and renamed existing
                    schema:
                        $ref: '#/components/schemas/Kraud.Layer'
                "401":
                    description: Unauthorized
    /apis/kraudcloud.com/v1/pods:
        get:
            operationId: listKraudPods
            parameters:
                - description: include status
                  in: query
                  name: status
                  required: false
                  schema:
                    type: boolean
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Kraud.PodList'
                    description: OK
    /apis/kraudcloud.com/v1/pods/{q}:
        get:
            operationId: inspectKraudPod
            parameters:
                - description: include status
                  in: query
                  name: status
                  required: false
                  schema:
                    type: boolean
                - description: aid or uuid
                  in: path
                  name: q
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Kraud.Pod'
                    description: OK
        put:
            operationId: editKraudPod
            parameters:
                - description: aid or uuid
                  in: path
                  name: q
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Kraud.Pod'
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Kraud.Pod'
                    description: OK
    /apis/kraudcloud.com/v1/roles:
        get:
            operationId: listRoles
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Kraud.UserRoleList'
                    description: OK
    /apis/kraudcloud.com/v1/sessions/authorize:
        get:
            operationId: authorizeSession
            parameters:
                - description: ingress route id
                  example: deadbeef-1234-5678-90ab-cdef01234567
                  in: query
                  name: route_id
                  required: true
                  schema:
                    type: string
                - description: URL to redirect to after successful login, allows fully transparent authentication
                  example: https://example.com/admin/hello
                  in: query
                  name: return_to
                  schema:
                    type: string
            responses:
                302:
                    description: Redirect to ingress with the right payload
    /apis/kraudcloud.com/v1/sessions/logout:
        delete:
            operationId: deleteSession
            responses:
                204:
                    description: OK, user logged out
                400:
                    description: Bad request
                401:
                    description: Invalid session
                500:
                    description: Unexpected internal error
    /apis/kraudcloud.com/v1/sessions/whoami:
        get:
            operationId: whoami
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/kraud.SessionInfo'
                    description: OK
    /apis/kraudcloud.com/v1/tenant/billing:
        get:
            operationId: getBillingInfo
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BillingAddressWithContracts'
        put:
            operationId: updateBillingInfo
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BillingAddress'
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BillingAddress'
    /apis/kraudcloud.com/v1/tenant/tel/verify/{tel}/send:
        post:
            operationId: sendTelCode
            parameters:
                - in: path
                  name: tel
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                captcha_token:
                                    type: string
                            required:
                                - captcha_token
                            type: object
            responses:
                200:
                    description: OK
                400:
                    description: Invalid phone number
    /apis/kraudcloud.com/v1/tenant/tel/verify/{tel}/validate/{code}:
        post:
            operationId: validateTelCode
            parameters:
                - in: path
                  name: code
                  required: true
                  schema:
                    type: string
                - in: path
                  name: tel
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    description: OK
                404:
                    description: Code not found (or expired)
    /apis/kraudcloud.com/v1/users:
        get:
            operationId: listUsers
            parameters:
                - in: query
                  name: fieldSelector
                  schema:
                    type: string
                - in: query
                  name: labelSelector
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.UserList'
                    description: OK
        post:
            operationId: createUser
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/k8s.UserSpec'
                description: User to create
                required: true
            responses:
                201:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.User'
                    description: Created
    /apis/kraudcloud.com/v1/users/{uuid}:
        delete:
            operationId: deleteUser
            parameters:
                - in: path
                  name: uuid
                  required: true
                  schema:
                    type: string
            responses:
                204:
                    description: OK, user deleted
                404:
                    description: User not found
        get:
            operationId: getUser
            parameters:
                - in: path
                  name: uuid
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.User'
                    description: OK
    /apis/kraudcloud.com/v1/users/{uuid}/credentials/{name}/rotate:
        post:
            operationId: rotateUserCredentials
            parameters:
                - in: path
                  name: uuid
                  required: true
                  schema:
                    type: string
                - in: path
                  name: name
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/zip:
                            format: binary
                            type: string
                    description: OK
    /apis/kraudcloud.com/v1/users/{uuid}/credentials/rotate:
        post:
            operationId: rotateUserDefaultCredentials
            parameters:
                - in: path
                  name: uuid
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/zip:
                            schema:
                                format: binary
                                type: string
                    description: OK
    /apis/kraudcloud.com/v1/users/{uuid}/invite/{code}:
        get:
            operationId: getInviteCode
            parameters:
                - in: path
                  name: uuid
                  required: true
                  schema:
                    type: string
                - in: path
                  name: code
                  required: true
                  schema:
                    type: string
            responses:
                302:
                    description: Valid code, redirecting to signup
                404:
                    description: Code not found (or expired)
    /apis/kraudcloud.com/v1/users/{uuid}/roles:
        patch:
            operationId: updateUserRoles
            parameters:
                - in: path
                  name: uuid
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                roles:
                                    items:
                                        type: string
                                    type: array
                            required:
                                - roles
                            type: object
                description: roles to update
                required: true
            responses:
                201:
                    description: Updated
    /apis/kraudcloud.com/v1/users/{uuid}/token/{name}/rotate:
        post:
            operationId: rotateUserApiToken
            parameters:
                - in: path
                  name: uuid
                  required: true
                  schema:
                    type: string
                - in: path
                  name: name
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    content:
                        text/plain:
                            type: string
                    description: OK
    /apis/kraudcloud.com/v1/volumes:
        get:
            operationId: listKraudVolumes
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Kraud.VolumeList'
                    description: OK
    /apis/kraudcloud.com/v1/volumes/{q}:
        delete:
            operationId: deleteKraudVolume
            parameters:
                - description: aid or uuid
                  in: path
                  name: q
                  required: true
                  schema:
                    type: string
            responses:
                204:
                    description: OK
        get:
            operationId: inspectKraudVolume
            parameters:
                - description: aid or uuid
                  in: path
                  name: q
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Kraud.Volume'
                    description: OK
        put:
            operationId: editKraudVolume
            parameters:
                - description: aid or uuid
                  in: path
                  name: q
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Kraud.Volume'
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Kraud.Volume'
                    description: OK
    /apis/networking.k8s.io:
        get:
            operationId: getNetworkingAPIResources
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
                    description: OK
    /apis/networking.k8s.io/v1:
        get:
            operationId: getNetworkingV1APIResources
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
                    description: OK
    /apis/networking.k8s.io/v1/ingressclasses:
        get:
            operationId: listIngressClasses
            parameters:
                - in: query
                  name: fieldSelector
                  schema:
                    type: string
                - in: query
                  name: labelSelector
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.IngressClassList'
                    description: OK
    /apis/networking.k8s.io/v1/ingressclasses/{name}:
        get:
            operationId: getIngressClass
            parameters:
                - in: path
                  name: name
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.IngressClass'
                    description: OK
    /apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses:
        get:
            operationId: listIngresses
            parameters:
                - in: path
                  name: namespace
                  required: true
                  schema:
                    type: string
                - in: query
                  name: fieldSelector
                  schema:
                    type: string
                - in: query
                  name: labelSelector
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.IngressList'
                    description: OK
        post:
            operationId: createIngress
            parameters:
                - in: path
                  name: namespace
                  required: true
                  schema:
                    type: string
                - in: body
                  name: body
                  required: true
                  schema:
                    $ref: '#/components/schemas/k8s.Ingress'
            responses:
                "200":
                    description: OK
                    schema:
                        $ref: '#/components/schemas/k8s.Ingress'
                "201":
                    description: Created
                    schema:
                        $ref: '#/components/schemas/k8s.Ingress'
                "202":
                    description: Accepted
                    schema:
                        $ref: '#/components/schemas/k8s.Ingress'
                "401":
                    description: Unauthorized
    /apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}:
        delete:
            operationId: deleteIngress
            parameters:
                - in: path
                  name: namespace
                  required: true
                  schema:
                    type: string
                - in: path
                  name: name
                  required: true
                  schema:
                    type: string
            responses:
                204:
                    description: OK
        get:
            operationId: getIngress
            parameters:
                - in: path
                  name: namespace
                  required: true
                  schema:
                    type: string
                - in: path
                  name: name
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.Ingress'
                    description: OK
        patch:
            operationId: patchIngress
            parameters:
                - in: path
                  name: namespace
                  required: true
                  schema:
                    type: string
                - in: path
                  name: name
                  required: true
                  schema:
                    type: string
                - in: body
                  name: body
                  required: true
                  schema:
                    $ref: '#/components/schemas/k8s.Ingress'
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.Ingress'
                    description: OK
    /apis/storage.k8s.io/v1:
        get:
            operationId: getStorageV1APIResources
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
                    description: OK
    /apis/storage.k8s.io/v1/storageclasses:
        get:
            operationId: listStorageClasses
            parameters:
                - in: query
                  name: fieldSelector
                  schema:
                    type: string
                - in: query
                  name: labelSelector
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.StorageClassList'
                    description: OK
    /apis/storage.k8s.io/v1/storageclasses/{name}:
        get:
            operationId: getStorageClass
            parameters:
                - in: path
                  name: name
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/k8s.StorageClass'
                    description: OK
    /auth:
        post:
            consumes:
                - application/json
            description: |
                Validate credentials for a registry and, if available, get an identity
                token for accessing the registry without password.
            operationId: DockerSystemAuth
            parameters:
                - description: Authentication to check
                  in: body
                  name: authConfig
                  schema:
                    $ref: '#/components/schemas/AuthConfig'
            produces:
                - application/json
            responses:
                200:
                    description: An identity token was generated successfully.
                    examples:
                        application/json:
                            IdentityToken: 9cbaf023786cd7...
                            Status: Login Succeeded
                    schema:
                        properties:
                            IdentityToken:
                                description: An opaque token used to authenticate a user after a successful login
                                schema:
                                    type: string
                                x-nullable: false
                            Status:
                                description: The status of the authentication
                                schema:
                                    type: string
                                x-nullable: false
                        required:
                            - Status
                        schema:
                            type: object
                        title: SystemAuthResponse
                204:
                    description: No error
                500:
                    description: Server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Check auth configuration
            tags:
                - System
    /build:
        post:
            consumes:
                - application/octet-stream
            description: |
                Build an image from a tar archive with a `Dockerfile` in it.

                The `Dockerfile` specifies how the image is built from the tar archive. It is typically in the archive's root, but can be at a different path or have a different name by specifying the `dockerfile` parameter. [See the `Dockerfile` reference for more information](/engine/reference/builder/).

                The Docker daemon performs a preliminary validation of the `Dockerfile` before starting the build, and returns an error if the syntax is incorrect. After that, each instruction is run one-by-one until the ID of the new image is output.

                The build is canceled if the client drops the connection by quitting or being killed.
            operationId: DockerImageBuild
            parameters:
                - description: 'A tar archive compressed with one of the following algorithms: identity (no compression), gzip, bzip2, xz.'
                  in: body
                  name: inputStream
                  schema:
                    format: binary
                    schema:
                        type: string
                - default: Dockerfile
                  description: Path within the build context to the `Dockerfile`. This is ignored if `remote` is specified and points to an external `Dockerfile`.
                  in: query
                  name: dockerfile
                  schema:
                    type: string
                - description: A name and optional tag to apply to the image in the `name:tag` format. If you omit the tag the default `latest` value is assumed. You can provide several `t` parameters.
                  in: query
                  name: t
                  schema:
                    type: string
                - description: Extra hosts to add to /etc/hosts
                  in: query
                  name: extrahosts
                  schema:
                    type: string
                - description: A Git repository URI or HTTP/HTTPS context URI. If the URI points to a single text file, the file’s contents are placed into a file called `Dockerfile` and the image is built from that file. If the URI points to a tarball, the file is downloaded by the daemon and the contents therein used as the context for the build. If the URI points to a tarball and the `dockerfile` parameter is also specified, there must be a file with the corresponding path inside the tarball.
                  in: query
                  name: remote
                  schema:
                    type: string
                - default: false
                  description: Suppress verbose build output.
                  in: query
                  name: q
                  schema:
                    type: boolean
                - default: false
                  description: Do not use the cache when building the image.
                  in: query
                  name: nocache
                  schema:
                    type: boolean
                - description: JSON array of images used for build cache resolution.
                  in: query
                  name: cachefrom
                  schema:
                    type: string
                - description: Attempt to pull the image even if an older image exists locally.
                  in: query
                  name: pull
                  schema:
                    type: string
                - default: true
                  description: Remove intermediate containers after a successful build.
                  in: query
                  name: rm
                  schema:
                    type: boolean
                - default: false
                  description: Always remove intermediate containers, even upon failure.
                  in: query
                  name: forcerm
                  schema:
                    type: boolean
                - description: Set memory limit for build.
                  in: query
                  name: memory
                  schema:
                    type: integer
                - description: Total memory (memory + swap). Set as `-1` to disable swap.
                  in: query
                  name: memswap
                  schema:
                    type: integer
                - description: CPU shares (relative weight).
                  in: query
                  name: cpushares
                  schema:
                    type: integer
                - description: CPUs in which to allow execution (e.g., `0-3`, `0,1`).
                  in: query
                  name: cpusetcpus
                  schema:
                    type: string
                - description: The length of a CPU period in microseconds.
                  in: query
                  name: cpuperiod
                  schema:
                    type: integer
                - description: Microseconds of CPU time that the container can get in a CPU period.
                  in: query
                  name: cpuquota
                  schema:
                    type: integer
                - description: |
                    JSON map of string pairs for build-time variables. Users pass these values at build-time. Docker uses the buildargs as the environment context for commands run via the `Dockerfile` RUN instruction, or for variable expansion in other `Dockerfile` instructions. This is not meant for passing secret values.

                    For example, the build arg `FOO=bar` would become `{"FOO":"bar"}` in JSON. This would result in the query parameter `buildargs={"FOO":"bar"}`. Note that `{"FOO":"bar"}` should be URI component encoded.

                    [Read more about the buildargs instruction.](/engine/reference/builder/#arg)
                  in: query
                  name: buildargs
                  schema:
                    type: string
                - description: Size of `/dev/shm` in bytes. The size must be greater than 0. If omitted the system uses 64MB.
                  in: query
                  name: shmsize
                  schema:
                    type: integer
                - description: Squash the resulting images layers into a single layer. *(Experimental release only.)*
                  in: query
                  name: squash
                  schema:
                    type: boolean
                - description: Arbitrary key/value labels to set on the image, as a JSON map of string pairs.
                  in: query
                  name: labels
                  schema:
                    type: string
                - description: |
                    Sets the networking mode for the run commands during build. Supported
                    standard values are: `bridge`, `host`, `none`, and `container:<name|id>`.
                    Any other value is taken as a custom network's name or ID to which this
                    container should connect to.
                  in: query
                  name: networkmode
                  schema:
                    type: string
                - default: application/x-tar
                  enum:
                    - application/x-tar
                  in: header
                  name: Content-type
                  schema:
                    type: string
                - description: |
                    This is a base64-encoded JSON object with auth configurations for multiple registries that a build may refer to.

                    The key is a registry URL, and the value is an auth configuration object, [as described in the authentication section](#section/Authentication). For example:

                    ```
                    {
                      "docker.example.com": {
                        "username": "janedoe",
                        "password": "hunter2"
                      },
                      "https://index.docker.io/v1/": {
                        "username": "mobydock",
                        "password": "conta1n3rize14"
                      }
                    }
                    ```

                    Only the registry domain name (and port if not the default 443) are required. However, for legacy reasons, the Docker Hub registry must be specified with both a `https://` prefix and a `/v1/` suffix even though Docker will prefer to use the v2 registry API.
                  in: header
                  name: X-Registry-Config
                  schema:
                    type: string
                - default: ""
                  description: Platform in the format os[/arch[/variant]]
                  in: query
                  name: platform
                  schema:
                    type: string
                - default: ""
                  description: Target build stage
                  in: query
                  name: target
                  schema:
                    type: string
                - default: ""
                  description: BuildKit output configuration
                  in: query
                  name: outputs
                  schema:
                    type: string
            produces:
                - application/json
            responses:
                200:
                    description: no error
                400:
                    description: Bad parameter
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Build an image
            tags:
                - Image
    /build/prune:
        post:
            operationId: DockerBuildPrune
            parameters:
                - description: Amount of disk space in bytes to keep for cache
                  format: int64
                  in: query
                  name: keep-storage
                  schema:
                    type: integer
                - description: Remove all types of build cache
                  in: query
                  name: all
                  schema:
                    type: boolean
                - description: |
                    A JSON encoded value of the filters (a `map[string][]string`) to
                    process on the list of build cache objects.

                    Available filters:

                    - `until=<duration>`: duration relative to daemon's time, during which build cache was not used, in Go's duration format (e.g., '24h')
                    - `id=<id>`
                    - `parent=<id>`
                    - `type=<string>`
                    - `description=<string>`
                    - `inuse`
                    - `shared`
                    - `private`
                  in: query
                  name: filters
                  schema:
                    type: string
            produces:
                - application/json
            responses:
                200:
                    description: No error
                    schema:
                        properties:
                            CachesDeleted:
                                items:
                                    description: ID of build cache object
                                    schema:
                                        type: string
                                schema:
                                    type: array
                            SpaceReclaimed:
                                description: Disk space reclaimed in bytes
                                format: int64
                                schema:
                                    type: integer
                        schema:
                            type: object
                        title: BuildPruneResponse
                500:
                    description: Server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Delete builder cache
            tags:
                - Image
    /commit:
        post:
            consumes:
                - application/json
            operationId: DockerImageCommit
            parameters:
                - description: The container configuration
                  in: body
                  name: containerConfig
                  schema:
                    $ref: '#/components/schemas/ContainerConfig'
                - description: The ID or name of the container to commit
                  in: query
                  name: container
                  schema:
                    type: string
                - description: Repository name for the created image
                  in: query
                  name: repo
                  schema:
                    type: string
                - description: Tag name for the create image
                  in: query
                  name: tag
                  schema:
                    type: string
                - description: Commit message
                  in: query
                  name: comment
                  schema:
                    type: string
                - description: Author of the image (e.g., `John Hannibal Smith <hannibal@a-team.com>`)
                  in: query
                  name: author
                  schema:
                    type: string
                - default: true
                  description: Whether to pause the container before committing
                  in: query
                  name: pause
                  schema:
                    type: boolean
                - description: '`Dockerfile` instructions to apply while committing'
                  in: query
                  name: changes
                  schema:
                    type: string
            produces:
                - application/json
            responses:
                201:
                    description: no error
                    schema:
                        $ref: '#/components/schemas/IdResponse'
                404:
                    description: no such container
                    examples:
                        application/json:
                            message: 'No such container: c2ada9df5af8'
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Create a new image from a container
            tags:
                - Image
    /configs:
        get:
            operationId: DockerConfigList
            parameters:
                - description: |
                    A JSON encoded value of the filters (a `map[string][]string`) to
                    process on the configs list.

                    Available filters:

                    - `id=<config id>`
                    - `label=<key> or label=<key>=value`
                    - `name=<config name>`
                    - `names=<config name>`
                  in: query
                  name: filters
                  schema:
                    type: string
            produces:
                - application/json
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/Config'
                                    example:
                                        - CreatedAt: "2016-11-05T01:20:17.327670065Z"
                                          ID: ktnbjxoalbkvbvedmg1urrz8h
                                          Spec:
                                            Name: server.conf
                                          UpdatedAt: "2016-11-05T01:20:17.327670065Z"
                                          Version:
                                            Index: 11
                                type: array
                    description: no error
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                503:
                    description: node is not part of a swarm
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: List configs
            tags:
                - Config
    /configs/{id}:
        delete:
            operationId: DockerConfigDelete
            parameters:
                - description: ID of the config
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
            produces:
                - application/json
            responses:
                204:
                    description: no error
                404:
                    description: config not found
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                503:
                    description: node is not part of a swarm
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Delete a config
            tags:
                - Config
        get:
            operationId: DockerConfigInspect
            parameters:
                - description: ID of the config
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
            produces:
                - application/json
            responses:
                200:
                    description: no error
                    examples:
                        application/json:
                            CreatedAt: "2016-11-05T01:20:17.327670065Z"
                            ID: ktnbjxoalbkvbvedmg1urrz8h
                            Spec:
                                Name: app-dev.crt
                            UpdatedAt: "2016-11-05T01:20:17.327670065Z"
                            Version:
                                Index: 11
                    schema:
                        $ref: '#/components/schemas/Config'
                404:
                    description: config not found
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                503:
                    description: node is not part of a swarm
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Inspect a config
            tags:
                - Config
    /configs/{id}/update:
        post:
            operationId: DockerConfigUpdate
            parameters:
                - description: The ID or name of the config
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
                - description: |
                    The spec of the config to update. Currently, only the Labels field
                    can be updated. All other fields must remain unchanged from the
                    [ConfigInspect endpoint](#operation/ConfigInspect) response values.
                  in: body
                  name: body
                  schema:
                    $ref: '#/components/schemas/ConfigSpec'
                - description: |
                    The version number of the config object being updated. This is
                    required to avoid conflicting writes.
                  format: int64
                  in: query
                  name: version
                  required: true
                  schema:
                    type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: '#/components/schemas/ConfigSpec'
                                - example:
                                    Data: VEhJUyBJUyBOT1QgQSBSRUFMIENFUlRJRklDQVRFCg==
                                    Labels:
                                        foo: bar
                                    Name: server.conf
                                  type: object
            responses:
                200:
                    description: no error
                400:
                    description: bad parameter
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: no such config
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                503:
                    description: node is not part of a swarm
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Update a Config
            tags:
                - Config
    /configs/create:
        post:
            consumes:
                - application/json
            operationId: DockerConfigCreate
            produces:
                - application/json
            requestBody:
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: '#/components/schemas/ConfigSpec'
                                - example:
                                    Data: VEhJUyBJUyBOT1QgQSBSRUFMIENFUlRJRklDQVRFCg==
                                    Labels:
                                        foo: bar
                                    Name: server.conf
                                  type: object
            responses:
                201:
                    description: no error
                    schema:
                        $ref: '#/components/schemas/IdResponse'
                409:
                    description: name conflicts with an existing object
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                503:
                    description: node is not part of a swarm
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Create a config
            tags:
                - Config
    /containers/{id}:
        delete:
            operationId: DockerContainerDelete
            parameters:
                - description: ID or name of the container
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
                - default: false
                  description: Remove anonymous volumes associated with the container.
                  in: query
                  name: v
                  schema:
                    type: boolean
                - default: false
                  description: If the container is running, kill it before removing it.
                  in: query
                  name: force
                  schema:
                    type: boolean
                - default: false
                  description: Remove the specified link associated with the container.
                  in: query
                  name: link
                  schema:
                    type: boolean
            responses:
                204:
                    description: no error
                400:
                    description: bad parameter
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: no such container
                    examples:
                        application/json:
                            message: 'No such container: c2ada9df5af8'
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                409:
                    description: conflict
                    examples:
                        application/json:
                            message: |
                                You cannot remove a running container: c2ada9df5af8. Stop the
                                container before attempting removal or force remove
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Remove a container
            tags:
                - Container
    /containers/{id}/archive:
        get:
            description: Get a tar archive of a resource in the filesystem of container id.
            operationId: DockerContainerArchive
            parameters:
                - description: ID or name of the container
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
                - description: Resource in the container’s filesystem to archive.
                  in: query
                  name: path
                  required: true
                  schema:
                    type: string
            produces:
                - application/x-tar
            responses:
                200:
                    description: no error
                400:
                    description: Bad parameter
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: Container or path does not exist
                    examples:
                        application/json:
                            message: 'No such container: c2ada9df5af8'
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Get an archive of a filesystem resource in a container
            tags:
                - Container
        head:
            description: |
                A response header `X-Docker-Container-Path-Stat` is returned, containing
                a base64 - encoded JSON object with some filesystem header information
                about the path.
            operationId: DockerContainerArchiveInfo
            parameters:
                - description: ID or name of the container
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
                - description: Resource in the container’s filesystem to archive.
                  in: query
                  name: path
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    description: no error
                    headers:
                        X-Docker-Container-Path-Stat:
                            description: |
                                A base64 - encoded JSON object with some filesystem header
                                information about the path
                            schema:
                                type: string
                400:
                    description: Bad parameter
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: Container or path does not exist
                    examples:
                        application/json:
                            message: 'No such container: c2ada9df5af8'
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: Server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Get information about files in a container
            tags:
                - Container
        put:
            consumes:
                - application/x-tar
                - application/octet-stream
            description: |
                Upload a tar archive to be extracted to a path in the filesystem of container id.
                `path` parameter is asserted to be a directory. If it exists as a file, 400 error
                will be returned with message "not a directory".
            operationId: DockerPutContainerArchive
            parameters:
                - description: ID or name of the container
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
                - description: 'Path to a directory in the container to extract the archive’s contents into. '
                  in: query
                  name: path
                  required: true
                  schema:
                    type: string
                - description: |
                    If `1`, `true`, or `True` then it will be an error if unpacking the
                    given content would cause an existing directory to be replaced with
                    a non-directory and vice versa.
                  in: query
                  name: noOverwriteDirNonDir
                  schema:
                    type: string
                - description: |
                    If `1`, `true`, then it will copy UID/GID maps to the dest file or
                    dir
                  in: query
                  name: copyUIDGID
                  schema:
                    type: string
                - description: |
                    The input stream must be a tar archive compressed with one of the
                    following algorithms: `identity` (no compression), `gzip`, `bzip2`,
                    or `xz`.
                  in: body
                  name: inputStream
                  required: true
                  schema:
                    format: binary
                    schema:
                        type: string
            responses:
                200:
                    description: The content was extracted successfully
                400:
                    description: Bad parameter
                    examples:
                        application/json:
                            message: not a directory
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                403:
                    description: Permission denied, the volume or container rootfs is marked as read-only.
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: No such container or path does not exist inside the container
                    examples:
                        application/json:
                            message: 'No such container: c2ada9df5af8'
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: Server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Extract an archive of files or folders to a directory in a container
            tags:
                - Container
    /containers/{id}/attach:
        post:
            description: |
                Attach to a container to read its output or send it input. You can attach
                to the same container multiple times and you can reattach to containers
                that have been detached.

                Either the `stream` or `logs` parameter must be `true` for this endpoint
                to do anything.

                See the [documentation for the `docker attach` command](/engine/reference/commandline/attach/)
                for more details.

                ### Hijacking

                This endpoint hijacks the HTTP connection to transport `stdin`, `stdout`,
                and `stderr` on the same socket.

                This is the response from the daemon for an attach request:

                ```
                HTTP/1.1 200 OK
                Content-Type: application/vnd.docker.raw-stream

                [STREAM]
                ```

                After the headers and two new lines, the TCP connection can now be used
                for raw, bidirectional communication between the client and server.

                To hint potential proxies about connection hijacking, the Docker client
                can also optionally send connection upgrade headers.

                For example, the client sends this request to upgrade the connection:

                ```
                POST /containers/16253994b7c4/attach?stream=1&stdout=1 HTTP/1.1
                Upgrade: tcp
                Connection: Upgrade
                ```

                The Docker daemon will respond with a `101 UPGRADED` response, and will
                similarly follow with the raw stream:

                ```
                HTTP/1.1 101 UPGRADED
                Content-Type: application/vnd.docker.raw-stream
                Connection: Upgrade
                Upgrade: tcp

                [STREAM]
                ```

                ### Stream format

                When the TTY setting is disabled in [`POST /containers/create`](#operation/ContainerCreate),
                the stream over the hijacked connected is multiplexed to separate out
                `stdout` and `stderr`. The stream consists of a series of frames, each
                containing a header and a payload.

                The header contains the information which the stream writes (`stdout` or
                `stderr`). It also contains the size of the associated frame encoded in
                the last four bytes (`uint32`).

                It is encoded on the first eight bytes like this:

                ```go
                header := [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4}
                ```

                `STREAM_TYPE` can be:

                - 0: `stdin` (is written on `stdout`)
                - 1: `stdout`
                - 2: `stderr`

                `SIZE1, SIZE2, SIZE3, SIZE4` are the four bytes of the `uint32` size
                encoded as big endian.

                Following the header is the payload, which is the specified number of
                bytes of `STREAM_TYPE`.

                The simplest way to implement this protocol is the following:

                1. Read 8 bytes.
                2. Choose `stdout` or `stderr` depending on the first byte.
                3. Extract the frame size from the last four bytes.
                4. Read the extracted size and output it on the correct output.
                5. Goto 1.

                ### Stream format when using a TTY

                When the TTY setting is enabled in [`POST /containers/create`](#operation/ContainerCreate),
                the stream is not multiplexed. The data exchanged over the hijacked
                connection is simply the raw data from the process PTY and client's
                `stdin`.
            operationId: DockerContainerAttach
            parameters:
                - description: ID or name of the container
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
                - description: |
                    Override the key sequence for detaching a container.Format is a single
                    character `[a-Z]` or `ctrl-<value>` where `<value>` is one of: `a-z`,
                    `@`, `^`, `[`, `,` or `_`.
                  in: query
                  name: detachKeys
                  schema:
                    type: string
                - default: false
                  description: |
                    Replay previous logs from the container.

                    This is useful for attaching to a container that has started and you
                    want to output everything since the container started.

                    If `stream` is also enabled, once all the previous output has been
                    returned, it will seamlessly transition into streaming current
                    output.
                  in: query
                  name: logs
                  schema:
                    type: boolean
                - default: false
                  description: |
                    Stream attached streams from the time the request was made onwards.
                  in: query
                  name: stream
                  schema:
                    type: boolean
                - default: false
                  description: Attach to `stdin`
                  in: query
                  name: stdin
                  schema:
                    type: boolean
                - default: false
                  description: Attach to `stdout`
                  in: query
                  name: stdout
                  schema:
                    type: boolean
                - default: false
                  description: Attach to `stderr`
                  in: query
                  name: stderr
                  schema:
                    type: boolean
            produces:
                - application/vnd.docker.raw-stream
            responses:
                101:
                    description: no error, hints proxy about hijacking
                200:
                    description: no error, no upgrade header found
                400:
                    description: bad parameter
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: no such container
                    examples:
                        application/json:
                            message: 'No such container: c2ada9df5af8'
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Attach to a container
            tags:
                - Container
    /containers/{id}/attach/ws:
        get:
            operationId: DockerContainerAttachWebsocket
            parameters:
                - description: ID or name of the container
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
                - description: |
                    Override the key sequence for detaching a container.Format is a single
                    character `[a-Z]` or `ctrl-<value>` where `<value>` is one of: `a-z`,
                    `@`, `^`, `[`, `,`, or `_`.
                  in: query
                  name: detachKeys
                  schema:
                    type: string
                - default: false
                  description: Return logs
                  in: query
                  name: logs
                  schema:
                    type: boolean
                - default: false
                  description: Return stream
                  in: query
                  name: stream
                  schema:
                    type: boolean
            responses:
                101:
                    description: no error, hints proxy about hijacking
                200:
                    description: no error, no upgrade header found
                400:
                    description: bad parameter
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: no such container
                    examples:
                        application/json:
                            message: 'No such container: c2ada9df5af8'
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Attach to a container via a websocket
            tags:
                - Container
    /containers/{id}/changes:
        get:
            description: |
                Returns which files in a container's filesystem have been added, deleted,
                or modified. The `Kind` of modification can be one of:

                - `0`: Modified
                - `1`: Added
                - `2`: Deleted
            operationId: DockerContainerChanges
            parameters:
                - description: ID or name of the container
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
            produces:
                - application/json
            responses:
                200:
                    description: The list of changes
                    examples:
                        application/json:
                            - Kind: 0
                              Path: /dev
                            - Kind: 1
                              Path: /dev/kmsg
                            - Kind: 1
                              Path: /test
                    schema:
                        items:
                            description: change item in response to ContainerChanges operation
                            properties:
                                Kind:
                                    description: Kind of change
                                    enum:
                                        - 0
                                        - 1
                                        - 2
                                    format: uint8
                                    schema:
                                        type: integer
                                    x-nullable: false
                                Path:
                                    description: Path to file that has changed
                                    schema:
                                        type: string
                                    x-nullable: false
                            required:
                                - Path
                                - Kind
                            schema:
                                type: object
                            title: ContainerChangeResponseItem
                            x-go-name: ContainerChangeResponseItem
                        schema:
                            type: array
                404:
                    description: no such container
                    examples:
                        application/json:
                            message: 'No such container: c2ada9df5af8'
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Get changes on a container’s filesystem
            tags:
                - Container
    /containers/{id}/exec:
        post:
            consumes:
                - application/json
            description: Run a command inside a running container.
            operationId: DockerContainerExec
            parameters:
                - description: Exec configuration
                  in: body
                  name: execConfig
                  required: true
                  schema:
                    example:
                        AttachStderr: true
                        AttachStdin: false
                        AttachStdout: true
                        Cmd:
                            - date
                        DetachKeys: ctrl-p,ctrl-q
                        Env:
                            - FOO=bar
                            - BAZ=quux
                        Tty: false
                    properties:
                        AttachStderr:
                            description: Attach to `stderr` of the exec command.
                            schema:
                                type: boolean
                        AttachStdin:
                            description: Attach to `stdin` of the exec command.
                            schema:
                                type: boolean
                        AttachStdout:
                            description: Attach to `stdout` of the exec command.
                            schema:
                                type: boolean
                        Cmd:
                            description: Command to run, as a string or array of strings.
                            items:
                                schema:
                                    type: string
                            schema:
                                type: array
                        DetachKeys:
                            description: |
                                Override the key sequence for detaching a container. Format is
                                a single character `[a-Z]` or `ctrl-<value>` where `<value>`
                                is one of: `a-z`, `@`, `^`, `[`, `,` or `_`.
                            schema:
                                type: string
                        Env:
                            description: |
                                A list of environment variables in the form `["VAR=value", ...]`.
                            items:
                                schema:
                                    type: string
                            schema:
                                type: array
                        Privileged:
                            default: false
                            description: Runs the exec process with extended privileges.
                            schema:
                                type: boolean
                        Tty:
                            description: Allocate a pseudo-TTY.
                            schema:
                                type: boolean
                        User:
                            description: |
                                The user, and optionally, group to run the exec process inside
                                the container. Format is one of: `user`, `user:group`, `uid`,
                                or `uid:gid`.
                            schema:
                                type: string
                        WorkingDir:
                            description: |
                                The working directory for the exec process inside the container.
                            schema:
                                type: string
                    schema:
                        type: object
                    title: ExecConfig
                - description: ID or name of container
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
            produces:
                - application/json
            responses:
                201:
                    description: no error
                    schema:
                        $ref: '#/components/schemas/IdResponse'
                404:
                    description: no such container
                    examples:
                        application/json:
                            message: 'No such container: c2ada9df5af8'
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                409:
                    description: container is paused
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: Server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Create an exec instance
            tags:
                - Exec
    /containers/{id}/export:
        get:
            description: Export the contents of a container as a tarball.
            operationId: DockerContainerExport
            parameters:
                - description: ID or name of the container
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
            produces:
                - application/octet-stream
            responses:
                200:
                    description: no error
                404:
                    description: no such container
                    examples:
                        application/json:
                            message: 'No such container: c2ada9df5af8'
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Export a container
            tags:
                - Container
    /containers/{id}/json:
        get:
            description: Return low-level information about a container.
            operationId: DockerContainerInspect
            parameters:
                - description: ID or name of the container
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
                - default: false
                  description: Return the size of container as fields `SizeRw` and `SizeRootFs`
                  in: query
                  name: size
                  schema:
                    type: boolean
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ContainerInspectResponse'
                    description: no error
                404:
                    description: no such container
                    examples:
                        application/json:
                            message: 'No such container: c2ada9df5af8'
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Inspect a container
            tags:
                - Container
    /containers/{id}/kill:
        post:
            description: |
                Send a POSIX signal to a container, defaulting to killing to the
                container.
            operationId: DockerContainerKill
            parameters:
                - description: ID or name of the container
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
                - default: SIGKILL
                  description: Signal to send to the container as an integer or string (e.g. `SIGINT`)
                  in: query
                  name: signal
                  schema:
                    type: string
            responses:
                204:
                    description: no error
                404:
                    description: no such container
                    examples:
                        application/json:
                            message: 'No such container: c2ada9df5af8'
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                409:
                    description: container is not running
                    examples:
                        application/json:
                            message: Container d37cde0fe4ad63c3a7252023b2f9800282894247d145cb5933ddf6e52cc03a28 is not running
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Kill a container
            tags:
                - Container
    /containers/{id}/logs:
        get:
            description: |
                Get `stdout` and `stderr` logs from a container.

                Note: This endpoint works only for containers with the `json-file` or
                `journald` logging driver.
            operationId: DockerContainerLogs
            parameters:
                - description: ID or name of the container
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
                - default: false
                  description: Keep connection after returning logs.
                  in: query
                  name: follow
                  schema:
                    type: boolean
                - default: false
                  description: Return logs from `stdout`
                  in: query
                  name: stdout
                  schema:
                    type: boolean
                - default: false
                  description: Return logs from `stderr`
                  in: query
                  name: stderr
                  schema:
                    type: boolean
                - default: 0
                  description: Only return logs since this time, as a UNIX timestamp
                  in: query
                  name: since
                  schema:
                    type: integer
                - default: 0
                  description: Only return logs before this time, as a UNIX timestamp
                  in: query
                  name: until
                  schema:
                    type: integer
                - default: false
                  description: Add timestamps to every log line
                  in: query
                  name: timestamps
                  schema:
                    type: boolean
                - default: all
                  description: |
                    Only return this number of log lines from the end of the logs.
                    Specify as an integer or `all` to output all log lines.
                  in: query
                  name: tail
                  schema:
                    type: string
            responses:
                200:
                    description: |
                        logs returned as a stream in response body.
                        For the stream format, [see the documentation for the attach endpoint](#operation/ContainerAttach).
                        Note that unlike the attach endpoint, the logs endpoint does not
                        upgrade the connection and does not set Content-Type.
                    schema:
                        format: binary
                        schema:
                            type: string
                404:
                    description: no such container
                    examples:
                        application/json:
                            message: 'No such container: c2ada9df5af8'
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Get container logs
            tags:
                - Container
    /containers/{id}/pause:
        post:
            description: |
                Use the freezer cgroup to suspend all processes in a container.

                Traditionally, when suspending a process the `SIGSTOP` signal is used,
                which is observable by the process being suspended. With the freezer
                cgroup the process is unaware, and unable to capture, that it is being
                suspended, and subsequently resumed.
            operationId: DockerContainerPause
            parameters:
                - description: ID or name of the container
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
            responses:
                204:
                    description: no error
                404:
                    description: no such container
                    examples:
                        application/json:
                            message: 'No such container: c2ada9df5af8'
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Pause a container
            tags:
                - Container
    /containers/{id}/rename:
        post:
            operationId: DockerContainerRename
            parameters:
                - description: ID or name of the container
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
                - description: New name for the container
                  in: query
                  name: name
                  required: true
                  schema:
                    type: string
            responses:
                204:
                    description: no error
                404:
                    description: no such container
                    examples:
                        application/json:
                            message: 'No such container: c2ada9df5af8'
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                409:
                    description: name already in use
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Rename a container
            tags:
                - Container
    /containers/{id}/resize:
        post:
            consumes:
                - application/octet-stream
            description: Resize the TTY for a container.
            operationId: DockerContainerResize
            parameters:
                - description: ID or name of the container
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
                - description: Height of the TTY session in characters
                  in: query
                  name: h
                  schema:
                    type: integer
                - description: Width of the TTY session in characters
                  in: query
                  name: w
                  schema:
                    type: integer
            produces:
                - text/plain
            responses:
                200:
                    description: no error
                404:
                    description: no such container
                    examples:
                        application/json:
                            message: 'No such container: c2ada9df5af8'
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: cannot resize container
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Resize a container TTY
            tags:
                - Container
    /containers/{id}/restart:
        post:
            operationId: DockerContainerRestart
            parameters:
                - description: ID or name of the container
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
                - description: Number of seconds to wait before killing the container
                  in: query
                  name: t
                  schema:
                    type: integer
            responses:
                204:
                    description: no error
                404:
                    description: no such container
                    examples:
                        application/json:
                            message: 'No such container: c2ada9df5af8'
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Restart a container
            tags:
                - Container
    /containers/{id}/start:
        post:
            operationId: DockerContainerStart
            parameters:
                - description: ID or name of the container
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
                - description: |
                    Override the key sequence for detaching a container. Format is a
                    single character `[a-Z]` or `ctrl-<value>` where `<value>` is one
                    of: `a-z`, `@`, `^`, `[`, `,` or `_`.
                  in: query
                  name: detachKeys
                  schema:
                    type: string
            responses:
                204:
                    description: no error
                304:
                    description: container already started
                404:
                    description: no such container
                    examples:
                        application/json:
                            message: 'No such container: c2ada9df5af8'
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Start a container
            tags:
                - Container
    /containers/{id}/stats:
        get:
            description: |
                This endpoint returns a live stream of a container’s resource usage
                statistics.

                The `precpu_stats` is the CPU statistic of the *previous* read, and is
                used to calculate the CPU usage percentage. It is not an exact copy
                of the `cpu_stats` field.

                If either `precpu_stats.online_cpus` or `cpu_stats.online_cpus` is
                nil then for compatibility with older daemons the length of the
                corresponding `cpu_usage.percpu_usage` array should be used.

                On a cgroup v2 host, the following fields are not set
                * `blkio_stats`: all fields other than `io_service_bytes_recursive`
                * `cpu_stats`: `cpu_usage.percpu_usage`
                * `memory_stats`: `max_usage` and `failcnt`
                Also, `memory_stats.stats` fields are incompatible with cgroup v1.

                To calculate the values shown by the `stats` command of the docker cli tool
                the following formulas can be used:
                * used_memory = `memory_stats.usage - memory_stats.stats.cache`
                * available_memory = `memory_stats.limit`
                * Memory usage % = `(used_memory / available_memory) * 100.0`
                * cpu_delta = `cpu_stats.cpu_usage.total_usage - precpu_stats.cpu_usage.total_usage`
                * system_cpu_delta = `cpu_stats.system_cpu_usage - precpu_stats.system_cpu_usage`
                * number_cpus = `lenght(cpu_stats.cpu_usage.percpu_usage)` or `cpu_stats.online_cpus`
                * CPU usage % = `(cpu_delta / system_cpu_delta) * number_cpus * 100.0`
            operationId: DockerContainerStats
            parameters:
                - description: ID or name of the container
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
                - default: true
                  description: |
                    Stream the output. If false, the stats will be output once and then
                    it will disconnect.
                  in: query
                  name: stream
                  schema:
                    type: boolean
                - default: false
                  description: |
                    Only get a single stat instead of waiting for 2 cycles. Must be used
                    with `stream=false`.
                  in: query
                  name: one-shot
                  schema:
                    type: boolean
            produces:
                - application/json
            responses:
                200:
                    description: no error
                    examples:
                        application/json:
                            blkio_stats: {}
                            cpu_stats:
                                cpu_usage:
                                    percpu_usage:
                                        - 8646879
                                        - 24472255
                                        - 36438778
                                        - 30657443
                                    total_usage: 100215355
                                    usage_in_kernelmode: 30000000
                                    usage_in_usermode: 50000000
                                online_cpus: 4
                                system_cpu_usage: 739306590000000
                                throttling_data:
                                    periods: 0
                                    throttled_periods: 0
                                    throttled_time: 0
                            memory_stats:
                                failcnt: 0
                                limit: 67108864
                                max_usage: 6651904
                                stats:
                                    active_anon: 6537216
                                    active_file: 0
                                    cache: 0
                                    hierarchical_memory_limit: 67108864
                                    inactive_anon: 0
                                    inactive_file: 0
                                    mapped_file: 0
                                    pgfault: 964
                                    pgmajfault: 0
                                    pgpgin: 477
                                    pgpgout: 414
                                    rss: 6537216
                                    rss_huge: 6291456
                                    total_active_anon: 6537216
                                    total_active_file: 0
                                    total_cache: 0
                                    total_inactive_anon: 0
                                    total_inactive_file: 0
                                    total_mapped_file: 0
                                    total_pgfault: 964
                                    total_pgmajfault: 0
                                    total_pgpgin: 477
                                    total_pgpgout: 414
                                    total_rss: 6537216
                                    total_rss_huge: 6291456
                                    total_unevictable: 0
                                    total_writeback: 0
                                    unevictable: 0
                                    writeback: 0
                                usage: 6537216
                            networks:
                                eth0:
                                    rx_bytes: 5338
                                    rx_dropped: 0
                                    rx_errors: 0
                                    rx_packets: 36
                                    tx_bytes: 648
                                    tx_dropped: 0
                                    tx_errors: 0
                                    tx_packets: 8
                                eth5:
                                    rx_bytes: 4641
                                    rx_dropped: 0
                                    rx_errors: 0
                                    rx_packets: 26
                                    tx_bytes: 690
                                    tx_dropped: 0
                                    tx_errors: 0
                                    tx_packets: 9
                            pids_stats:
                                current: 3
                            precpu_stats:
                                cpu_usage:
                                    percpu_usage:
                                        - 8646879
                                        - 24350896
                                        - 36438778
                                        - 30657443
                                    total_usage: 100093996
                                    usage_in_kernelmode: 30000000
                                    usage_in_usermode: 50000000
                                online_cpus: 4
                                system_cpu_usage: 9492140000000
                                throttling_data:
                                    periods: 0
                                    throttled_periods: 0
                                    throttled_time: 0
                            read: "2015-01-08T22:57:31.547920715Z"
                    schema:
                        schema:
                            type: object
                404:
                    description: no such container
                    examples:
                        application/json:
                            message: 'No such container: c2ada9df5af8'
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Get container stats based on resource usage
            tags:
                - Container
    /containers/{id}/stop:
        post:
            operationId: DockerContainerStop
            parameters:
                - description: ID or name of the container
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
                - description: Number of seconds to wait before killing the container
                  in: query
                  name: t
                  schema:
                    type: integer
            responses:
                204:
                    description: no error
                304:
                    description: container already stopped
                404:
                    description: no such container
                    examples:
                        application/json:
                            message: 'No such container: c2ada9df5af8'
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Stop a container
            tags:
                - Container
    /containers/{id}/top:
        get:
            description: |
                On Unix systems, this is done by running the `ps` command. This endpoint
                is not supported on Windows.
            operationId: DockerContainerTop
            parameters:
                - description: ID or name of the container
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
                - default: -ef
                  description: The arguments to pass to `ps`. For example, `aux`
                  in: query
                  name: ps_args
                  schema:
                    type: string
            responses:
                200:
                    description: no error
                    examples:
                        application/json:
                            Processes:
                                - - root
                                  - "13642"
                                  - "882"
                                  - "0"
                                  - "17:03"
                                  - pts/0
                                  - "00:00:00"
                                  - /bin/bash
                                - - root
                                  - "13735"
                                  - "13642"
                                  - "0"
                                  - "17:06"
                                  - pts/0
                                  - "00:00:00"
                                  - sleep 10
                            Titles:
                                - UID
                                - PID
                                - PPID
                                - C
                                - STIME
                                - TTY
                                - TIME
                                - CMD
                    schema:
                        description: OK response to ContainerTop operation
                        properties:
                            Processes:
                                description: |
                                    Each process running in the container, where each is process
                                    is an array of values corresponding to the titles.
                                items:
                                    items:
                                        schema:
                                            type: string
                                    schema:
                                        type: array
                                schema:
                                    type: array
                            Titles:
                                description: The ps column titles
                                items:
                                    schema:
                                        type: string
                                schema:
                                    type: array
                        schema:
                            type: object
                        title: ContainerTopResponse
                404:
                    description: no such container
                    examples:
                        application/json:
                            message: 'No such container: c2ada9df5af8'
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: List processes running inside a container
            tags:
                - Container
    /containers/{id}/unpause:
        post:
            description: Resume a container which has been paused.
            operationId: DockerContainerUnpause
            parameters:
                - description: ID or name of the container
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
            responses:
                204:
                    description: no error
                404:
                    description: no such container
                    examples:
                        application/json:
                            message: 'No such container: c2ada9df5af8'
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Unpause a container
            tags:
                - Container
    /containers/{id}/update:
        post:
            consumes:
                - application/json
            description: |
                Change various configuration options of a container without having to
                recreate it.
            operationId: DockerContainerUpdate
            parameters:
                - description: ID or name of the container
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
                - in: body
                  name: update
                  required: true
                  schema:
                    allOf:
                        - $ref: '#/components/schemas/Resources'
                        - properties:
                            RestartPolicy:
                                $ref: '#/components/schemas/RestartPolicy'
                          type: object
                    example:
                        BlkioWeight: 300
                        CpuPeriod: 100000
                        CpuQuota: 50000
                        CpuRealtimePeriod: 1000000
                        CpuRealtimeRuntime: 10000
                        CpuShares: 512
                        CpusetCpus: 0,1
                        CpusetMems: "0"
                        KernelMemory: 52428800
                        Memory: 314572800
                        MemoryReservation: 209715200
                        MemorySwap: 514288000
                        RestartPolicy:
                            MaximumRetryCount: 4
                            Name: on-failure
            produces:
                - application/json
            responses:
                200:
                    description: The container has been updated.
                    schema:
                        description: OK response to ContainerUpdate operation
                        properties:
                            Warnings:
                                items:
                                    schema:
                                        type: string
                                schema:
                                    type: array
                        schema:
                            type: object
                        title: ContainerUpdateResponse
                404:
                    description: no such container
                    examples:
                        application/json:
                            message: 'No such container: c2ada9df5af8'
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Update a container
            tags:
                - Container
    /containers/{id}/wait:
        post:
            description: Block until a container stops, then returns the exit code.
            operationId: DockerContainerWait
            parameters:
                - description: ID or name of the container
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
                - default: not-running
                  description: |
                    Wait until a container state reaches the given condition.

                    Defaults to `not-running` if omitted or empty.
                  enum:
                    - not-running
                    - next-exit
                    - removed
                  in: query
                  name: condition
                  schema:
                    type: string
            produces:
                - application/json
            responses:
                200:
                    description: The container has exit.
                    schema:
                        $ref: '#/components/schemas/ContainerWaitResponse'
                400:
                    description: bad parameter
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: no such container
                    examples:
                        application/json:
                            message: 'No such container: c2ada9df5af8'
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Wait for a container
            tags:
                - Container
    /containers/create:
        post:
            consumes:
                - application/json
                - application/octet-stream
            operationId: DockerContainerCreate
            parameters:
                - description: |
                    Assign the specified name to the container. Must match
                    `/?[a-zA-Z0-9][a-zA-Z0-9_.-]+`.
                  in: query
                  name: name
                  pattern: ^/?[a-zA-Z0-9][a-zA-Z0-9_.-]+$
                  schema:
                    type: string
            produces:
                - application/json
            requestBody:
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: '#/components/schemas/ContainerConfig'
                                - properties:
                                    HostConfig:
                                        $ref: '#/components/schemas/HostConfig'
                                    NetworkingConfig:
                                        $ref: '#/components/schemas/NetworkingConfig'
                                  type: object
                    example:
                        AttachStderr: true
                        AttachStdin: false
                        AttachStdout: true
                        Cmd:
                            - date
                        Domainname: ""
                        Entrypoint: ""
                        Env:
                            - FOO=bar
                            - BAZ=quux
                        ExposedPorts:
                            22/tcp: {}
                        HostConfig:
                            AutoRemove: true
                            Binds:
                                - /tmp:/tmp
                            BlkioDeviceReadBps:
                                - {}
                            BlkioDeviceReadIOps:
                                - {}
                            BlkioDeviceWriteBps:
                                - {}
                            BlkioDeviceWriteIOps:
                                - {}
                            BlkioWeight: 300
                            BlkioWeightDevice:
                                - {}
                            CapAdd:
                                - NET_ADMIN
                            CapDrop:
                                - MKNOD
                            CgroupParent: ""
                            CpuPercent: 80
                            CpuPeriod: 100000
                            CpuQuota: 50000
                            CpuRealtimePeriod: 1000000
                            CpuRealtimeRuntime: 10000
                            CpuShares: 512
                            CpusetCpus: 0,1
                            CpusetMems: 0,1
                            DeviceRequests:
                                - Capabilities:
                                    - - gpu
                                      - nvidia
                                      - compute
                                  Count: -1
                                  DeviceIDs":
                                    - "0"
                                    - "1"
                                    - GPU-fef8089b-4820-abfc-e83e-94318197576e
                                  Driver: nvidia
                                  Options:
                                    property1: string
                                    property2: string
                            Devices: []
                            Dns:
                                - 8.8.8.8
                            DnsOptions:
                                - ""
                            DnsSearch:
                                - ""
                            GroupAdd:
                                - newgroup
                            KernelMemory: 0
                            Links:
                                - redis3:redis
                            LogConfig:
                                Config: {}
                                Type: json-file
                            MaximumIOBps: 0
                            MaximumIOps: 0
                            Memory: 0
                            MemoryReservation: 0
                            MemorySwap: 0
                            MemorySwappiness: 60
                            NanoCpus: 500000
                            NetworkMode: bridge
                            OomKillDisable: false
                            OomScoreAdj: 500
                            PidMode: ""
                            PidsLimit: 0
                            PortBindings:
                                22/tcp:
                                    - HostPort: "11022"
                            Privileged: false
                            PublishAllPorts: false
                            ReadonlyRootfs: false
                            RestartPolicy:
                                MaximumRetryCount: 0
                                Name: ""
                            SecurityOpt: []
                            ShmSize: 67108864
                            StorageOpt: {}
                            Ulimits:
                                - {}
                            VolumeDriver: ""
                            VolumesFrom:
                                - parent
                                - other:ro
                        Hostname: ""
                        Image: ubuntu
                        Labels:
                            com.example.license: GPL
                            com.example.vendor: Acme
                            com.example.version: "1.0"
                        MacAddress: 12:34:56:78:9a:bc
                        NetworkDisabled: false
                        NetworkingConfig:
                            EndpointsConfig:
                                isolated_nw:
                                    Aliases:
                                        - server_x
                                        - server_y
                                    IPAMConfig:
                                        IPv4Address: 172.20.30.33
                                        IPv6Address: 2001:db8:abcd::3033
                                        LinkLocalIPs:
                                            - 169.254.34.68
                                            - fe80::3468
                                    Links:
                                        - container_1
                                        - container_2
                        OpenStdin: false
                        StdinOnce: false
                        StopSignal: SIGTERM
                        StopTimeout: 10
                        Tty: false
                        User: ""
                        Volumes:
                            /volumes/data: {}
                        WorkingDir: ""
                required: true
            responses:
                201:
                    description: Container created successfully
                    examples:
                        application/json:
                            Id: e90e34656806
                            Warnings: []
                    schema:
                        description: OK response to ContainerCreate operation
                        properties:
                            Id:
                                description: The ID of the created container
                                schema:
                                    type: string
                                x-nullable: false
                            Warnings:
                                description: Warnings encountered when creating the container
                                items:
                                    schema:
                                        type: string
                                schema:
                                    type: array
                                x-nullable: false
                        required:
                            - Id
                            - Warnings
                        schema:
                            type: object
                        title: ContainerCreateResponse
                400:
                    description: bad parameter
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: no such image
                    examples:
                        application/json:
                            message: 'No such image: c2ada9df5af8'
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                409:
                    description: conflict
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Create a container
            tags:
                - Container
    /containers/json:
        get:
            description: |
                Returns a list of containers. For details on the format, see the
                [inspect endpoint](#operation/ContainerInspect).

                Note that it uses a different, smaller representation of a container
                than inspecting a single container. For example, the list of linked
                containers is not propagated .
            operationId: DockerContainerList
            parameters:
                - default: false
                  description: |
                    Return all containers. By default, only running containers are shown.
                  in: query
                  name: all
                  schema:
                    type: boolean
                - description: |
                    Return this number of most recently created containers, including
                    non-running ones.
                  in: query
                  name: limit
                  schema:
                    type: integer
                - default: false
                  description: |
                    Return the size of container as fields `SizeRw` and `SizeRootFs`.
                  in: query
                  name: size
                  schema:
                    type: boolean
                - description: |
                    Filters to process on the container list, encoded as JSON (a
                    `map[string][]string`). For example, `{"status": ["paused"]}` will
                    only return paused containers.

                    Available filters:

                    - `ancestor`=(`<image-name>[:<tag>]`, `<image id>`, or `<image@digest>`)
                    - `before`=(`<container id>` or `<container name>`)
                    - `expose`=(`<port>[/<proto>]`|`<startport-endport>/[<proto>]`)
                    - `exited=<int>` containers with exit code of `<int>`
                    - `health`=(`starting`|`healthy`|`unhealthy`|`none`)
                    - `id=<ID>` a container's ID
                    - `isolation=`(`default`|`process`|`hyperv`) (Windows daemon only)
                    - `is-task=`(`true`|`false`)
                    - `label=key` or `label="key=value"` of a container label
                    - `name=<name>` a container's name
                    - `network`=(`<network id>` or `<network name>`)
                    - `publish`=(`<port>[/<proto>]`|`<startport-endport>/[<proto>]`)
                    - `since`=(`<container id>` or `<container name>`)
                    - `status=`(`created`|`restarting`|`running`|`removing`|`paused`|`exited`|`dead`)
                    - `volume`=(`<volume name>` or `<mount point destination>`)
                  in: query
                  name: filters
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/ContainerSummary'
                                type: array
                    description: no error
                    examples:
                        application/json:
                            - Command: echo 1
                              Created: 1367854155
                              HostConfig:
                                NetworkMode: default
                              Id: 8dfafdbc3a40
                              Image: ubuntu:latest
                              ImageID: d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82
                              Labels:
                                com.example.license: GPL
                                com.example.vendor: Acme
                                com.example.version: "1.0"
                              Mounts:
                                - Destination: /data
                                  Driver: local
                                  Mode: ro,Z
                                  Name: fac362...80535
                                  Propagation: ""
                                  RW: false
                                  Source: /data
                              Names:
                                - /boring_feynman
                              NetworkSettings:
                                Networks:
                                    bridge:
                                        EndpointID: 2cdc4edb1ded3631c81f57966563e5c8525b81121bb3706a9a9a3ae102711f3f
                                        Gateway: 172.17.0.1
                                        GlobalIPv6Address: ""
                                        GlobalIPv6PrefixLen: 0
                                        IPAddress: 172.17.0.2
                                        IPPrefixLen: 16
                                        IPv6Gateway: ""
                                        MacAddress: 02:42:ac:11:00:02
                                        NetworkID: 7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812
                              Ports:
                                - PrivatePort: 2222
                                  PublicPort: 3333
                                  Type: tcp
                              SizeRootFs: 0
                              SizeRw: 12288
                              State: Exited
                              Status: Exit 0
                            - Command: echo 222222
                              Created: 1367854155
                              HostConfig:
                                NetworkMode: default
                              Id: 9cd87474be90
                              Image: ubuntu:latest
                              ImageID: d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82
                              Labels: {}
                              Mounts: []
                              Names:
                                - /coolName
                              NetworkSettings:
                                Networks:
                                    bridge:
                                        EndpointID: 88eaed7b37b38c2a3f0c4bc796494fdf51b270c2d22656412a2ca5d559a64d7a
                                        Gateway: 172.17.0.1
                                        GlobalIPv6Address: ""
                                        GlobalIPv6PrefixLen: 0
                                        IPAddress: 172.17.0.8
                                        IPPrefixLen: 16
                                        IPv6Gateway: ""
                                        MacAddress: 02:42:ac:11:00:08
                                        NetworkID: 7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812
                              Ports: []
                              SizeRootFs: 0
                              SizeRw: 12288
                              State: Exited
                              Status: Exit 0
                            - Command: echo 3333333333333333
                              Created: 1367854154
                              HostConfig:
                                NetworkMode: default
                              Id: 3176a2479c92
                              Image: ubuntu:latest
                              ImageID: d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82
                              Labels: {}
                              Mounts: []
                              Names:
                                - /sleepy_dog
                              NetworkSettings:
                                Networks:
                                    bridge:
                                        EndpointID: 8b27c041c30326d59cd6e6f510d4f8d1d570a228466f956edf7815508f78e30d
                                        Gateway: 172.17.0.1
                                        GlobalIPv6Address: ""
                                        GlobalIPv6PrefixLen: 0
                                        IPAddress: 172.17.0.6
                                        IPPrefixLen: 16
                                        IPv6Gateway: ""
                                        MacAddress: 02:42:ac:11:00:06
                                        NetworkID: 7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812
                              Ports: []
                              SizeRootFs: 0
                              SizeRw: 12288
                              State: Exited
                              Status: Exit 0
                            - Command: echo 444444444444444444444444444444444
                              Created: 1367854152
                              HostConfig:
                                NetworkMode: default
                              Id: 4cb07b47f9fb
                              Image: ubuntu:latest
                              ImageID: d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82
                              Labels: {}
                              Mounts: []
                              Names:
                                - /running_cat
                              NetworkSettings:
                                Networks:
                                    bridge:
                                        EndpointID: d91c7b2f0644403d7ef3095985ea0e2370325cd2332ff3a3225c4247328e66e9
                                        Gateway: 172.17.0.1
                                        GlobalIPv6Address: ""
                                        GlobalIPv6PrefixLen: 0
                                        IPAddress: 172.17.0.5
                                        IPPrefixLen: 16
                                        IPv6Gateway: ""
                                        MacAddress: 02:42:ac:11:00:05
                                        NetworkID: 7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812
                              Ports: []
                              SizeRootFs: 0
                              SizeRw: 12288
                              State: Exited
                              Status: Exit 0
                400:
                    description: bad parameter
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: List containers
            tags:
                - Container
    /containers/prune:
        post:
            operationId: DockerContainerPrune
            parameters:
                - description: |
                    Filters to process on the prune list, encoded as JSON (a `map[string][]string`).

                    Available filters:
                    - `until=<timestamp>` Prune containers created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machine’s time.
                    - `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune containers with (or without, in case `label!=...` is used) the specified labels.
                  in: query
                  name: filters
                  schema:
                    type: string
            produces:
                - application/json
            responses:
                200:
                    description: No error
                    schema:
                        properties:
                            ContainersDeleted:
                                description: Container IDs that were deleted
                                items:
                                    schema:
                                        type: string
                                schema:
                                    type: array
                            SpaceReclaimed:
                                description: Disk space reclaimed in bytes
                                format: int64
                                schema:
                                    type: integer
                        schema:
                            type: object
                        title: ContainerPruneResponse
                500:
                    description: Server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Delete stopped containers
            tags:
                - Container
    /distribution/{name}/json:
        get:
            description: |
                Return image digest and platform information by contacting the registry.
            operationId: DockerDistributionInspect
            parameters:
                - description: Image name or id
                  in: path
                  name: name
                  required: true
                  schema:
                    type: string
            produces:
                - application/json
            responses:
                200:
                    description: descriptor and platform information
                    schema:
                        $ref: '#/components/schemas/DistributionInspect'
                401:
                    description: Failed authentication or no image found
                    examples:
                        application/json:
                            message: 'No such image: someimage (tag: latest)'
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: Server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Get image information from the registry
            tags:
                - Distribution
    /docker_version:
        get:
            description: Returns the version of Docker that is running and various information about the system that Docker is running on.
            operationId: DockerSystemVersion
            produces:
                - application/json
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SystemVersion'
                    description: no error
                500:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: server error
            summary: Get version
            tags:
                - System
    /events:
        get:
            description: |
                Stream real-time events from the server.

                Various objects within Docker report events when something happens to them.

                Containers report these events: `attach`, `commit`, `copy`, `create`, `destroy`, `detach`, `die`, `exec_create`, `exec_detach`, `exec_start`, `exec_die`, `export`, `health_status`, `kill`, `oom`, `pause`, `rename`, `resize`, `restart`, `start`, `stop`, `top`, `unpause`, `update`, and `prune`

                Images report these events: `delete`, `import`, `load`, `pull`, `push`, `save`, `tag`, `untag`, and `prune`

                Volumes report these events: `create`, `mount`, `unmount`, `destroy`, and `prune`

                Networks report these events: `create`, `connect`, `disconnect`, `destroy`, `update`, `remove`, and `prune`

                The Docker daemon reports these events: `reload`

                Services report these events: `create`, `update`, and `remove`

                Nodes report these events: `create`, `update`, and `remove`

                Secrets report these events: `create`, `update`, and `remove`

                Configs report these events: `create`, `update`, and `remove`

                The Builder reports `prune` events
            operationId: DockerSystemEvents
            parameters:
                - description: Show events created since this timestamp then stream new events.
                  in: query
                  name: since
                  schema:
                    type: string
                - description: Show events created until this timestamp then stop streaming.
                  in: query
                  name: until
                  schema:
                    type: string
                - description: |
                    A JSON encoded value of filters (a `map[string][]string`) to process on the event list. Available filters:

                    - `config=<string>` config name or ID
                    - `container=<string>` container name or ID
                    - `daemon=<string>` daemon name or ID
                    - `event=<string>` event type
                    - `image=<string>` image name or ID
                    - `label=<string>` image or container label
                    - `network=<string>` network name or ID
                    - `node=<string>` node ID
                    - `plugin`=<string> plugin name or ID
                    - `scope`=<string> local or swarm
                    - `secret=<string>` secret name or ID
                    - `service=<string>` service name or ID
                    - `type=<string>` object to filter by, one of `container`, `image`, `volume`, `network`, `daemon`, `plugin`, `node`, `service`, `secret` or `config`
                    - `volume=<string>` volume name
                  in: query
                  name: filters
                  schema:
                    type: string
            produces:
                - application/json
            responses:
                200:
                    description: no error
                    schema:
                        $ref: '#/components/schemas/EventMessage'
                400:
                    description: bad parameter
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Monitor events
            tags:
                - System
    /exec/{id}/json:
        get:
            description: Return low-level information about an exec instance.
            operationId: DockerExecInspect
            parameters:
                - description: Exec instance ID
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
            produces:
                - application/json
            responses:
                200:
                    description: No error
                    examples:
                        application/json:
                            CanRemove: false
                            ContainerID: b53ee82b53a40c7dca428523e34f741f3abc51d9f297a14ff874bf761b995126
                            DetachKeys: ""
                            ExitCode: 2
                            ID: f33bbfb39f5b142420f4759b2348913bd4a8d1a6d7fd56499cb41a1bb91d7b3b
                            OpenStderr: true
                            OpenStdin: true
                            OpenStdout: true
                            Pid: 42000
                            ProcessConfig:
                                arguments:
                                    - -c
                                    - exit 2
                                entrypoint: sh
                                privileged: false
                                tty: true
                                user: "1000"
                            Running: false
                    schema:
                        properties:
                            CanRemove:
                                schema:
                                    type: boolean
                            ContainerID:
                                schema:
                                    type: string
                            DetachKeys:
                                schema:
                                    type: string
                            ExitCode:
                                schema:
                                    type: integer
                            ID:
                                schema:
                                    type: string
                            OpenStderr:
                                schema:
                                    type: boolean
                            OpenStdin:
                                schema:
                                    type: boolean
                            OpenStdout:
                                schema:
                                    type: boolean
                            Pid:
                                description: The system process ID for the exec process.
                                schema:
                                    type: integer
                            ProcessConfig:
                                $ref: '#/components/schemas/ProcessConfig'
                            Running:
                                schema:
                                    type: boolean
                        schema:
                            type: object
                        title: ExecInspectResponse
                404:
                    description: No such exec instance
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: Server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Inspect an exec instance
            tags:
                - Exec
    /exec/{id}/resize:
        post:
            description: |
                Resize the TTY session used by an exec instance. This endpoint only works
                if `tty` was specified as part of creating and starting the exec instance.
            operationId: DockerExecResize
            parameters:
                - description: Exec instance ID
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
                - description: Height of the TTY session in characters
                  in: query
                  name: h
                  schema:
                    type: integer
                - description: Width of the TTY session in characters
                  in: query
                  name: w
                  schema:
                    type: integer
            responses:
                200:
                    description: No error
                400:
                    description: bad parameter
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: No such exec instance
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: Server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Resize an exec instance
            tags:
                - Exec
    /exec/{id}/start:
        post:
            consumes:
                - application/json
            description: |
                Starts a previously set up exec instance. If detach is true, this endpoint
                returns immediately after starting the command. Otherwise, it sets up an
                interactive session with the command.
            operationId: DockerExecStart
            parameters:
                - in: body
                  name: execStartConfig
                  schema:
                    example:
                        Detach: false
                        Tty: false
                    properties:
                        Detach:
                            description: Detach from the command.
                            schema:
                                type: boolean
                        Tty:
                            description: Allocate a pseudo-TTY.
                            schema:
                                type: boolean
                    schema:
                        type: object
                    title: ExecStartConfig
                - description: Exec instance ID
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
            produces:
                - application/vnd.docker.raw-stream
            responses:
                200:
                    description: No error
                404:
                    description: No such exec instance
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                409:
                    description: Container is stopped or paused
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Start an exec instance
            tags:
                - Exec
    /images/{name}:
        delete:
            description: |
                Remove an image, along with any untagged parent images that were
                referenced by that image.

                Images can't be removed if they have descendant images, are being
                used by a running container or are being used by a build.
            operationId: DockerImageDelete
            parameters:
                - description: Image name or ID
                  in: path
                  name: name
                  required: true
                  schema:
                    type: string
                - default: false
                  description: Remove the image even if it is being used by stopped containers or has other tags
                  in: query
                  name: force
                  schema:
                    type: boolean
                - default: false
                  description: Do not delete untagged parent images
                  in: query
                  name: noprune
                  schema:
                    type: boolean
            produces:
                - application/json
            responses:
                200:
                    description: The image was deleted successfully
                    examples:
                        application/json:
                            - Untagged: 3e2f21a89f
                            - Deleted: 3e2f21a89f
                            - Deleted: 53b4f83ac9
                    schema:
                        items:
                            $ref: '#/components/schemas/ImageDeleteResponseItem'
                        schema:
                            type: array
                404:
                    description: No such image
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                409:
                    description: Conflict
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: Server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Remove an image
            tags:
                - Image
    /images/{name}/get:
        get:
            description: |
                Get a tarball containing all images and metadata for a repository.

                If `name` is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned. If `name` is an image ID, similarly only that image (and its parents) are returned, but with the exclusion of the `repositories` file in the tarball, as there were no image names referenced.

                ### Image tarball format

                An image tarball contains one directory per image layer (named using its long ID), each containing these files:

                - `VERSION`: currently `1.0` - the file format version
                - `json`: detailed layer information, similar to `docker inspect layer_id`
                - `layer.tar`: A tarfile containing the filesystem changes in this layer

                The `layer.tar` file contains `aufs` style `.wh..wh.aufs` files and directories for storing attribute changes and deletions.

                If the tarball defines a repository, the tarball should also include a `repositories` file at the root that contains a list of repository and tag names mapped to layer IDs.

                ```json
                {
                  "hello-world": {
                    "latest": "565a9d68a73f6706862bfe8409a7f659776d4d60a8d096eb4a3cbce6999cc2a1"
                  }
                }
                ```
            operationId: DockerImageGet
            parameters:
                - description: Image name or ID
                  in: path
                  name: name
                  required: true
                  schema:
                    type: string
            produces:
                - application/x-tar
            responses:
                200:
                    description: no error
                    schema:
                        format: binary
                        schema:
                            type: string
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Export an image
            tags:
                - Image
    /images/{name}/history:
        get:
            description: Return parent layers of an image.
            operationId: DockerImageHistory
            parameters:
                - description: Image name or ID
                  in: path
                  name: name
                  required: true
                  schema:
                    type: string
            produces:
                - application/json
            responses:
                200:
                    description: List of image layers
                    examples:
                        application/json:
                            - Comment: ""
                              Created: 1398108230
                              CreatedBy: '/bin/sh -c #(nop) ADD file:eb15dbd63394e063b805a3c32ca7bf0266ef64676d5a6fab4801f2e81e2a5148 in /'
                              Id: 3db9c44f45209632d6050b35958829c3a2aa256d81b9a7be45b362ff85c54710
                              Size: 182964289
                              Tags:
                                - ubuntu:lucid
                                - ubuntu:10.04
                            - Comment: ""
                              Created: 1398108222
                              CreatedBy: '/bin/sh -c #(nop) MAINTAINER Tianon Gravi <admwiggin@gmail.com> - mkimage-debootstrap.sh -i iproute,iputils-ping,ubuntu-minimal -t lucid.tar.xz lucid http://archive.ubuntu.com/ubuntu/'
                              Id: 6cfa4d1f33fb861d4d114f43b25abd0ac737509268065cdfd69d544a59c85ab8
                              Size: 0
                              Tags: []
                            - Comment: Imported from -
                              Created: 1371157430
                              CreatedBy: ""
                              Id: 511136ea3c5a64f264b78b5433614aec563103b4d4702f3ba7d4d2698e22c158
                              Size: 0
                              Tags:
                                - scratch12:latest
                                - scratch:latest
                    schema:
                        items:
                            description: individual image layer information in response to ImageHistory operation
                            properties:
                                Comment:
                                    schema:
                                        type: string
                                    x-nullable: false
                                Created:
                                    format: int64
                                    schema:
                                        type: integer
                                    x-nullable: false
                                CreatedBy:
                                    schema:
                                        type: string
                                    x-nullable: false
                                Id:
                                    schema:
                                        type: string
                                    x-nullable: false
                                Size:
                                    format: int64
                                    schema:
                                        type: integer
                                    x-nullable: false
                                Tags:
                                    items:
                                        schema:
                                            type: string
                                    schema:
                                        type: array
                            required:
                                - Id
                                - Created
                                - CreatedBy
                                - Tags
                                - Size
                                - Comment
                            schema:
                                type: object
                            title: HistoryResponseItem
                            x-go-name: HistoryResponseItem
                        schema:
                            type: array
                404:
                    description: No such image
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: Server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Get the history of an image
            tags:
                - Image
    /images/{name}/json:
        get:
            description: Return low-level information about an image.
            operationId: DockerImageInspect
            parameters:
                - description: Image name or id
                  in: path
                  name: name
                  required: true
                  schema:
                    type: string
            produces:
                - application/json
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ImageInspect'
                    description: No error
                404:
                    description: No such image
                    examples:
                        application/json:
                            message: 'No such image: someimage (tag: latest)'
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: Server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Inspect an image
            tags:
                - Image
    /images/{name}/push:
        post:
            consumes:
                - application/octet-stream
            description: |
                Push an image to a registry.

                If you wish to push an image on to a private registry, that image must
                already have a tag which references the registry. For example,
                `registry.example.com/myimage:latest`.

                The push is cancelled if the HTTP connection is closed.
            operationId: DockerImagePush
            parameters:
                - description: Image name or ID.
                  in: path
                  name: name
                  required: true
                  schema:
                    type: string
                - description: The tag to associate with the image on the registry.
                  in: query
                  name: tag
                  schema:
                    type: string
                - description: |
                    A base64url-encoded auth configuration.

                    Refer to the [authentication section](#section/Authentication) for
                    details.
                  in: header
                  name: X-Registry-Auth
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    description: No error
                404:
                    description: No such image
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: Server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Push an image
            tags:
                - Image
    /images/{name}/tag:
        post:
            description: Tag an image so that it becomes part of a repository.
            operationId: DockerImageTag
            parameters:
                - description: Image name or ID to tag.
                  in: path
                  name: name
                  required: true
                  schema:
                    type: string
                - description: The repository to tag in. For example, `someuser/someimage`.
                  in: query
                  name: repo
                  schema:
                    type: string
                - description: The name of the new tag.
                  in: query
                  name: tag
                  schema:
                    type: string
            responses:
                201:
                    description: No error
                400:
                    description: Bad parameter
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: No such image
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                409:
                    description: Conflict
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: Server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Tag an image
            tags:
                - Image
    /images/create:
        post:
            consumes:
                - text/plain
                - application/octet-stream
            description: Create an image by either pulling it from a registry or importing it.
            operationId: DockerImageCreate
            parameters:
                - description: Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed.
                  in: query
                  name: fromImage
                  schema:
                    type: string
                - description: Source to import. The value may be a URL from which the image can be retrieved or `-` to read the image from the request body. This parameter may only be used when importing an image.
                  in: query
                  name: fromSrc
                  schema:
                    type: string
                - description: Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image.
                  in: query
                  name: repo
                  schema:
                    type: string
                - description: Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled.
                  in: query
                  name: tag
                  schema:
                    type: string
                - description: Set commit message for imported image.
                  in: query
                  name: message
                  schema:
                    type: string
                - description: Image content if the value `-` has been specified in fromSrc query parameter
                  in: body
                  name: inputImage
                  required: false
                  schema:
                    schema:
                        type: string
                - description: |
                    A base64url-encoded auth configuration.

                    Refer to the [authentication section](#section/Authentication) for
                    details.
                  in: header
                  name: X-Registry-Auth
                  schema:
                    type: string
                - description: |
                    Apply `Dockerfile` instructions to the image that is created,
                    for example: `changes=ENV DEBUG=true`.
                    Note that `ENV DEBUG=true` should be URI component encoded.

                    Supported `Dockerfile` instructions:
                    `CMD`|`ENTRYPOINT`|`ENV`|`EXPOSE`|`ONBUILD`|`USER`|`VOLUME`|`WORKDIR`
                  in: query
                  items:
                    schema:
                        type: string
                  name: changes
                  schema:
                    type: array
                - default: ""
                  description: Platform in the format os[/arch[/variant]]
                  in: query
                  name: platform
                  schema:
                    type: string
            produces:
                - application/json
            responses:
                200:
                    description: no error
                404:
                    description: repository does not exist or no read access
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Create an image
            tags:
                - Image
    /images/get:
        get:
            description: |
                Get a tarball containing all images and metadata for several image
                repositories.

                For each value of the `names` parameter: if it is a specific name and
                tag (e.g. `ubuntu:latest`), then only that image (and its parents) are
                returned; if it is an image ID, similarly only that image (and its parents)
                are returned and there would be no names referenced in the 'repositories'
                file for this image ID.

                For details on the format, see the [export image endpoint](#operation/ImageGet).
            operationId: DockerImageGetAll
            parameters:
                - description: Image names to filter by
                  in: query
                  items:
                    schema:
                        type: string
                  name: names
                  schema:
                    items:
                        type: string
                    type: array
            produces:
                - application/x-tar
            responses:
                200:
                    description: no error
                    schema:
                        format: binary
                        schema:
                            type: string
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Export several images
            tags:
                - Image
    /images/json:
        get:
            description: Returns a list of images on the server. Note that it uses a different, smaller representation of an image than inspecting a single image.
            operationId: DockerImageList
            parameters:
                - default: false
                  description: Show all images. Only images from a final layer (no children) are shown by default.
                  in: query
                  name: all
                  schema:
                    type: boolean
                - description: |
                    A JSON encoded value of the filters (a `map[string][]string`) to
                    process on the images list.

                    Available filters:

                    - `before`=(`<image-name>[:<tag>]`,  `<image id>` or `<image@digest>`)
                    - `dangling=true`
                    - `label=key` or `label="key=value"` of an image label
                    - `reference`=(`<image-name>[:<tag>]`)
                    - `since`=(`<image-name>[:<tag>]`,  `<image id>` or `<image@digest>`)
                  in: query
                  name: filters
                  schema:
                    type: string
                - default: false
                  description: Show digest information as a `RepoDigests` field on each image.
                  in: query
                  name: digests
                  schema:
                    type: boolean
            produces:
                - application/json
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/ImageSummary'
                                type: array
                    description: Summary image data for the images matching the query
                    examples:
                        application/json:
                            - Containers: 2
                              Created: 1474925151
                              Id: sha256:e216a057b1cb1efc11f8a268f37ef62083e70b1b38323ba252e25ac88904a7e8
                              Labels: {}
                              ParentId: ""
                              RepoDigests:
                                - ubuntu@sha256:992069aee4016783df6345315302fa59681aae51a8eeb2f889dea59290f21787
                              RepoTags:
                                - ubuntu:12.04
                                - ubuntu:precise
                              SharedSize: 0
                              Size: 103579269
                              VirtualSize: 103579269
                            - Containers: 5
                              Created: 1403128455
                              Id: sha256:3e314f95dcace0f5e4fd37b10862fe8398e3c60ed36600bc0ca5fda78b087175
                              Labels: {}
                              ParentId: ""
                              RepoDigests:
                                - ubuntu@sha256:002fba3e3255af10be97ea26e476692a7ebed0bb074a9ab960b2e7a1526b15d7
                                - ubuntu@sha256:68ea0200f0b90df725d99d823905b04cf844f6039ef60c60bf3e019915017bd3
                              RepoTags:
                                - ubuntu:12.10
                                - ubuntu:quantal
                              SharedSize: 0
                              Size: 172064416
                              VirtualSize: 172064416
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: List Images
            tags:
                - Image
    /images/load:
        post:
            consumes:
                - application/x-tar
            description: |
                Load a set of images and tags into a repository.

                For details on the format, see the [export image endpoint](#operation/ImageGet).
            operationId: DockerImageLoad
            parameters:
                - description: Tar archive containing images
                  in: body
                  name: imagesTarball
                  schema:
                    format: binary
                    schema:
                        type: string
                - default: false
                  description: Suppress progress details during load.
                  in: query
                  name: quiet
                  schema:
                    type: boolean
            produces:
                - application/json
            responses:
                200:
                    description: no error
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Import images
            tags:
                - Image
    /images/prune:
        post:
            operationId: DockerImagePrune
            parameters:
                - description: |
                    Filters to process on the prune list, encoded as JSON (a `map[string][]string`). Available filters:

                    - `dangling=<boolean>` When set to `true` (or `1`), prune only
                       unused *and* untagged images. When set to `false`
                       (or `0`), all unused images are pruned.
                    - `until=<string>` Prune images created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machine’s time.
                    - `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune images with (or without, in case `label!=...` is used) the specified labels.
                  in: query
                  name: filters
                  schema:
                    type: string
            produces:
                - application/json
            responses:
                200:
                    description: No error
                    schema:
                        properties:
                            ImagesDeleted:
                                description: Images that were deleted
                                items:
                                    $ref: '#/components/schemas/ImageDeleteResponseItem'
                                schema:
                                    type: array
                            SpaceReclaimed:
                                description: Disk space reclaimed in bytes
                                format: int64
                                schema:
                                    type: integer
                        schema:
                            type: object
                        title: ImagePruneResponse
                500:
                    description: Server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Delete unused images
            tags:
                - Image
    /images/search:
        get:
            description: Search for an image on Docker Hub.
            operationId: DockerImageSearch
            parameters:
                - description: Term to search
                  in: query
                  name: term
                  required: true
                  schema:
                    type: string
                - description: Maximum number of results to return
                  in: query
                  name: limit
                  schema:
                    type: integer
                - description: |
                    A JSON encoded value of the filters (a `map[string][]string`) to process on the images list. Available filters:

                    - `is-automated=(true|false)`
                    - `is-official=(true|false)`
                    - `stars=<number>` Matches images that has at least 'number' stars.
                  in: query
                  name: filters
                  schema:
                    type: string
            produces:
                - application/json
            responses:
                200:
                    description: No error
                    examples:
                        application/json:
                            - description: ""
                              is_automated: false
                              is_official: false
                              name: wma55/u1210sshd
                              star_count: 0
                            - description: ""
                              is_automated: false
                              is_official: false
                              name: jdswinbank/sshd
                              star_count: 0
                            - description: ""
                              is_automated: false
                              is_official: false
                              name: vgauthier/sshd
                              star_count: 0
                    schema:
                        items:
                            properties:
                                description:
                                    schema:
                                        type: string
                                is_automated:
                                    schema:
                                        type: boolean
                                is_official:
                                    schema:
                                        type: boolean
                                name:
                                    schema:
                                        type: string
                                star_count:
                                    schema:
                                        type: integer
                            schema:
                                type: object
                            title: ImageSearchResponseItem
                        schema:
                            type: array
                500:
                    description: Server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Search images
            tags:
                - Image
    /info:
        get:
            operationId: DockerSystemInfo
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SystemInfo'
                    description: No error
                500:
                    description: Server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Get system information
            tags:
                - System
    /kr1/idp:
        get:
            operationId: idpList
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/kraud.IdentityProviderList'
                    description: OK
        post:
            operationId: idpCreate
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/kraud.IdentityProvider'
                required: true
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/kraud.IdentityProvider'
                    description: OK
    /kr1/idp/{id}:
        delete:
            operationId: idpDelete
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    type: string
            responses:
                204:
                    description: Deleted
        get:
            operationId: idpInspect
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/kraud.IdentityProvider'
                    description: OK
    /kr1/idp/{id}/saml/metadata:
        get:
            operationId: idpGetSamlMetadata
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    description: OK
    /kr1/idp/{id}/saml/slo:
        get:
            operationId: idpGetSamlSlo
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    description: OK
        post:
            operationId: idpPostSamlSlo
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    description: OK
    /kr1/idp/{id}/saml/sso:
        get:
            operationId: idpGetSamlSso
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    description: OK
        post:
            operationId: idpPostSamlSso
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    description: OK
    /networks:
        get:
            description: |
                Returns a list of networks. For details on the format, see the
                [network inspect endpoint](#operation/NetworkInspect).

                Note that it uses a different, smaller representation of a network than
                inspecting a single network. For example, the list of containers attached
                to the network is not propagated in API versions 1.28 and up.
            operationId: DockerNetworkList
            parameters:
                - description: |
                    JSON encoded value of the filters (a `map[string][]string`) to process
                    on the networks list.

                    Available filters:

                    - `dangling=<boolean>` When set to `true` (or `1`), returns all
                       networks that are not in use by a container. When set to `false`
                       (or `0`), only networks that are in use by one or more
                       containers are returned.
                    - `driver=<driver-name>` Matches a network's driver.
                    - `id=<network-id>` Matches all or part of a network ID.
                    - `label=<key>` or `label=<key>=<value>` of a network label.
                    - `name=<network-name>` Matches all or part of a network name.
                    - `scope=["swarm"|"global"|"local"]` Filters networks by scope (`swarm`, `global`, or `local`).
                    - `type=["custom"|"builtin"]` Filters networks by type. The `custom` keyword returns all user-defined networks.
                  in: query
                  name: filters
                  schema:
                    type: string
            produces:
                - application/json
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/Network'
                                type: array
                    description: No error
                    examples:
                        application/json:
                            - Attachable: false
                              Created: "2016-10-19T06:21:00.416543526Z"
                              Driver: bridge
                              EnableIPv6: false
                              IPAM:
                                Config:
                                    - Subnet: 172.17.0.0/16
                                Driver: default
                              Id: f2de39df4171b0dc801e8002d1d999b77256983dfc63041c0f34030aa3977566
                              Ingress: false
                              Internal: false
                              Name: bridge
                              Options:
                                com.docker.network.bridge.default_bridge: "true"
                                com.docker.network.bridge.enable_icc: "true"
                                com.docker.network.bridge.enable_ip_masquerade: "true"
                                com.docker.network.bridge.host_binding_ipv4: 0.0.0.0
                                com.docker.network.bridge.name: docker0
                                com.docker.network.driver.mtu: "1500"
                              Scope: local
                            - Attachable: false
                              Containers: {}
                              Created: "0001-01-01T00:00:00Z"
                              Driver: "null"
                              EnableIPv6: false
                              IPAM:
                                Config: []
                                Driver: default
                              Id: e086a3893b05ab69242d3c44e49483a3bbbd3a26b46baa8f61ab797c1088d794
                              Ingress: false
                              Internal: false
                              Name: none
                              Options: {}
                              Scope: local
                            - Attachable: false
                              Containers: {}
                              Created: "0001-01-01T00:00:00Z"
                              Driver: host
                              EnableIPv6: false
                              IPAM:
                                Config: []
                                Driver: default
                              Id: 13e871235c677f196c4e1ecebb9dc733b9b2d2ab589e30c539efeda84a24215e
                              Ingress: false
                              Internal: false
                              Name: host
                              Options: {}
                              Scope: local
                500:
                    description: Server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: List networks
            tags:
                - Network
    /networks/{id}:
        delete:
            operationId: DockerNetworkDelete
            parameters:
                - description: Network ID or name
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
            responses:
                204:
                    description: No error
                403:
                    description: operation not supported for pre-defined networks
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: no such network
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: Server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Remove a network
            tags:
                - Network
        get:
            operationId: DockerNetworkInspect
            parameters:
                - description: Network ID or name
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
                - default: false
                  description: Detailed inspect output for troubleshooting
                  in: query
                  name: verbose
                  schema:
                    type: boolean
                - description: Filter the network by scope (swarm, global, or local)
                  in: query
                  name: scope
                  schema:
                    type: string
            produces:
                - application/json
            responses:
                200:
                    description: No error
                    schema:
                        $ref: '#/components/schemas/Network'
                404:
                    description: Network not found
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: Server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Inspect a network
            tags:
                - Network
    /networks/{id}/connect:
        post:
            consumes:
                - application/json
            operationId: DockerNetworkConnect
            parameters:
                - description: Network ID or name
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
                - in: body
                  name: container
                  required: true
                  schema:
                    example:
                        Container: 3613f73ba0e4
                        EndpointConfig:
                            IPAMConfig:
                                IPv4Address: 172.24.56.89
                                IPv6Address: 2001:db8::5689
                    properties:
                        Container:
                            description: The ID or name of the container to connect to the network.
                            schema:
                                type: string
                        EndpointConfig:
                            $ref: '#/components/schemas/EndpointSettings'
                    schema:
                        type: object
                    title: NetworkDisconnectRequest
            responses:
                200:
                    description: No error
                403:
                    description: Operation not supported for swarm scoped networks
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: Network or container not found
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: Server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Connect a container to a network
            tags:
                - Network
    /networks/{id}/disconnect:
        post:
            consumes:
                - application/json
            operationId: DockerNetworkDisconnect
            parameters:
                - description: Network ID or name
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
                - in: body
                  name: container
                  required: true
                  schema:
                    properties:
                        Container:
                            description: |
                                The ID or name of the container to disconnect from the network.
                            schema:
                                type: string
                        Force:
                            description: |
                                Force the container to disconnect from the network.
                            schema:
                                type: boolean
                    schema:
                        type: object
                    title: NetworkConnectRequest
            responses:
                200:
                    description: No error
                403:
                    description: Operation not supported for swarm scoped networks
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: Network or container not found
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: Server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Disconnect a container from a network
            tags:
                - Network
    /networks/create:
        post:
            consumes:
                - application/json
            operationId: DockerNetworkCreate
            parameters:
                - description: Network configuration
                  in: body
                  name: networkConfig
                  required: true
                  schema:
                    example:
                        Attachable: false
                        CheckDuplicate: false
                        Driver: bridge
                        EnableIPv6: true
                        IPAM:
                            Config:
                                - Gateway: 172.20.10.11
                                  IPRange: 172.20.10.0/24
                                  Subnet: 172.20.0.0/16
                                - Gateway: 2001:db8:abcd::1011
                                  Subnet: 2001:db8:abcd::/64
                            Driver: default
                            Options:
                                foo: bar
                        Ingress: false
                        Internal: true
                        Labels:
                            com.example.some-label: some-value
                            com.example.some-other-label: some-other-value
                        Name: isolated_nw
                        Options:
                            com.docker.network.bridge.default_bridge: "true"
                            com.docker.network.bridge.enable_icc: "true"
                            com.docker.network.bridge.enable_ip_masquerade: "true"
                            com.docker.network.bridge.host_binding_ipv4: 0.0.0.0
                            com.docker.network.bridge.name: docker0
                            com.docker.network.driver.mtu: "1500"
                    properties:
                        Attachable:
                            description: |
                                Globally scoped network is manually attachable by regular
                                containers from workers in swarm mode.
                            schema:
                                type: boolean
                        CheckDuplicate:
                            description: |
                                Check for networks with duplicate names. Since Network is
                                primarily keyed based on a random ID and not on the name, and
                                network name is strictly a user-friendly alias to the network
                                which is uniquely identified using ID, there is no guaranteed
                                way to check for duplicates. CheckDuplicate is there to provide
                                a best effort checking of any networks which has the same name
                                but it is not guaranteed to catch all name collisions.
                            schema:
                                type: boolean
                        Driver:
                            default: bridge
                            description: Name of the network driver plugin to use.
                            schema:
                                type: string
                        EnableIPv6:
                            description: Enable IPv6 on the network.
                            schema:
                                type: boolean
                        IPAM:
                            $ref: '#/components/schemas/IPAM'
                            description: Optional custom IP scheme for the network.
                        Ingress:
                            description: |
                                Ingress network is the network which provides the routing-mesh
                                in swarm mode.
                            schema:
                                type: boolean
                        Internal:
                            description: Restrict external access to the network.
                            schema:
                                type: boolean
                        Labels:
                            additionalProperties:
                                schema:
                                    type: string
                            description: User-defined key/value metadata.
                            schema:
                                type: object
                        Name:
                            description: The network's name.
                            schema:
                                type: string
                        Options:
                            additionalProperties:
                                schema:
                                    type: string
                            description: Network specific options to be used by the drivers.
                            schema:
                                type: object
                    required:
                        - Name
                    schema:
                        type: object
                    title: NetworkCreateRequest
            produces:
                - application/json
            responses:
                201:
                    description: No error
                    schema:
                        example:
                            Id: 22be93d5babb089c5aab8dbc369042fad48ff791584ca2da2100db837a1c7c30
                            Warning: ""
                        properties:
                            Id:
                                description: The ID of the created network.
                                schema:
                                    type: string
                            Warning:
                                schema:
                                    type: string
                        schema:
                            type: object
                        title: NetworkCreateResponse
                403:
                    description: operation not supported for pre-defined networks
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: plugin not found
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: Server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Create a network
            tags:
                - Network
    /networks/prune:
        post:
            operationId: DockerNetworkPrune
            parameters:
                - description: |
                    Filters to process on the prune list, encoded as JSON (a `map[string][]string`).

                    Available filters:
                    - `until=<timestamp>` Prune networks created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machine’s time.
                    - `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune networks with (or without, in case `label!=...` is used) the specified labels.
                  in: query
                  name: filters
                  schema:
                    type: string
            produces:
                - application/json
            responses:
                200:
                    description: No error
                    schema:
                        properties:
                            NetworksDeleted:
                                description: Networks that were deleted
                                items:
                                    schema:
                                        type: string
                                schema:
                                    type: array
                        schema:
                            type: object
                        title: NetworkPruneResponse
                500:
                    description: Server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Delete unused networks
            tags:
                - Network
    /nodes:
        get:
            operationId: DockerNodeList
            parameters:
                - description: |
                    Filters to process on the nodes list, encoded as JSON (a `map[string][]string`).

                    Available filters:
                    - `id=<node id>`
                    - `label=<engine label>`
                    - `membership=`(`accepted`|`pending`)`
                    - `name=<node name>`
                    - `node.label=<node label>`
                    - `role=`(`manager`|`worker`)`
                  in: query
                  name: filters
                  schema:
                    type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/Node'
                                type: array
                    description: no error
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                503:
                    description: node is not part of a swarm
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: List nodes
            tags:
                - Node
    /nodes/{id}:
        delete:
            operationId: DockerNodeDelete
            parameters:
                - description: The ID or name of the node
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
                - default: false
                  description: Force remove a node from the swarm
                  in: query
                  name: force
                  schema:
                    type: boolean
            responses:
                200:
                    description: no error
                404:
                    description: no such node
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                503:
                    description: node is not part of a swarm
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Delete a node
            tags:
                - Node
        get:
            operationId: DockerNodeInspect
            parameters:
                - description: The ID or name of the node
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    description: no error
                    schema:
                        $ref: '#/components/schemas/Node'
                404:
                    description: no such node
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                503:
                    description: node is not part of a swarm
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Inspect a node
            tags:
                - Node
    /nodes/{id}/update:
        post:
            operationId: DockerNodeUpdate
            parameters:
                - description: The ID of the node
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
                - in: body
                  name: body
                  schema:
                    $ref: '#/components/schemas/NodeSpec'
                - description: |
                    The version number of the node object being updated. This is required
                    to avoid conflicting writes.
                  format: int64
                  in: query
                  name: version
                  required: true
                  schema:
                    type: integer
            responses:
                200:
                    description: no error
                400:
                    description: bad parameter
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: no such node
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                503:
                    description: node is not part of a swarm
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Update a node
            tags:
                - Node
    /openapi/v2:
        get:
            operationId: getOpenapi
            responses:
                200:
                    description: OK
    /plugins:
        get:
            description: Returns information about installed plugins.
            operationId: DockerPluginList
            parameters:
                - description: |
                    A JSON encoded value of the filters (a `map[string][]string`) to
                    process on the plugin list.

                    Available filters:

                    - `capability=<capability name>`
                    - `enable=<true>|<false>`
                  in: query
                  name: filters
                  schema:
                    type: string
            produces:
                - application/json
            responses:
                200:
                    description: No error
                    schema:
                        items:
                            $ref: '#/components/schemas/Plugin'
                        schema:
                            type: array
                500:
                    description: Server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: List plugins
            tags:
                - Plugin
    /plugins/{name}:
        delete:
            operationId: DockerPluginDelete
            parameters:
                - description: |
                    The name of the plugin. The `:latest` tag is optional, and is the
                    default if omitted.
                  in: path
                  name: name
                  required: true
                  schema:
                    type: string
                - default: false
                  description: |
                    Disable the plugin before removing. This may result in issues if the
                    plugin is in use by a container.
                  in: query
                  name: force
                  schema:
                    type: boolean
            responses:
                200:
                    description: no error
                    schema:
                        $ref: '#/components/schemas/Plugin'
                404:
                    description: plugin is not installed
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Remove a plugin
            tags:
                - Plugin
    /plugins/{name}/disable:
        post:
            operationId: DockerPluginDisable
            parameters:
                - description: |
                    The name of the plugin. The `:latest` tag is optional, and is the
                    default if omitted.
                  in: path
                  name: name
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    description: no error
                404:
                    description: plugin is not installed
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Disable a plugin
            tags:
                - Plugin
    /plugins/{name}/enable:
        post:
            operationId: DockerPluginEnable
            parameters:
                - description: |
                    The name of the plugin. The `:latest` tag is optional, and is the
                    default if omitted.
                  in: path
                  name: name
                  required: true
                  schema:
                    type: string
                - default: 0
                  description: Set the HTTP client timeout (in seconds)
                  in: query
                  name: timeout
                  schema:
                    type: integer
            responses:
                200:
                    description: no error
                404:
                    description: plugin is not installed
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Enable a plugin
            tags:
                - Plugin
    /plugins/{name}/json:
        get:
            operationId: DockerPluginInspect
            parameters:
                - description: |
                    The name of the plugin. The `:latest` tag is optional, and is the
                    default if omitted.
                  in: path
                  name: name
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    description: no error
                    schema:
                        $ref: '#/components/schemas/Plugin'
                404:
                    description: plugin is not installed
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Inspect a plugin
            tags:
                - Plugin
    /plugins/{name}/push:
        post:
            description: |
                Push a plugin to the registry.
            operationId: DockerPluginPush
            parameters:
                - description: |
                    The name of the plugin. The `:latest` tag is optional, and is the
                    default if omitted.
                  in: path
                  name: name
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    description: no error
                404:
                    description: plugin not installed
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Push a plugin
            tags:
                - Plugin
    /plugins/{name}/set:
        post:
            consumes:
                - application/json
            operationId: DockerPluginSet
            parameters:
                - description: |
                    The name of the plugin. The `:latest` tag is optional, and is the
                    default if omitted.
                  in: path
                  name: name
                  required: true
                  schema:
                    type: string
                - in: body
                  name: body
                  schema:
                    example:
                        - DEBUG=1
                    items:
                        schema:
                            type: string
                    schema:
                        type: array
            responses:
                204:
                    description: No error
                404:
                    description: Plugin not installed
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: Server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Configure a plugin
            tags:
                - Plugin
    /plugins/{name}/upgrade:
        post:
            operationId: DockerPluginUpgrade
            parameters:
                - description: |
                    The name of the plugin. The `:latest` tag is optional, and is the
                    default if omitted.
                  in: path
                  name: name
                  required: true
                  schema:
                    type: string
                - description: |
                    Remote reference to upgrade to.

                    The `:latest` tag is optional, and is used as the default if omitted.
                  in: query
                  name: remote
                  required: true
                  schema:
                    type: string
                - description: |
                    A base64url-encoded auth configuration to use when pulling a plugin
                    from a registry.

                    Refer to the [authentication section](#section/Authentication) for
                    details.
                  in: header
                  name: X-Registry-Auth
                  schema:
                    type: string
                - in: body
                  name: body
                  schema:
                    example:
                        - Description: ""
                          Name: network
                          Value:
                            - host
                        - Description: ""
                          Name: mount
                          Value:
                            - /data
                        - Description: ""
                          Name: device
                          Value:
                            - /dev/cpu_dma_latency
                    items:
                        $ref: '#/components/schemas/PluginPrivilege'
                    schema:
                        type: array
            responses:
                204:
                    description: no error
                404:
                    description: plugin not installed
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Upgrade a plugin
            tags:
                - Plugin
    /plugins/create:
        post:
            consumes:
                - application/x-tar
            operationId: DockerPluginCreate
            parameters:
                - description: |
                    The name of the plugin. The `:latest` tag is optional, and is the
                    default if omitted.
                  in: query
                  name: name
                  required: true
                  schema:
                    type: string
                - description: Path to tar containing plugin rootfs and manifest
                  in: body
                  name: tarContext
                  schema:
                    format: binary
                    schema:
                        type: string
            responses:
                204:
                    description: no error
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Create a plugin
            tags:
                - Plugin
    /plugins/privileges:
        get:
            operationId: DockerGetPluginPrivileges
            parameters:
                - description: |
                    The name of the plugin. The `:latest` tag is optional, and is the
                    default if omitted.
                  in: query
                  name: remote
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    description: no error
                    schema:
                        example:
                            - Description: ""
                              Name: network
                              Value:
                                - host
                            - Description: ""
                              Name: mount
                              Value:
                                - /data
                            - Description: ""
                              Name: device
                              Value:
                                - /dev/cpu_dma_latency
                        items:
                            $ref: '#/components/schemas/PluginPrivilege'
                        schema:
                            type: array
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Get plugin privileges
            tags:
                - Plugin
    /plugins/pull:
        post:
            description: |
                Pulls and installs a plugin. After the plugin is installed, it can be
                enabled using the [`POST /plugins/{name}/enable` endpoint](#operation/PostPluginsEnable).
            operationId: DockerPluginPull
            parameters:
                - description: |
                    Remote reference for plugin to install.

                    The `:latest` tag is optional, and is used as the default if omitted.
                  in: query
                  name: remote
                  required: true
                  schema:
                    type: string
                - description: |
                    Local name for the pulled plugin.

                    The `:latest` tag is optional, and is used as the default if omitted.
                  in: query
                  name: name
                  required: false
                  schema:
                    type: string
                - description: |
                    A base64url-encoded auth configuration to use when pulling a plugin
                    from a registry.

                    Refer to the [authentication section](#section/Authentication) for
                    details.
                  in: header
                  name: X-Registry-Auth
                  schema:
                    type: string
                - in: body
                  name: body
                  schema:
                    example:
                        - Description: ""
                          Name: network
                          Value:
                            - host
                        - Description: ""
                          Name: mount
                          Value:
                            - /data
                        - Description: ""
                          Name: device
                          Value:
                            - /dev/cpu_dma_latency
                    items:
                        $ref: '#/components/schemas/PluginPrivilege'
                    schema:
                        type: array
            produces:
                - application/json
            responses:
                204:
                    description: no error
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Install a plugin
            tags:
                - Plugin
    /secrets:
        get:
            operationId: DockerSecretList
            parameters:
                - description: |
                    A JSON encoded value of the filters (a `map[string][]string`) to
                    process on the secrets list.

                    Available filters:

                    - `id=<secret id>`
                    - `label=<key> or label=<key>=value`
                    - `name=<secret name>`
                    - `names=<secret name>`
                  in: query
                  name: filters
                  schema:
                    type: string
            produces:
                - application/json
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/Secret'
                                    example:
                                        - CreatedAt: "2017-07-20T13:55:28.678958722Z"
                                          ID: blt1owaxmitz71s9v5zh81zun
                                          Spec:
                                            Driver:
                                                Name: secret-bucket
                                                Options:
                                                    OptionA: value for driver option A
                                                    OptionB: value for driver option B
                                            Labels:
                                                some.label: some.value
                                            Name: mysql-passwd
                                          UpdatedAt: "2017-07-20T13:55:28.678958722Z"
                                          Version:
                                            Index: 85
                                        - CreatedAt: "2016-11-05T01:20:17.327670065Z"
                                          ID: ktnbjxoalbkvbvedmg1urrz8h
                                          Spec:
                                            Labels:
                                                foo: bar
                                            Name: app-dev.crt
                                          UpdatedAt: "2016-11-05T01:20:17.327670065Z"
                                          Version:
                                            Index: 11
                                type: array
                    description: no error
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                503:
                    description: node is not part of a swarm
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: List secrets
            tags:
                - Secret
    /secrets/{id}:
        delete:
            operationId: DockerSecretDelete
            parameters:
                - description: ID of the secret
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
            produces:
                - application/json
            responses:
                204:
                    description: no error
                404:
                    description: secret not found
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                503:
                    description: node is not part of a swarm
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Delete a secret
            tags:
                - Secret
        get:
            operationId: DockerSecretInspect
            parameters:
                - description: ID of the secret
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
            produces:
                - application/json
            responses:
                200:
                    description: no error
                    examples:
                        application/json:
                            CreatedAt: "2016-11-05T01:20:17.327670065Z"
                            ID: ktnbjxoalbkvbvedmg1urrz8h
                            Spec:
                                Driver:
                                    Name: secret-bucket
                                    Options:
                                        OptionA: value for driver option A
                                        OptionB: value for driver option B
                                Labels:
                                    foo: bar
                                Name: app-dev.crt
                            UpdatedAt: "2016-11-05T01:20:17.327670065Z"
                            Version:
                                Index: 11
                    schema:
                        $ref: '#/components/schemas/Secret'
                404:
                    description: secret not found
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                503:
                    description: node is not part of a swarm
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Inspect a secret
            tags:
                - Secret
    /secrets/{id}/update:
        post:
            operationId: DockerSecretUpdate
            parameters:
                - description: The ID or name of the secret
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
                - description: |
                    The spec of the secret to update. Currently, only the Labels field
                    can be updated. All other fields must remain unchanged from the
                    [SecretInspect endpoint](#operation/SecretInspect) response values.
                  in: body
                  name: body
                  schema:
                    $ref: '#/components/schemas/SecretSpec'
                - description: |
                    The version number of the secret object being updated. This is
                    required to avoid conflicting writes.
                  format: int64
                  in: query
                  name: version
                  required: true
                  schema:
                    type: integer
            responses:
                200:
                    description: no error
                400:
                    description: bad parameter
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: no such secret
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                503:
                    description: node is not part of a swarm
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Update a Secret
            tags:
                - Secret
    /secrets/create:
        post:
            consumes:
                - application/json
            operationId: DockerSecretCreate
            produces:
                - application/json
            requestBody:
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: '#/components/schemas/SecretSpec'
                                - example:
                                    Data: VEhJUyBJUyBOT1QgQSBSRUFMIENFUlRJRklDQVRFCg==
                                    Driver:
                                        Name: secret-bucket
                                        Options:
                                            OptionA: value for driver option A
                                            OptionB: value for driver option B
                                    Labels:
                                        foo: bar
                                    Name: app-key.crt
                                  type: object
            responses:
                201:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/IdResponse'
                    description: no error
                409:
                    description: name conflicts with an existing object
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                503:
                    description: node is not part of a swarm
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Create a secret
            tags:
                - Secret
    /services:
        get:
            operationId: DockerServiceList
            parameters:
                - description: |
                    A JSON encoded value of the filters (a `map[string][]string`) to
                    process on the services list.

                    Available filters:

                    - `id=<service id>`
                    - `label=<service label>`
                    - `mode=["replicated"|"global"]`
                    - `name=<service name>`
                  in: query
                  name: filters
                  schema:
                    type: string
                - description: |
                    Include service status, with count of running and desired tasks.
                  in: query
                  name: status
                  schema:
                    type: boolean
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/Service'
                                type: array
                    description: no error
                500:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: server error
                503:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                    description: node is not part of a swarm
            summary: List services
            tags:
                - Service
    /services/{id}:
        delete:
            operationId: DockerServiceDelete
            parameters:
                - description: ID or name of service.
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    description: no error
                404:
                    description: no such service
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                503:
                    description: node is not part of a swarm
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Delete a service
            tags:
                - Service
        get:
            operationId: DockerServiceInspect
            parameters:
                - description: ID or name of service.
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
                - default: false
                  description: Fill empty fields with default values.
                  in: query
                  name: insertDefaults
                  schema:
                    type: boolean
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Service'
                    description: no error
                404:
                    description: no such service
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                503:
                    description: node is not part of a swarm
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Inspect a service
            tags:
                - Service
    /services/{id}/archive:
        get:
            description: Get a tar archive of a resource in the filesystem of container id.
            operationId: DockerServiceArchive
            parameters:
                - description: ID or name of the container
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
                - description: Resource in the container’s filesystem to archive.
                  in: query
                  name: path
                  required: true
                  schema:
                    type: string
            produces:
                - application/x-tar
            responses:
                200:
                    description: no error
                400:
                    description: Bad parameter
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: Container or path does not exist
                    examples:
                        application/json:
                            message: 'No such container: c2ada9df5af8'
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Get an archive of a filesystem resource in a container
        head:
            description: |
                A response header `X-Docker-Container-Path-Stat` is returned, containing
                a base64 - encoded JSON object with some filesystem header information
                about the path.
            operationId: DockerServiceArchiveInfo
            parameters:
                - description: ID or name of the container
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
                - description: Resource in the container’s filesystem to archive.
                  in: query
                  name: path
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    description: no error
                    headers:
                        X-Docker-Container-Path-Stat:
                            description: |
                                A base64 - encoded JSON object with some filesystem header
                                information about the path
                            schema:
                                type: string
                400:
                    description: Bad parameter
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: Container or path does not exist
                    examples:
                        application/json:
                            message: 'No such container: c2ada9df5af8'
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: Server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Get information about files in a container
            tags:
                - Container
    /services/{id}/logs:
        get:
            description: |
                Get `stdout` and `stderr` logs from a service. See also
                [`/containers/{id}/logs`](#operation/ContainerLogs).

                **Note**: This endpoint works only for services with the `local`,
                `json-file` or `journald` logging drivers.
            operationId: DockerServiceLogs
            parameters:
                - description: ID or name of the service
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
                - default: false
                  description: Show service context and extra details provided to logs.
                  in: query
                  name: details
                  schema:
                    type: boolean
                - default: false
                  description: Keep connection after returning logs.
                  in: query
                  name: follow
                  schema:
                    type: boolean
                - default: false
                  description: Upgrade to websocket
                  in: query
                  name: websocket
                  schema:
                    type: boolean
                - default: false
                  description: Return logs from `stdout`
                  in: query
                  name: stdout
                  schema:
                    type: boolean
                - default: false
                  description: Return logs from `stderr`
                  in: query
                  name: stderr
                  schema:
                    type: boolean
                - default: 0
                  description: Only return logs since this time, as a UNIX timestamp
                  in: query
                  name: since
                  schema:
                    type: integer
                - default: false
                  description: Add timestamps to every log line
                  in: query
                  name: timestamps
                  schema:
                    type: boolean
                - default: all
                  description: |
                    Only return this number of log lines from the end of the logs.
                    Specify as an integer or `all` to output all log lines.
                  in: query
                  name: tail
                  schema:
                    type: string
            responses:
                200:
                    description: logs returned as a stream in response body
                    schema:
                        format: binary
                        schema:
                            type: string
                404:
                    description: no such service
                    examples:
                        application/json:
                            message: 'No such service: c2ada9df5af8'
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                503:
                    description: node is not part of a swarm
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Get service logs
            tags:
                - Service
    /services/{id}/update:
        post:
            consumes:
                - application/json
            operationId: DockerServiceUpdate
            parameters:
                - description: ID or name of service.
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
                - in: body
                  name: body
                  required: true
                  schema:
                    allOf:
                        - $ref: '#/components/schemas/ServiceSpec'
                        - example:
                            EndpointSpec:
                                Mode: vip
                            Mode:
                                Replicated:
                                    Replicas: 1
                            Name: top
                            RollbackConfig:
                                Delay: 1000000000
                                FailureAction: pause
                                MaxFailureRatio: 0.15
                                Monitor: 15000000000
                                Parallelism: 1
                            TaskTemplate:
                                ContainerSpec:
                                    Args:
                                        - top
                                    Image: busybox
                                ForceUpdate: 0
                                Placement: {}
                                Resources:
                                    Limits: {}
                                    Reservations: {}
                                RestartPolicy:
                                    Condition: any
                                    MaxAttempts: 0
                            UpdateConfig:
                                Delay: 1000000000
                                FailureAction: pause
                                MaxFailureRatio: 0.15
                                Monitor: 15000000000
                                Parallelism: 2
                          type: object
                - description: |
                    The version number of the service object being updated. This is
                    required to avoid conflicting writes.
                    This version number should be the value as currently set on the
                    service *before* the update. You can find the current version by
                    calling `GET /services/{id}`
                  in: query
                  name: version
                  required: true
                  schema:
                    type: integer
                - default: spec
                  description: |
                    If the `X-Registry-Auth` header is not specified, this parameter
                    indicates where to find registry authorization credentials.
                  enum:
                    - spec
                    - previous-spec
                  in: query
                  name: registryAuthFrom
                  schema:
                    type: string
                - description: |
                    Set to this parameter to `previous` to cause a server-side rollback
                    to the previous service spec. The supplied spec will be ignored in
                    this case.
                  in: query
                  name: rollback
                  schema:
                    type: string
                - description: |
                    A base64url-encoded auth configuration for pulling from private
                    registries.

                    Refer to the [authentication section](#section/Authentication) for
                    details.
                  in: header
                  name: X-Registry-Auth
                  schema:
                    type: string
            produces:
                - application/json
            responses:
                200:
                    description: no error
                    schema:
                        $ref: '#/components/schemas/ServiceUpdateResponse'
                400:
                    description: bad parameter
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: no such service
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                503:
                    description: node is not part of a swarm
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Update a service
            tags:
                - Service
    /services/create:
        post:
            consumes:
                - application/json
            operationId: DockerServiceCreate
            parameters:
                - description: |
                    A base64url-encoded auth configuration for pulling from private
                    registries.

                    Refer to the [authentication section](#section/Authentication) for
                    details.
                  in: header
                  name: X-Registry-Auth
                  schema:
                    type: string
            produces:
                - application/json
            requestBody:
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: '#/components/schemas/ServiceSpec'
                                - example:
                                    EndpointSpec:
                                        Ports:
                                            - Protocol: tcp
                                              PublishedPort: 8080
                                              TargetPort: 80
                                    Labels:
                                        foo: bar
                                    Mode:
                                        Replicated:
                                            Replicas: 4
                                    Name: web
                                    RollbackConfig:
                                        Delay: 1000000000
                                        FailureAction: pause
                                        MaxFailureRatio: 0.15
                                        Monitor: 15000000000
                                        Parallelism: 1
                                    TaskTemplate:
                                        ContainerSpec:
                                            DNSConfig:
                                                Nameservers:
                                                    - 8.8.8.8
                                                Options:
                                                    - timeout:3
                                                Search:
                                                    - example.org
                                            Hosts:
                                                - 10.10.10.10 host1
                                                - ABCD:EF01:2345:6789:ABCD:EF01:2345:6789 host2
                                            Image: nginx:alpine
                                            Mounts:
                                                - ReadOnly: true
                                                  Source: web-data
                                                  Target: /usr/share/nginx/html
                                                  Type: volume
                                                  VolumeOptions:
                                                    DriverConfig: {}
                                                    Labels:
                                                        com.example.something: something-value
                                            Secrets:
                                                - File:
                                                    GID: "33"
                                                    Mode: 384
                                                    Name: www.example.org.key
                                                    UID: "33"
                                                  SecretID: fpjqlhnwb19zds35k8wn80lq9
                                                  SecretName: example_org_domain_key
                                            User: "33"
                                        LogDriver:
                                            Name: json-file
                                            Options:
                                                max-file: "3"
                                                max-size: 10M
                                        Placement: {}
                                        Resources:
                                            Limits:
                                                MemoryBytes: 104857600
                                            Reservations: {}
                                        RestartPolicy:
                                            Condition: on-failure
                                            Delay: 10000000000
                                            MaxAttempts: 10
                                    UpdateConfig:
                                        Delay: 1000000000
                                        FailureAction: pause
                                        MaxFailureRatio: 0.15
                                        Monitor: 15000000000
                                        Parallelism: 2
                                  type: object
            responses:
                201:
                    description: no error
                    schema:
                        example:
                            ID: ak7w3gjqoa3kuz8xcpnyy0pvl
                            Warning: 'unable to pin image doesnotexist:latest to digest: image library/doesnotexist:latest not found'
                        properties:
                            ID:
                                description: The ID of the created service.
                                schema:
                                    type: string
                            Warning:
                                description: Optional warning message
                                schema:
                                    type: string
                        schema:
                            type: object
                        title: ServiceCreateResponse
                400:
                    description: bad parameter
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                403:
                    description: network is not eligible for services
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                409:
                    description: name conflicts with an existing service
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                503:
                    description: node is not part of a swarm
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Create a service
            tags:
                - Service
    /session:
        post:
            description: |
                Start a new interactive session with a server. Session allows server to
                call back to the client for advanced capabilities.

                ### Hijacking

                This endpoint hijacks the HTTP connection to HTTP2 transport that allows
                the client to expose gPRC services on that connection.

                For example, the client sends this request to upgrade the connection:

                ```
                POST /session HTTP/1.1
                Upgrade: h2c
                Connection: Upgrade
                ```

                The Docker daemon responds with a `101 UPGRADED` response follow with
                the raw stream:

                ```
                HTTP/1.1 101 UPGRADED
                Connection: Upgrade
                Upgrade: h2c
                ```
            operationId: DockerSession
            produces:
                - application/vnd.docker.raw-stream
            responses:
                101:
                    description: no error, hijacking successful
                400:
                    description: bad parameter
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Initialize interactive session
            tags:
                - Session
    /sh/setup/{name}:
        post:
            operationId: rotateUserCredentialsSh
            parameters:
                - in: path
                  name: name
                  required: true
                  schema:
                    type: string
            responses:
                200:
                    content:
                        text/x-shellscript:
                            type: string
                    description: OK
    /swarm:
        get:
            operationId: DockerSwarmInspect
            responses:
                200:
                    description: no error
                    schema:
                        $ref: '#/components/schemas/Swarm'
                404:
                    description: no such swarm
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                503:
                    description: node is not part of a swarm
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Inspect swarm
            tags:
                - Swarm
    /swarm/init:
        post:
            operationId: DockerSwarmInit
            parameters:
                - in: body
                  name: body
                  required: true
                  schema:
                    example:
                        AdvertiseAddr: 192.168.1.1:2377
                        DataPathPort: 4789
                        DefaultAddrPool:
                            - 10.10.0.0/8
                            - 20.20.0.0/8
                        ForceNewCluster: false
                        ListenAddr: 0.0.0.0:2377
                        Spec:
                            CAConfig: {}
                            Dispatcher: {}
                            EncryptionConfig:
                                AutoLockManagers: false
                            Orchestration: {}
                            Raft: {}
                        SubnetSize: 24
                    properties:
                        AdvertiseAddr:
                            description: |
                                Externally reachable address advertised to other nodes. This
                                can either be an address/port combination in the form
                                `192.168.1.1:4567`, or an interface followed by a port number,
                                like `eth0:4567`. If the port number is omitted, the port
                                number from the listen address is used. If `AdvertiseAddr` is
                                not specified, it will be automatically detected when possible.
                            schema:
                                type: string
                        DataPathAddr:
                            description: |
                                Address or interface to use for data path traffic (format:
                                `<ip|interface>`), for example,  `192.168.1.1`, or an interface,
                                like `eth0`. If `DataPathAddr` is unspecified, the same address
                                as `AdvertiseAddr` is used.

                                The `DataPathAddr` specifies the address that global scope
                                network drivers will publish towards other  nodes in order to
                                reach the containers running on this node. Using this parameter
                                it is possible to separate the container data traffic from the
                                management traffic of the cluster.
                            schema:
                                type: string
                        DataPathPort:
                            description: |
                                DataPathPort specifies the data path port number for data traffic.
                                Acceptable port range is 1024 to 49151.
                                if no port is set or is set to 0, default port 4789 will be used.
                            format: uint32
                            schema:
                                type: integer
                        DefaultAddrPool:
                            description: |
                                Default Address Pool specifies default subnet pools for global
                                scope networks.
                            items:
                                example:
                                    - 10.10.0.0/16
                                    - 20.20.0.0/16
                                schema:
                                    type: string
                            schema:
                                type: array
                        ForceNewCluster:
                            description: Force creation of a new swarm.
                            schema:
                                type: boolean
                        ListenAddr:
                            description: |
                                Listen address used for inter-manager communication, as well
                                as determining the networking interface used for the VXLAN
                                Tunnel Endpoint (VTEP). This can either be an address/port
                                combination in the form `192.168.1.1:4567`, or an interface
                                followed by a port number, like `eth0:4567`. If the port number
                                is omitted, the default swarm listening port is used.
                            schema:
                                type: string
                        Spec:
                            $ref: '#/components/schemas/SwarmSpec'
                        SubnetSize:
                            description: |
                                SubnetSize specifies the subnet size of the networks created
                                from the default subnet pool.
                            format: uint32
                            schema:
                                type: integer
                    schema:
                        type: object
                    title: SwarmInitRequest
            produces:
                - application/json
                - text/plain
            responses:
                200:
                    description: no error
                    schema:
                        description: The node ID
                        example: 7v2t30z9blmxuhnyo6s4cpenp
                        schema:
                            type: string
                400:
                    description: bad parameter
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                503:
                    description: node is already part of a swarm
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Initialize a new swarm
            tags:
                - Swarm
    /swarm/join:
        post:
            operationId: DockerSwarmJoin
            parameters:
                - in: body
                  name: body
                  required: true
                  schema:
                    example:
                        AdvertiseAddr: 192.168.1.1:2377
                        JoinToken: SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-7p73s1dx5in4tatdymyhg9hu2
                        ListenAddr: 0.0.0.0:2377
                        RemoteAddrs:
                            - node1:2377
                    properties:
                        AdvertiseAddr:
                            description: |
                                Externally reachable address advertised to other nodes. This
                                can either be an address/port combination in the form
                                `192.168.1.1:4567`, or an interface followed by a port number,
                                like `eth0:4567`. If the port number is omitted, the port
                                number from the listen address is used. If `AdvertiseAddr` is
                                not specified, it will be automatically detected when possible.
                            schema:
                                type: string
                        DataPathAddr:
                            description: |
                                Address or interface to use for data path traffic (format:
                                `<ip|interface>`), for example,  `192.168.1.1`, or an interface,
                                like `eth0`. If `DataPathAddr` is unspecified, the same addres
                                as `AdvertiseAddr` is used.

                                The `DataPathAddr` specifies the address that global scope
                                network drivers will publish towards other nodes in order to
                                reach the containers running on this node. Using this parameter
                                it is possible to separate the container data traffic from the
                                management traffic of the cluster.
                            schema:
                                type: string
                        JoinToken:
                            description: Secret token for joining this swarm.
                            schema:
                                type: string
                        ListenAddr:
                            description: |
                                Listen address used for inter-manager communication if the node
                                gets promoted to manager, as well as determining the networking
                                interface used for the VXLAN Tunnel Endpoint (VTEP).
                            schema:
                                type: string
                        RemoteAddrs:
                            description: |
                                Addresses of manager nodes already participating in the swarm.
                            items:
                                schema:
                                    type: string
                            schema:
                                type: array
                    schema:
                        type: object
                    title: SwarmJoinRequest
            responses:
                200:
                    description: no error
                400:
                    description: bad parameter
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                503:
                    description: node is already part of a swarm
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Join an existing swarm
            tags:
                - Swarm
    /swarm/leave:
        post:
            operationId: DockerSwarmLeave
            parameters:
                - default: false
                  description: |
                    Force leave swarm, even if this is the last manager or that it will
                    break the cluster.
                  in: query
                  name: force
                  schema:
                    type: boolean
            responses:
                200:
                    description: no error
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                503:
                    description: node is not part of a swarm
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Leave a swarm
            tags:
                - Swarm
    /swarm/unlock:
        post:
            consumes:
                - application/json
            operationId: DockerSwarmUnlock
            parameters:
                - in: body
                  name: body
                  required: true
                  schema:
                    example:
                        UnlockKey: SWMKEY-1-7c37Cc8654o6p38HnroywCi19pllOnGtbdZEgtKxZu8
                    properties:
                        UnlockKey:
                            description: The swarm's unlock key.
                            schema:
                                type: string
                    schema:
                        type: object
                    title: SwarmUnlockRequest
            produces:
                - application/json
            responses:
                200:
                    description: no error
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                503:
                    description: node is not part of a swarm
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Unlock a locked manager
            tags:
                - Swarm
    /swarm/unlockkey:
        get:
            consumes:
                - application/json
            operationId: DockerSwarmUnlockkey
            responses:
                200:
                    description: no error
                    schema:
                        example:
                            UnlockKey: SWMKEY-1-7c37Cc8654o6p38HnroywCi19pllOnGtbdZEgtKxZu8
                        properties:
                            UnlockKey:
                                description: The swarm's unlock key.
                                schema:
                                    type: string
                        schema:
                            type: object
                        title: UnlockKeyResponse
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                503:
                    description: node is not part of a swarm
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Get the unlock key
            tags:
                - Swarm
    /swarm/update:
        post:
            operationId: DockerSwarmUpdate
            parameters:
                - in: body
                  name: body
                  required: true
                  schema:
                    $ref: '#/components/schemas/SwarmSpec'
                - description: |
                    The version number of the swarm object being updated. This is
                    required to avoid conflicting writes.
                  format: int64
                  in: query
                  name: version
                  required: true
                  schema:
                    type: integer
                - default: false
                  description: Rotate the worker join token.
                  in: query
                  name: rotateWorkerToken
                  schema:
                    type: boolean
                - default: false
                  description: Rotate the manager join token.
                  in: query
                  name: rotateManagerToken
                  schema:
                    type: boolean
                - default: false
                  description: Rotate the manager unlock key.
                  in: query
                  name: rotateManagerUnlockKey
                  schema:
                    type: boolean
            responses:
                200:
                    description: no error
                400:
                    description: bad parameter
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                503:
                    description: node is not part of a swarm
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Update a swarm
            tags:
                - Swarm
    /system/df:
        get:
            operationId: DockerSystemDataUsage
            responses:
                200:
                    description: no error
                    schema:
                        example:
                            Containers:
                                - Command: top
                                  Created: 1472592424
                                  HostConfig:
                                    NetworkMode: default
                                  Id: e575172ed11dc01bfce087fb27bee502db149e1a0fad7c296ad300bbff178148
                                  Image: busybox
                                  ImageID: sha256:2b8fd9751c4c0f5dd266fcae00707e67a2545ef34f9a29354585f93dac906749
                                  Labels: {}
                                  Mounts: []
                                  Names:
                                    - /top
                                  NetworkSettings:
                                    Networks:
                                        bridge:
                                            Aliases: null
                                            EndpointID: 8ed5115aeaad9abb174f68dcf135b49f11daf597678315231a32ca28441dec6a
                                            Gateway: 172.18.0.1
                                            GlobalIPv6Address: ""
                                            GlobalIPv6PrefixLen: 0
                                            IPAMConfig: null
                                            IPAddress: 172.18.0.2
                                            IPPrefixLen: 16
                                            IPv6Gateway: ""
                                            Links: null
                                            MacAddress: 02:42:ac:12:00:02
                                            NetworkID: d687bc59335f0e5c9ee8193e5612e8aee000c8c62ea170cfb99c098f95899d92
                                  Ports: []
                                  SizeRootFs: 1092588
                                  State: exited
                                  Status: Exited (0) 56 minutes ago
                            Images:
                                - Containers: 1
                                  Created: 1466724217
                                  Id: sha256:2b8fd9751c4c0f5dd266fcae00707e67a2545ef34f9a29354585f93dac906749
                                  Labels: {}
                                  ParentId: ""
                                  RepoDigests:
                                    - busybox@sha256:a59906e33509d14c036c8678d687bd4eec81ed7c4b8ce907b888c607f6a1e0e6
                                  RepoTags:
                                    - busybox:latest
                                  SharedSize: 0
                                  Size: 1092588
                                  VirtualSize: 1092588
                            LayersSize: 1092588
                            Volumes:
                                - Driver: local
                                  Labels: null
                                  Mountpoint: /var/lib/docker/volumes/my-volume/_data
                                  Name: my-volume
                                  Options: null
                                  Scope: local
                                  UsageData:
                                    RefCount: 2
                                    Size: 10920104
                        properties:
                            BuildCache:
                                items:
                                    $ref: '#/components/schemas/BuildCache'
                                schema:
                                    type: array
                            Containers:
                                items:
                                    $ref: '#/components/schemas/ContainerSummary'
                                schema:
                                    type: array
                            Images:
                                items:
                                    $ref: '#/components/schemas/ImageSummary'
                                schema:
                                    type: array
                            LayersSize:
                                format: int64
                                schema:
                                    type: integer
                            Volumes:
                                items:
                                    $ref: '#/components/schemas/Volume'
                                schema:
                                    type: array
                        schema:
                            type: object
                        title: SystemDataUsageResponse
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Get data usage information
            tags:
                - System
    /tasks:
        get:
            operationId: DockerTaskList
            parameters:
                - description: |
                    A JSON encoded value of the filters (a `map[string][]string`) to
                    process on the tasks list.

                    Available filters:

                    - `desired-state=(running | shutdown | accepted)`
                    - `id=<task id>`
                    - `label=key` or `label="key=value"`
                    - `name=<task name>`
                    - `node=<node id or name>`
                    - `service=<service name>`
                  in: query
                  name: filters
                  schema:
                    type: string
            produces:
                - application/json
            responses:
                200:
                    description: no error
                    schema:
                        example:
                            - CreatedAt: "2016-06-07T21:07:31.171892745Z"
                              DesiredState: running
                              ID: 0kzzo1i0y4jz6027t0k7aezc7
                              NetworksAttachments:
                                - Addresses:
                                    - 10.255.0.10/16
                                  Network:
                                    CreatedAt: "2016-06-07T20:31:11.912919752Z"
                                    DriverState:
                                        Name: overlay
                                        Options:
                                            com.docker.network.driver.overlay.vxlanid_list: "256"
                                    ID: 4qvuz4ko70xaltuqbt8956gd1
                                    IPAMOptions:
                                        Configs:
                                            - Gateway: 10.255.0.1
                                              Subnet: 10.255.0.0/16
                                        Driver:
                                            Name: default
                                    Spec:
                                        DriverConfiguration: {}
                                        IPAMOptions:
                                            Configs:
                                                - Gateway: 10.255.0.1
                                                  Subnet: 10.255.0.0/16
                                            Driver: {}
                                        Labels:
                                            com.docker.swarm.internal: "true"
                                        Name: ingress
                                    UpdatedAt: "2016-06-07T21:07:29.955277358Z"
                                    Version:
                                        Index: 18
                              NodeID: 60gvrl6tm78dmak4yl7srz94v
                              ServiceID: 9mnpnzenvg8p8tdbtq4wvbkcz
                              Slot: 1
                              Spec:
                                ContainerSpec:
                                    Image: redis
                                Placement: {}
                                Resources:
                                    Limits: {}
                                    Reservations: {}
                                RestartPolicy:
                                    Condition: any
                                    MaxAttempts: 0
                              Status:
                                ContainerStatus:
                                    ContainerID: e5d62702a1b48d01c3e02ca1e0212a250801fa8d67caca0b6f35919ebc12f035
                                    PID: 677
                                Message: started
                                State: running
                                Timestamp: "2016-06-07T21:07:31.290032978Z"
                              UpdatedAt: "2016-06-07T21:07:31.376370513Z"
                              Version:
                                Index: 71
                            - CreatedAt: "2016-06-07T21:07:30.019104782Z"
                              DesiredState: shutdown
                              ID: 1yljwbmlr8er2waf8orvqpwms
                              Name: hopeful_cori
                              NetworksAttachments:
                                - Addresses:
                                    - 10.255.0.5/16
                                  Network:
                                    CreatedAt: "2016-06-07T20:31:11.912919752Z"
                                    DriverState:
                                        Name: overlay
                                        Options:
                                            com.docker.network.driver.overlay.vxlanid_list: "256"
                                    ID: 4qvuz4ko70xaltuqbt8956gd1
                                    IPAMOptions:
                                        Configs:
                                            - Gateway: 10.255.0.1
                                              Subnet: 10.255.0.0/16
                                        Driver:
                                            Name: default
                                    Spec:
                                        DriverConfiguration: {}
                                        IPAMOptions:
                                            Configs:
                                                - Gateway: 10.255.0.1
                                                  Subnet: 10.255.0.0/16
                                            Driver: {}
                                        Labels:
                                            com.docker.swarm.internal: "true"
                                        Name: ingress
                                    UpdatedAt: "2016-06-07T21:07:29.955277358Z"
                                    Version:
                                        Index: 18
                              NodeID: 60gvrl6tm78dmak4yl7srz94v
                              ServiceID: 9mnpnzenvg8p8tdbtq4wvbkcz
                              Slot: 1
                              Spec:
                                ContainerSpec:
                                    Image: redis
                                Placement: {}
                                Resources:
                                    Limits: {}
                                    Reservations: {}
                                RestartPolicy:
                                    Condition: any
                                    MaxAttempts: 0
                              Status:
                                ContainerStatus:
                                    ContainerID: 1cf8d63d18e79668b0004a4be4c6ee58cddfad2dae29506d8781581d0688a213
                                Message: shutdown
                                State: shutdown
                                Timestamp: "2016-06-07T21:07:30.202183143Z"
                              UpdatedAt: "2016-06-07T21:07:30.231958098Z"
                              Version:
                                Index: 30
                        items:
                            $ref: '#/components/schemas/Task'
                        schema:
                            type: array
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                503:
                    description: node is not part of a swarm
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: List tasks
            tags:
                - Task
    /tasks/{id}:
        get:
            operationId: DockerTaskInspect
            parameters:
                - description: ID of the task
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
            produces:
                - application/json
            responses:
                200:
                    description: no error
                    schema:
                        $ref: '#/components/schemas/Task'
                404:
                    description: no such task
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                503:
                    description: node is not part of a swarm
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Inspect a task
            tags:
                - Task
    /tasks/{id}/logs:
        get:
            description: |
                Get `stdout` and `stderr` logs from a task.
                See also [`/containers/{id}/logs`](#operation/ContainerLogs).

                **Note**: This endpoint works only for services with the `local`,
                `json-file` or `journald` logging drivers.
            operationId: DockerTaskLogs
            parameters:
                - description: ID of the task
                  in: path
                  name: id
                  required: true
                  schema:
                    type: string
                - default: false
                  description: Show task context and extra details provided to logs.
                  in: query
                  name: details
                  schema:
                    type: boolean
                - default: false
                  description: Keep connection after returning logs.
                  in: query
                  name: follow
                  schema:
                    type: boolean
                - default: false
                  description: Return logs from `stdout`
                  in: query
                  name: stdout
                  schema:
                    type: boolean
                - default: false
                  description: Return logs from `stderr`
                  in: query
                  name: stderr
                  schema:
                    type: boolean
                - default: 0
                  description: Only return logs since this time, as a UNIX timestamp
                  in: query
                  name: since
                  schema:
                    type: integer
                - default: false
                  description: Add timestamps to every log line
                  in: query
                  name: timestamps
                  schema:
                    type: boolean
                - default: all
                  description: |
                    Only return this number of log lines from the end of the logs.
                    Specify as an integer or `all` to output all log lines.
                  in: query
                  name: tail
                  schema:
                    type: string
            responses:
                200:
                    description: logs returned as a stream in response body
                    schema:
                        format: binary
                        schema:
                            type: string
                404:
                    description: no such task
                    examples:
                        application/json:
                            message: 'No such task: c2ada9df5af8'
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                503:
                    description: node is not part of a swarm
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Get task logs
            tags:
                - Task
    /version:
        get:
            operationId: getCodeVersion
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CodeVersionInfo'
                    description: OK
    /volumes:
        get:
            operationId: DockerVolumeList
            parameters:
                - description: |
                    JSON encoded value of the filters (a `map[string][]string`) to
                    process on the volumes list. Available filters:

                    - `dangling=<boolean>` When set to `true` (or `1`), returns all
                       volumes that are not in use by a container. When set to `false`
                       (or `0`), only volumes that are in use by one or more
                       containers are returned.
                    - `driver=<volume-driver-name>` Matches volumes based on their driver.
                    - `label=<key>` or `label=<key>:<value>` Matches volumes based on
                       the presence of a `label` alone or a `label` and a value.
                    - `name=<volume-name>` Matches all or part of a volume name.
                  format: json
                  in: query
                  name: filters
                  schema:
                    type: string
            produces:
                - application/json
            responses:
                200:
                    content:
                        application/json:
                            description: Volume list response
                            schema:
                                properties:
                                    Volumes:
                                        items:
                                            $ref: '#/components/schemas/Volume'
                                        type: array
                                    Warnings:
                                        description: |
                                            Warnings that occurred when fetching the list of volumes.
                                        items:
                                            type: string
                                        type: array
                                required:
                                    - Volumes
                                    - Warnings
                                type: object
                            title: VolumeListResponse
                    description: Summary volume data that matches the query
                500:
                    description: Server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: List volumes
            tags:
                - Volume
    /volumes/{name}:
        delete:
            description: Instruct the driver to remove the volume.
            operationId: DockerVolumeDelete
            parameters:
                - description: Volume name or ID
                  in: path
                  name: name
                  required: true
                  schema:
                    type: string
                - default: false
                  description: Force the removal of the volume
                  in: query
                  name: force
                  schema:
                    type: boolean
            responses:
                204:
                    description: The volume was removed
                404:
                    description: No such volume or volume driver
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                409:
                    description: Volume is in use and cannot be removed
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: Server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Remove a volume
            tags:
                - Volume
        get:
            operationId: DockerVolumeInspect
            parameters:
                - description: Volume name or ID
                  in: path
                  name: name
                  required: true
                  schema:
                    type: string
            produces:
                - application/json
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Volume'
                    description: No error
                404:
                    description: No such volume
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
                500:
                    description: Server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Inspect a volume
            tags:
                - Volume
    /volumes/create:
        post:
            consumes:
                - application/json
            operationId: DockerVolumeCreate
            produces:
                - application/json
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/VolumeCreateOptions'
            responses:
                201:
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Volume'
                    description: The volume was created successfully
                500:
                    description: Server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Create a volume
            tags:
                - Volume
    /volumes/prune:
        post:
            operationId: DockerVolumePrune
            parameters:
                - description: |
                    Filters to process on the prune list, encoded as JSON (a `map[string][]string`).

                    Available filters:
                    - `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune volumes with (or without, in case `label!=...` is used) the specified labels.
                  in: query
                  name: filters
                  schema:
                    type: string
            produces:
                - application/json
            responses:
                200:
                    description: No error
                    schema:
                        properties:
                            SpaceReclaimed:
                                description: Disk space reclaimed in bytes
                                format: int64
                                schema:
                                    type: integer
                            VolumesDeleted:
                                description: Volumes that were deleted
                                items:
                                    schema:
                                        type: string
                                schema:
                                    type: array
                        schema:
                            type: object
                        title: VolumePruneResponse
                500:
                    description: Server error
                    schema:
                        $ref: '#/components/schemas/ErrorResponse'
            summary: Delete unused volumes
            tags:
                - Volume
servers:
    - description: dev
      url: https://localhost:3447/v1/
